(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    548105,      13373]
NotebookOptionsPosition[    521013,      12560]
NotebookOutlinePosition[    521449,      12578]
CellTagsIndexPosition[    521406,      12575]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Phase detection over {secrets, interactions}.", "Title",
 CellChangeTimes->{{3.711893322491086*^9, 3.711893323596881*^9}, {
  3.712194931358431*^9, 3.7121949613703938`*^9}, {3.71227459649093*^9, 
  3.712274596706977*^9}}],

Cell[CellGroupData[{

Cell["Editing", "Chapter",
 CellChangeTimes->{{3.712455416162492*^9, 3.712455437615488*^9}, {
  3.712455584766762*^9, 3.7124555900980673`*^9}}],

Cell[TextData[{
 "Feel free to edit this notebook. Please do contribute whatever code or \
ideas come to mind.\n\nRemember to do ",
 StyleBox["Delete All Output",
  FontWeight->"Bold"],
 " before you commit your changes to this file."
}], "Text",
 CellChangeTimes->{{3.7124554404736*^9, 3.712455613506193*^9}, {
  3.712455684472351*^9, 3.7124557186151323`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Implementation", "Chapter",
 InitializationCell->True,
 CellChangeTimes->{{3.711893331005879*^9, 3.7118933324774857`*^9}, 
   3.712197407414839*^9}],

Cell[CellGroupData[{

Cell["The TSS format", "Subsection",
 CellChangeTimes->{{3.712194985505883*^9, 3.712194991970072*^9}}],

Cell[TextData[{
 "One file containing multiple time series. Like\[NonBreakingSpace]multiple .",
 StyleBox["csv",
  IgnoreSpellCheck->True],
 " files in one file, separated by blank lines. Plus a leading \
\[OpenCurlyDoubleQuote]SECRET:____\[CloseCurlyDoubleQuote] line. That\
\[CloseCurlyQuote]s it."
}], "Text",
 CellChangeTimes->{{3.7121949942047873`*^9, 3.7121950634267263`*^9}, {
  3.712195359008273*^9, 3.712195359833374*^9}, {3.712197468468877*^9, 
  3.712197497465884*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Parse a TSS file", "Section",
 CellChangeTimes->{{3.7125006227626543`*^9, 3.712500632553053*^9}}],

Cell["\<\
Parse TSS file and return {secrets, interactions} \[LongDash] a list of \
strings and a list of Datasets.\
\>", "Text",
 InitializationCell->True,
 CellChangeTimes->{{3.711752225171064*^9, 3.711752248383999*^9}, {
  3.711752300658422*^9, 3.711752336056366*^9}, {3.711753383643845*^9, 
  3.711753404259533*^9}, {3.711755213832123*^9, 3.711755251293276*^9}, {
  3.7118099896084557`*^9, 3.711809991416238*^9}, {3.7118102350920973`*^9, 
  3.711810333642619*^9}, {3.711810995347321*^9, 3.711811010514382*^9}, {
  3.712195095292759*^9, 3.7121951450227957`*^9}, {3.7121951936643476`*^9, 
  3.7121952120318413`*^9}, {3.712500635774994*^9, 3.712500640743738*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ParseTssFile", "[", "pathname_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "text", ",", "chunklist", ",", "tuples", ",", "secrets", ",", 
      "interactions"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"text", "=", 
      RowBox[{"Import", "[", 
       RowBox[{"pathname", ",", " ", "\"\<Text\>\""}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"chunklist", "=", 
      RowBox[{"StringSplit", "[", 
       RowBox[{"text", ",", "\"\<\\n\\n\>\""}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"tuples", "=", 
      RowBox[{"ParseTssChunk", "/@", "chunklist"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"secrets", "=", 
      RowBox[{"First", "/@", "tuples"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"interactions", "=", 
      RowBox[{"Last", "/@", "tuples"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Print", "@", 
      RowBox[{"DescribeSecsIAs", "[", 
       RowBox[{"secrets", ",", "interactions"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"secrets", ",", "interactions"}], "}"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.711760509505924*^9, 3.711760677161474*^9}, {
  3.7117607251201487`*^9, 3.7117607370674973`*^9}, {3.711760812884362*^9, 
  3.711760854030727*^9}, {3.711810210156918*^9, 3.711810210448846*^9}, {
  3.711811507790008*^9, 3.7118115098083763`*^9}, {3.7118116741581*^9, 
  3.711811675444652*^9}, {3.711811750738574*^9, 3.711811753078875*^9}, {
  3.7118173136791897`*^9, 3.711817325288361*^9}, {3.7118193253778143`*^9, 
  3.711819450775174*^9}, {3.712240209428269*^9, 3.712240220066059*^9}, {
  3.712254592750434*^9, 3.7122545938650637`*^9}}],

Cell[CellGroupData[{

Cell["Hack: Caching version of ParseTssFile", "Subsubsection",
 CellChangeTimes->{{3.729185308683707*^9, 3.7291853339923267`*^9}, 
   3.729185387843464*^9}],

Cell[TextData[{
 "This uses the global variable ",
 StyleBox["tssCache ",
  FontWeight->"Bold"],
 "(an Association) as a cache from TSS file names to {secs, ias} pairs.\n\
Warning, this could use up a lot of memory!"
}], "Text",
 CellChangeTimes->{{3.729185425728606*^9, 3.7291854838296013`*^9}, {
  3.729188197058025*^9, 3.7291882185101748`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"ParseTssFileCaching", "[", "pathname_", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "text", ",", "chunklist", ",", "tuples", ",", "secrets", ",", 
       "interactions"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "Create", " ", "an", " ", "empty", " ", "cache", " ", "if", " ", "it", 
       " ", 
       RowBox[{"doesn", "'"}], "t", " ", "exist", " ", 
       RowBox[{"yet", "."}]}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"Not", "@", 
         RowBox[{"AssociationQ", "[", "tssCache", "]"}]}], ",", 
        RowBox[{"tssCache", "=", 
         RowBox[{"Association", "[", "]"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Have", " ", "we", " ", "already", " ", "parsed", " ", "this", " ", 
        RowBox[{"filename", "?"}]}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"KeyExistsQ", "[", 
         RowBox[{"tssCache", ",", "pathname"}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"secrets", ",", "interactions"}], "}"}], "=", 
          RowBox[{"tssCache", "[", 
           RowBox[{"[", "pathname", "]"}], "]"}]}], ";", 
         RowBox[{"Print", "@", 
          RowBox[{"DescribeSecsIAs", "[", 
           RowBox[{"secrets", ",", "interactions"}], "]"}]}], ";"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", "else", " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"secrets", ",", "interactions"}], "}"}], "=", 
          RowBox[{"ParseTssFile", "[", "pathname", "]"}]}], ";", 
         RowBox[{"AssociateTo", "[", 
          RowBox[{"tssCache", ",", 
           RowBox[{"pathname", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"secrets", ",", "interactions"}], "}"}]}]}], "]"}], 
         ";"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"{", 
        RowBox[{"secrets", ",", "interactions"}], "}"}], "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ClearTssCache", "[", "]"}], ":=", 
   RowBox[{"Clear", "[", "tssCache", "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.711760509505924*^9, 3.711760677161474*^9}, {
  3.7117607251201487`*^9, 3.7117607370674973`*^9}, {3.711760812884362*^9, 
  3.711760854030727*^9}, {3.711810210156918*^9, 3.711810210448846*^9}, {
  3.711811507790008*^9, 3.7118115098083763`*^9}, {3.7118116741581*^9, 
  3.711811675444652*^9}, {3.711811750738574*^9, 3.711811753078875*^9}, {
  3.7118173136791897`*^9, 3.711817325288361*^9}, {3.7118193253778143`*^9, 
  3.711819450775174*^9}, {3.712240209428269*^9, 3.712240220066059*^9}, {
  3.712254592750434*^9, 3.7122545938650637`*^9}, {3.72918551452241*^9, 
  3.729185779145048*^9}, {3.72918822333302*^9, 3.729188224169339*^9}, {
  3.729188468213558*^9, 3.729188499058902*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Parse one chunk of a TSS file.", "Subsubsection",
 CellChangeTimes->{{3.712500759534705*^9, 3.712500760351557*^9}}],

Cell["\<\
The first line contains SECRET: followed by the secret.
The second line contains comma-separated column labels.
The rest of the lines contain comma-separated values.\
\>", "Text",
 InitializationCell->True,
 CellChangeTimes->{{3.711752225171064*^9, 3.711752248383999*^9}, {
   3.711752300658422*^9, 3.711752336056366*^9}, {3.711753383643845*^9, 
   3.711753404259533*^9}, {3.711755213832123*^9, 3.711755251293276*^9}, {
   3.7118099896084557`*^9, 3.711809991416238*^9}, {3.7121951511008873`*^9, 
   3.712195187237562*^9}, {3.712500658245278*^9, 3.7125006938946123`*^9}, 
   3.7125007552965107`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ParseTssChunk", "[", "chunk_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "secretline", ",", " ", "headerline", ",", " ", "restcsv", ",", " ", 
      "secret", ",", "columnnames", ",", "matrix", ",", "packets"}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"secretline", ",", " ", "headerline", ",", "restcsv"}], "}"}], 
      "=", 
      RowBox[{"StringSplit", "[", 
       RowBox[{"chunk", ",", " ", "\"\<\\n\>\"", ",", "3"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"secret", "=", 
      RowBox[{"Last", "@", 
       RowBox[{"StringSplit", "[", 
        RowBox[{"secretline", ",", "\"\<SECRET:\>\"", ",", "2"}], "]"}]}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"columnnames", "=", 
      RowBox[{"StringSplit", "[", 
       RowBox[{"headerline", ",", "\"\<,\>\""}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"matrix", "=", 
      RowBox[{"ImportString", "[", 
       RowBox[{"restcsv", ",", "\"\<CSV\>\""}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"packets", "=", 
      RowBox[{"Dataset", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"AssociationThread", "[", 
          RowBox[{"columnnames", ",", "#"}], "]"}], "&"}], "/@", "matrix"}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"\"\<secret\>\"", "\[Rule]", "secret"}], ",", 
       RowBox[{"\"\<packets\>\"", "\[Rule]", "packets"}]}], "|>"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7117551478482*^9, 3.711755173601919*^9}, {
   3.711760267689032*^9, 3.711760324137959*^9}, {3.71176065133637*^9, 
   3.711760654754271*^9}, {3.7117609317966003`*^9, 3.711761019982108*^9}, {
   3.71180991907281*^9, 3.71180998121472*^9}, {3.7118101212765408`*^9, 
   3.7118101292964487`*^9}, {3.711810206889806*^9, 3.7118102071924057`*^9}, {
   3.71181181427671*^9, 3.711811815701273*^9}, 3.711817898159153*^9, {
   3.711827102237211*^9, 3.711827103313485*^9}, {3.7118271692963657`*^9, 
   3.711827170336247*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Describe a {secrets, interactions} pair.", "Subsubsection",
 CellChangeTimes->{{3.712500719325789*^9, 3.712500748122558*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"DescribeSecsIAs", "[", 
   RowBox[{"secs_", ",", "ias_"}], "]"}], ":=", 
  RowBox[{"Column", "[", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"\"\<Interactions\>\"", "\[Rule]", 
      RowBox[{"Length", "[", "ias", "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<Secrets\>\"", "\[Rule]", 
      RowBox[{"Length", "[", "secs", "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<Unique secrets\>\"", "\[Rule]", 
      RowBox[{"Length", "[", 
       RowBox[{"DeleteDuplicates", "[", "secs", "]"}], "]"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"\"\<Min time\>\"", "\[Rule]", 
      RowBox[{"MinTimeInIAs", "[", "ias", "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<Max time\>\"", "\[Rule]", 
      RowBox[{"MaxTimeInIAs", "[", "ias", "]"}]}]}], "\[IndentingNewLine]", 
    "}"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.71224008707574*^9, 3.712240199648078*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Show secrets", "Section",
 CellChangeTimes->{{3.712239958964785*^9, 3.712239960369088*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ShowSecrets", "[", "secs_", "]"}], ":=", 
  RowBox[{"Dataset", "[", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"<|", 
       RowBox[{"{", 
        RowBox[{"\"\<secret\>\"", "\[Rule]", "#"}], "}"}], "|>"}], "&"}], ",",
      "secs"}], "]"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ShowUniqueSecrets", "[", "secs_", "]"}], ":=", 
  RowBox[{"ShowSecrets", "[", 
   RowBox[{"DeleteDuplicates", "[", "secs", "]"}], "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.712239962076071*^9, 3.7122399922827806`*^9}, {
  3.712241472647353*^9, 3.7122414760512447`*^9}, {3.7122417880489902`*^9, 
  3.7122418066148033`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Separate interactions by secret value", "Section",
 CellChangeTimes->{{3.712083981643654*^9, 3.71208399753677*^9}}],

Cell["\<\
Given a list of secrets and a list of interactions, return an association \
secret \[Rule] list of interactions.\
\>", "Text",
 CellChangeTimes->{{3.712084067584422*^9, 3.712084121039401*^9}, {
  3.712195224039147*^9, 3.7121952249731617`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"SeparateBySecret", "[", 
   RowBox[{"secs_", ",", "ias_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "posindex", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"posindex", "=", 
      RowBox[{"PositionIndex", "[", "secs", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"ias", "[", 
         RowBox[{"[", "#", "]"}], "]"}], "&"}], ",", "posindex"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7120840008297777`*^9, 3.712084053420587*^9}, 
   3.712084128069171*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Convert interaction to EventSeries", "Section",
 InitializationCell->True,
 CellChangeTimes->{{3.7118192032804956`*^9, 3.71181920531917*^9}, {
  3.711848551565176*^9, 3.7118485558666677`*^9}, {3.7118487929388037`*^9, 
  3.711848798206459*^9}, {3.711848842835973*^9, 3.711848872973538*^9}}],

Cell["\<\
Just size over time. EventSeries are useful because of Mathematica built-in \
functions on them.\
\>", "Text",
 InitializationCell->True,
 CellChangeTimes->{{3.711848802929035*^9, 3.711848833347259*^9}, {
   3.7121952306096582`*^9, 3.712195278251195*^9}, 3.7123725894181433`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"IA2ES", "[", "ia_", "]"}], ":=", 
  RowBox[{"EventSeries", "[", 
   RowBox[{"Transpose", "@", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Normal", "@", 
       RowBox[{"ia", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", "\"\<time\>\""}], "]"}], "]"}]}], ",", 
      RowBox[{"Normal", "@", 
       RowBox[{"ia", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", "\"\<size\>\""}], "]"}], "]"}]}]}], "}"}]}], 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7118198009089823`*^9, 3.711819835189948*^9}, {
  3.711820054711323*^9, 3.711820060837059*^9}, {3.711820145700857*^9, 
  3.7118201510423822`*^9}, {3.711820717742571*^9, 3.7118207306143217`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Shorthands to get an interaction\[CloseCurlyQuote]s time vector or size vector\
\>", "Section",
 CellChangeTimes->{{3.712242843842661*^9, 3.712242853507497*^9}, {
  3.712242968360564*^9, 3.71224297045229*^9}, {3.7123739463755627`*^9, 
  3.71237397223783*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"TimesIA", "[", "ia_", "]"}], ":=", 
  RowBox[{"Normal", "[", 
   RowBox[{"ia", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", "\"\<time\>\""}], "]"}], "]"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SizesIA", "[", "ia_", "]"}], ":=", 
  RowBox[{"Normal", "[", 
   RowBox[{"ia", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", "\"\<size\>\""}], "]"}], "]"}], "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.712242859791316*^9, 3.712242919364286*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Merge fully-loaded-packet streaks", "Section",
 CellChangeTimes->{{3.712441204148204*^9, 3.712441252947853*^9}, {
  3.717880213367786*^9, 3.717880227706506*^9}}],

Cell[TextData[{
 "Given a list of sizes and a maximum payload size M, return another list of \
sizes where any run of n adjacent appearances of M that is followed by \
another number A gets replaced by (n\[Times]M+A). ",
 StyleBox["PEND:",
  FontWeight->"Bold"],
 " Currently, a run of Ms is not replaced if it isn\[CloseCurlyQuote]t \
followed by something else. Is this correct?"
}], "Text",
 CellChangeTimes->{{3.712441443873283*^9, 3.712441606116755*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"SizesMergedIA", "[", "ia_", "]"}], ":=", 
   RowBox[{"MergeFullyLoadedPacketSizes", "[", 
    RowBox[{
     RowBox[{"SizesIA", "[", "ia", "]"}], ",", "1448"}], "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MergeFullyLoadedPacketSizes", "[", 
   RowBox[{"sizes_", ",", "maxsize_"}], "]"}], ":=", 
  RowBox[{"Fold", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Function", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"l1", ",", "l2"}], "}"}], ",", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "l1", "]"}], ">", "0"}], "\[And]", 
         RowBox[{
          RowBox[{"Last", "[", "l1", "]"}], "\[Equal]", "maxsize"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"With", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"split", "=", 
            RowBox[{"SplitBy", "[", 
             RowBox[{"l1", ",", 
              RowBox[{
               RowBox[{"#", "\[Equal]", "maxsize"}], "&"}]}], "]"}]}], "}"}], 
          ",", "\[IndentingNewLine]", 
          RowBox[{"Join", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Catenate", "[", 
             RowBox[{"Drop", "[", 
              RowBox[{"split", ",", 
               RowBox[{"-", "1"}]}], "]"}], "]"}], ",", "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{"Total", "[", 
              RowBox[{"Join", "[", 
               RowBox[{
                RowBox[{"Last", "[", "split", "]"}], ",", 
                RowBox[{"Take", "[", 
                 RowBox[{"l2", ",", "1"}], "]"}]}], "]"}], "]"}], "}"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"Drop", "[", 
             RowBox[{"l2", ",", "1"}], "]"}]}], "\[IndentingNewLine]", 
           "]"}]}], "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
        
        RowBox[{"Join", "[", 
         RowBox[{"l1", ",", "l2"}], "]"}]}], "\[IndentingNewLine]", "]"}]}], 
     "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"SplitBy", "[", 
     RowBox[{"sizes", ",", 
      RowBox[{
       RowBox[{"#", "\[Equal]", "maxsize"}], "&"}]}], "]"}]}], 
   "\[IndentingNewLine]", "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.712439521336887*^9, 3.712439601560413*^9}, {
  3.712439640504613*^9, 3.7124396536436234`*^9}, {3.712439693189228*^9, 
  3.712439705150517*^9}, {3.712441260391201*^9, 3.712441374430818*^9}, {
  3.712441465970207*^9, 3.712441470911278*^9}, {3.712441655742543*^9, 
  3.71244169659683*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MergeFullyLoadedPacketSizes", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "14", ",", "11", ",", "0", ",", "0", ",", "15", ",", "1448", ",", "45", 
     ",", "198", ",", "6", ",", "1448", ",", "1448", ",", "1448", ",", "141", 
     ",", "15", ",", "1448", ",", "2", ",", "37", ",", "298", ",", "341"}], 
    "}"}], ",", "1448"}], "]"}]], "Input",
 CellChangeTimes->{{3.712441622114293*^9, 3.7124416288340273`*^9}, {
  3.71244171817413*^9, 3.712441747195133*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "14", ",", "11", ",", "0", ",", "0", ",", "15", ",", "1493", ",", "198", 
   ",", "6", ",", "4485", ",", "15", ",", "1450", ",", "37", ",", "298", ",", 
   "341"}], "}"}]], "Output",
 CellChangeTimes->{3.7130374185021133`*^9, 3.71534324868778*^9}]
}, Open  ]],

Cell[TextData[{
 "This version returns another interaction with the streaks merged. This is \
useful as it allows us to apply IA functions (like ShowIA, BubbleChartIAs, \
etc) to the aggregated version of the interaction.\n\n",
 StyleBox["NOTE: ",
  FontWeight->"Bold"],
 "Flags, src/dst IP & ports, etcetera are those of the FIRST packet of the \
streak. This is not exactly \[OpenCurlyDoubleQuote]true\
\[CloseCurlyDoubleQuote], but will do for now.\n",
 StyleBox["PEND: ",
  FontWeight->"Bold"],
 "We currently DO NOT check that the whole streak is going in the same \
direction. We make the decision based solely on packet sizes. Beware!"
}], "Text",
 CellChangeTimes->{{3.717881105987591*^9, 3.717881203779467*^9}, {
  3.717935033676218*^9, 3.717935168818201*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"MergeStreaksIA", "[", 
    RowBox[{"ia_", ",", "magicSize_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"result", "=", 
        RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"currPos", "=", "1"}], ",", "\[IndentingNewLine]", "currSize", 
       ",", "totalSize", ",", "\[IndentingNewLine]", 
       RowBox[{"streakLength", "=", "0"}], ",", "\[IndentingNewLine]", 
       "streakFirstEvent", ",", "superPacket"}], "\[IndentingNewLine]", "}"}],
      ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"While", "[", 
       RowBox[{
        RowBox[{"currPos", "\[LessEqual]", 
         RowBox[{"Length", "[", "ia", "]"}]}], ",", "\[IndentingNewLine]", 
        "\t", 
        RowBox[{
         RowBox[{"currSize", "=", 
          RowBox[{
           RowBox[{"ia", "[", 
            RowBox[{"[", "currPos", "]"}], "]"}], "[", "\"\<size\>\"", 
           "]"}]}], ";", "\[IndentingNewLine]", "\t", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"currSize", "\[Equal]", "magicSize"}], ",", 
           "\[IndentingNewLine]", "\t", 
           RowBox[{"(*", " ", 
            RowBox[{"found", " ", "a", " ", "magic", " ", "elem"}], " ", 
            "*)"}], "\[IndentingNewLine]", "\t\t", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"streakLength", "\[Equal]", "0"}], ",", 
             "\[IndentingNewLine]", "\t\t", 
             RowBox[{"(*", " ", 
              RowBox[{
               RowBox[{"then", ":", " ", 
                RowBox[{
                 RowBox[{"it", "'"}], "s", " ", "the", " ", "first", " ", 
                 "of", " ", "a", " ", "streak"}]}], ",", " ", 
               RowBox[{"save", " ", "its", " ", "info"}]}], " ", "*)"}], 
             "\[IndentingNewLine]", "\t\t\t", 
             RowBox[{
              RowBox[{"streakFirstEvent", "=", 
               RowBox[{"ia", "[", 
                RowBox[{"[", "currPos", "]"}], "]"}]}], ";", 
              "\[IndentingNewLine]", "\t\t\t", 
              RowBox[{"streakLength", "++"}]}], ",", "\[IndentingNewLine]", 
             "\t\t", 
             RowBox[{"(*", " ", 
              RowBox[{"else", ":", " ", 
               RowBox[{
                RowBox[{"it", "'"}], "s", " ", "not", " ", "the", " ", 
                "first", " ", "of", " ", "a", " ", "streak"}]}], " ", "*)"}], 
             "\[IndentingNewLine]", "\t\t\t", 
             RowBox[{
              RowBox[{"streakLength", "++"}], ";"}]}], "\[IndentingNewLine]", 
            "\t\t", "]"}], ",", "\[IndentingNewLine]", "\t", 
           RowBox[{"(*", " ", 
            RowBox[{"else", ":", " ", 
             RowBox[{"found", " ", "a", " ", "nonmagic", " ", "elem"}]}], " ",
             "*)"}], "\[IndentingNewLine]", "\t\t", 
           RowBox[{
            RowBox[{"If", "[", 
             RowBox[{
              RowBox[{"streakLength", ">", "0"}], ",", "\[IndentingNewLine]", 
              "\t\t", 
              RowBox[{"(*", " ", 
               RowBox[{"then", ":", " ", 
                RowBox[{
                 RowBox[{"it", "'"}], "s", " ", "the", " ", "first", " ", 
                 "nonmagic", " ", "after", " ", "a", " ", "streak"}]}], " ", 
               "*)"}], "\[IndentingNewLine]", "\t\t\t", 
              RowBox[{
               RowBox[{"totalSize", "=", 
                RowBox[{
                 RowBox[{"streakLength", "*", "magicSize"}], "+", 
                 "currSize"}]}], ";", "\[IndentingNewLine]", "\t\t\t", 
               RowBox[{"superPacket", "=", 
                RowBox[{"Normal", "@", 
                 RowBox[{"ReplacePart", "[", 
                  RowBox[{"streakFirstEvent", ",", 
                   RowBox[{"\"\<size\>\"", "\[Rule]", "totalSize"}]}], 
                  "]"}]}]}], ";", "\[IndentingNewLine]", "\t\t\t", 
               RowBox[{"AppendTo", "[", 
                RowBox[{"result", ",", "superPacket"}], "]"}], ";", 
               "\[IndentingNewLine]", "\t\t\t", 
               RowBox[{"streakLength", "=", "0"}]}], ",", 
              "\[IndentingNewLine]", "\t\t", 
              RowBox[{"(*", " ", 
               RowBox[{"else", ":", " ", 
                RowBox[{
                 RowBox[{"it", "'"}], "s", " ", "just", " ", "a", " ", 
                 "normal", " ", "nonmagic"}]}], " ", "*)"}], 
              "\[IndentingNewLine]", "\t\t\t", 
              RowBox[{
               RowBox[{"AppendTo", "[", 
                RowBox[{"result", ",", 
                 RowBox[{"Normal", "@", 
                  RowBox[{"ia", "[", 
                   RowBox[{"[", "currPos", "]"}], "]"}]}]}], "]"}], ";"}]}], 
             "\[IndentingNewLine]", "\t\t", "]"}], ";"}]}], 
          "\[IndentingNewLine]", "\t", "]"}], ";", "\[IndentingNewLine]", 
         "\t", 
         RowBox[{"currPos", "++"}], ";"}]}], "\[IndentingNewLine]", "]"}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"Dataset", "[", "result", "]"}]}]}], "\[IndentingNewLine]", 
    "]"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"default", " ", "magic", " ", "size"}], " ", 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MergeStreaksIA", "[", "ia_", "]"}], ":=", 
  RowBox[{"MergeStreaksIA", "[", 
   RowBox[{"ia", ",", "1448"}], "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.717888584336988*^9, 3.71788861780398*^9}, {
   3.717888655747998*^9, 3.7178888940061903`*^9}, {3.71788904099932*^9, 
   3.7178890903466463`*^9}, {3.717889162970604*^9, 3.717889406785891*^9}, {
   3.717889437722381*^9, 3.717889466759692*^9}, {3.7178895025691338`*^9, 
   3.717889540060128*^9}, {3.717889577073009*^9, 3.717889684622757*^9}, {
   3.7178899846078663`*^9, 3.717890224893137*^9}, {3.717890275970207*^9, 
   3.717890328568178*^9}, {3.7178903710859118`*^9, 3.7178904012036543`*^9}, {
   3.71789047607957*^9, 3.717890526605628*^9}, {3.717890572156727*^9, 
   3.717890574244463*^9}, {3.7178906757772093`*^9, 3.717890728846272*^9}, 
   3.717891344612246*^9, {3.717935179697698*^9, 3.7179352379432487`*^9}, {
   3.7179353401135397`*^9, 3.717935375397399*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Filter markers from an interaction", "Section",
 CellChangeTimes->{{3.712176973404394*^9, 3.712176987869893*^9}, {
  3.712195412569436*^9, 3.7121954225090837`*^9}}],

Cell["Test whether a row of an interaction is a marker.", "Text",
 CellChangeTimes->{{3.712195291107086*^9, 3.712195300371552*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"MarkerQ", "[", "iaRow_", "]"}], ":=", 
  RowBox[{
   RowBox[{"iaRow", "[", 
    RowBox[{"[", "\"\<sport\>\"", "]"}], "]"}], "\[Equal]", 
   RowBox[{"iaRow", "[", 
    RowBox[{"[", "\"\<dport\>\"", "]"}], "]"}], "\[Equal]", 
   "55555"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"NonMarkerQ", "[", "iaRow_", "]"}], ":=", 
  RowBox[{"\[Not]", 
   RowBox[{"MarkerQ", "[", "iaRow", "]"}]}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.712177078406942*^9, 3.712177127348864*^9}, {
  3.712177167324123*^9, 3.7121771988357983`*^9}}],

Cell["Select the rows that are markers.", "Text",
 CellChangeTimes->{{3.7121954379158916`*^9, 3.712195444385585*^9}, {
  3.71219548700696*^9, 3.712195529887094*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"MarkersIA", "[", "ia_", "]"}], ":=", 
  RowBox[{"ia", "[", 
   RowBox[{"Select", "[", "MarkerQ", "]"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.712195446585477*^9, 3.712195504421151*^9}}],

Cell["Select the rows that aren\[CloseCurlyQuote]t markers.", "Text",
 CellChangeTimes->{{3.712195316420385*^9, 3.712195326526258*^9}, {
  3.712195514313734*^9, 3.7121955374849367`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"RemoveMarkersIA", "[", "ia_", "]"}], ":=", 
  RowBox[{"ia", "[", 
   RowBox[{"Select", "[", "NonMarkerQ", "]"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.712177000486351*^9, 3.7121770506123953`*^9}, {
   3.712177131575513*^9, 3.712177150402541*^9}, {3.71217719413787*^9, 
   3.7121771945203114`*^9}, 3.712195503469788*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Separate an interaction by {src,",
 StyleBox["dst",
  IgnoreSpellCheck->True],
 "} IP address pair"
}], "Section",
 InitializationCell->True,
 CellChangeTimes->{{3.71184856682905*^9, 3.711848588322287*^9}, {
  3.711850284473768*^9, 3.711850304592066*^9}, {3.712358662347993*^9, 
  3.7123586657519073`*^9}, {3.712370807811359*^9, 3.712370812576242*^9}}],

Cell["\<\
Calculate the list of unique {src,dst} pairs in an interaction.\
\>", "Text",
 CellChangeTimes->{{3.7123586439214783`*^9, 3.712358659538378*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"SrcDstPairsInIA", "[", "ia_", "]"}], ":=", 
  RowBox[{"DeleteDuplicates", "[", 
   RowBox[{"ia", "[", 
    RowBox[{"All", ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"#src", ",", "#dst"}], "}"}], "&"}]}], "]"}], "]"}]}]], "Input",\

 InitializationCell->True,
 CellChangeTimes->{{3.711834068623781*^9, 3.711834117552608*^9}, {
   3.711834579298366*^9, 3.71183458493522*^9}, {3.711835267086382*^9, 
   3.7118352694764*^9}, 3.711835334240353*^9}],

Cell["\<\
Given an interaction, return a list of interactions, each of which only \
contains events with a particular value of {src,dst}.\
\>", "Text",
 CellChangeTimes->{{3.71235867065024*^9, 3.712358724197915*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"SeparateBySrcDst", "[", "ia_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "srcdstpairs", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"srcdstpairs", "=", 
      RowBox[{"SrcDstPairsInIA", "[", "ia", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Table", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"ia", "[", 
        RowBox[{"Select", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Normal", "@", 
            RowBox[{"{", 
             RowBox[{"#src", ",", "#dst"}], "}"}]}], "\[Equal]", 
           RowBox[{"Normal", "@", 
            RowBox[{"srcdstpairs", "[", 
             RowBox[{"[", "i", "]"}], "]"}]}]}], "&"}], "]"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", 
         RowBox[{"Length", "@", "srcdstpairs"}]}], "}"}]}], 
      "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.712370772206573*^9, 3.7123707882414007`*^9}}],

Cell[TextData[{
 StyleBox["PEND:",
  FontWeight->"Bold"],
 " need to improve this to consider port numbers as well.\nNot fully trivial \
because source ports are arbitrary and they keep changing.\nProbably best to \
specify which ports are well-known for the experiment, and treat all other \
ports as the same thing."
}], "Text",
 CellChangeTimes->{{3.712175151276351*^9, 3.712175177379889*^9}, {
   3.7121955471720457`*^9, 3.7121955542071943`*^9}, 3.712372595286318*^9}],

Cell[CellGroupData[{

Cell["Visualizations colored by {src,dst}", "Subsection",
 CellChangeTimes->{{3.712359045143661*^9, 3.712359046944215*^9}, {
  3.712370831255817*^9, 3.712370862107711*^9}}],

Cell["\<\
Given an interaction, return N lists of times, where N is the number of \
distinct {src,dst} pairs in the interaction.
In each list, the times that do not correspond to that {src,dst} are replaced \
by None. \
\>", "Text",
 CellChangeTimes->{{3.712358770156509*^9, 3.7123587846107473`*^9}, {
  3.7123590362981157`*^9, 3.7123590709000387`*^9}, {3.712370877754388*^9, 
  3.712371077849476*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"TimesSrcDstIA", "[", "ia_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"srcdstpairs", ",", "timesrcdst"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"srcdstpairs", "=", 
      RowBox[{"Normal", "[", 
       RowBox[{"SrcDstPairsInIA", "[", "ia", "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"timesrcdst", "=", 
      RowBox[{"Normal", "[", "\[IndentingNewLine]", 
       RowBox[{"Map", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"#time", ",", 
            RowBox[{"{", 
             RowBox[{"#src", ",", "#dst"}], "}"}]}], "}"}], "&"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"ia", "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", 
            RowBox[{"{", 
             RowBox[{"\"\<time\>\"", ",", "\"\<src\>\"", ",", "\"\<dst\>\""}],
              "}"}]}], "]"}], "]"}]}], "\[IndentingNewLine]", "]"}], 
       "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Table", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Table", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"timesrcdst", "[", 
              RowBox[{"[", "j", "]"}], "]"}], "[", 
             RowBox[{"[", "2", "]"}], "]"}], "\[Equal]", 
            RowBox[{"srcdstpairs", "[", 
             RowBox[{"[", "i", "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"timesrcdst", "[", 
             RowBox[{"[", "j", "]"}], "]"}], "[", 
            RowBox[{"[", "1", "]"}], "]"}], ",", "\[IndentingNewLine]", 
           "None"}], "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{"j", ",", "1", ",", 
           RowBox[{"Length", "@", "timesrcdst"}]}], "}"}]}], 
        "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", 
         RowBox[{"Length", "@", "srcdstpairs"}]}], "}"}]}], 
      "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7123587867392683`*^9, 3.712358797132752*^9}, {
  3.712359076495542*^9, 3.712359089539693*^9}, {3.71237029215903*^9, 
  3.712370292420348*^9}, {3.712370335934985*^9, 3.71237035581455*^9}, {
  3.712370417956909*^9, 3.712370549220955*^9}, {3.712370763581213*^9, 
  3.712370764122526*^9}, {3.712370870974737*^9, 3.712370890377118*^9}}],

Cell["Analogous to the above, but size-only instead of time-only.", "Text",
 CellChangeTimes->{{3.71237144906094*^9, 3.7123714563959637`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"SizesSrcDstIA", "[", "ia_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"srcdstpairs", ",", "sizesrcdst"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"srcdstpairs", "=", 
      RowBox[{"Normal", "[", 
       RowBox[{"SrcDstPairsInIA", "[", "ia", "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"sizesrcdst", "=", 
      RowBox[{"Normal", "[", "\[IndentingNewLine]", 
       RowBox[{"Map", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{"#size", ",", 
            RowBox[{"{", 
             RowBox[{"#src", ",", "#dst"}], "}"}]}], "}"}], "&"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"ia", "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", 
            RowBox[{"{", 
             RowBox[{"\"\<size\>\"", ",", "\"\<src\>\"", ",", "\"\<dst\>\""}],
              "}"}]}], "]"}], "]"}]}], "\[IndentingNewLine]", "]"}], 
       "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Table", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Table", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"sizesrcdst", "[", 
              RowBox[{"[", "j", "]"}], "]"}], "[", 
             RowBox[{"[", "2", "]"}], "]"}], "\[Equal]", 
            RowBox[{"srcdstpairs", "[", 
             RowBox[{"[", "i", "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"sizesrcdst", "[", 
             RowBox[{"[", "j", "]"}], "]"}], "[", 
            RowBox[{"[", "1", "]"}], "]"}], ",", "\[IndentingNewLine]", 
           "None"}], "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{"j", ",", "1", ",", 
           RowBox[{"Length", "@", "sizesrcdst"}]}], "}"}]}], 
        "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", 
         RowBox[{"Length", "@", "srcdstpairs"}]}], "}"}]}], 
      "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.712371165944394*^9, 3.712371195800008*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ShowTimesSrcDstIA", "[", "ia_", "]"}], ":=", 
  RowBox[{"ShowTimesSrcDstIA", "[", 
   RowBox[{"ia", ",", 
    RowBox[{"{", "}"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"ShowTimesSrcDstIA", "[", 
    RowBox[{"ia_", ",", "args__"}], "]"}], ":=", 
   RowBox[{"ListPlot", "[", 
    RowBox[{
     RowBox[{"TimesSrcDstIA", "[", "ia", "]"}], ",", "args"}], "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ShowSizesSrcDstIA", "[", "ia_", "]"}], ":=", 
  RowBox[{"ShowSizesSrcDstIA", "[", 
   RowBox[{"ia", ",", 
    RowBox[{"{", "}"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ShowSizesSrcDstIA", "[", 
   RowBox[{"ia_", ",", "args__"}], "]"}], ":=", 
  RowBox[{"ListPlot", "[", 
   RowBox[{
    RowBox[{"SizesSrcDstIA", "[", "ia", "]"}], ",", "args"}], 
   "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7123710822954617`*^9, 3.712371121326817*^9}, {
  3.712371204661936*^9, 3.712371215136503*^9}, {3.712371427299181*^9, 
  3.712371431953257*^9}, {3.7123715384685926`*^9, 3.7123716035990143`*^9}, {
  3.712371644969886*^9, 3.712371660127358*^9}, {3.7123718518744097`*^9, 
  3.712371857873385*^9}, {3.712373355746154*^9, 3.712373358046207*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Show an interaction", "Section",
 CellChangeTimes->{{3.711980848668507*^9, 3.711980850598442*^9}}],

Cell[TextData[{
 "Visualize a single interaction. Triple view: event series, size-only, \
time-only.\n\n",
 StyleBox["NEW: ",
  FontWeight->"Bold"],
 "We now show different colors for each {src,dst} pair."
}], "Text",
 CellChangeTimes->{{3.7121955617990837`*^9, 3.712195641569729*^9}, {
  3.712372365948236*^9, 3.7123723992387323`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ShowIA", "[", "ia_", "]"}], ":=", 
  RowBox[{"ShowIA", "[", 
   RowBox[{"ia", ",", 
    RowBox[{"{", "}"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ShowIA", "[", 
   RowBox[{"ia_", ",", "args__"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"es", "=", 
      RowBox[{"IA2ES", "@", "ia"}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"TabView", "[", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"\"\<Size over time\>\"", "\[Rule]", 
        RowBox[{"ListPlot", "[", 
         RowBox[{
          RowBox[{"IA2ES", "/@", 
           RowBox[{"SeparateBySrcDst", "[", "ia", "]"}]}], ",", 
          "\[IndentingNewLine]", "args", ",", "\[IndentingNewLine]", 
          RowBox[{"AxesLabel", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"\"\<Time\>\"", ",", "\"\<Packet size\>\""}], "}"}]}], 
          ",", 
          RowBox[{"Filling", "->", "Axis"}], ",", 
          RowBox[{"ImageSize", "\[Rule]", "Full"}], ",", 
          RowBox[{"LabelStyle", "\[Rule]", "14"}]}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Size only\>\"", "\[Rule]", 
        RowBox[{"ShowSizesSrcDstIA", "[", 
         RowBox[{
         "ia", ",", "\[IndentingNewLine]", "args", ",", "\[IndentingNewLine]", 
          RowBox[{"AxesLabel", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"\"\<Packet index\>\"", ",", "\"\<Packet size\>\""}], 
            "}"}]}], ",", 
          RowBox[{"Filling", "\[Rule]", "Axis"}], ",", 
          RowBox[{"ImageSize", "\[Rule]", "Full"}], ",", 
          RowBox[{"LabelStyle", "\[Rule]", "14"}]}], "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<Time only\>\"", "\[Rule]", 
        RowBox[{"ShowTimesSrcDstIA", "[", 
         RowBox[{
         "ia", ",", "\[IndentingNewLine]", "args", ",", "\[IndentingNewLine]", 
          RowBox[{"AxesLabel", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"\"\<Packet index\>\"", ",", "\"\<Packet time\>\""}], 
            "}"}]}], ",", 
          RowBox[{"ImageSize", "\[Rule]", "Full"}], ",", 
          RowBox[{"LabelStyle", "\[Rule]", "14"}]}], "]"}]}]}], 
      "\[IndentingNewLine]", "}"}], "]"}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7120844149791613`*^9, 3.71208451559347*^9}, {
   3.7120845758837347`*^9, 3.712084626940034*^9}, {3.712084666464333*^9, 
   3.712084666945732*^9}, {3.712084703704069*^9, 3.7120847085797453`*^9}, {
   3.712084801384245*^9, 3.7120848570456953`*^9}, {3.71208621045242*^9, 
   3.712086260916852*^9}, {3.712086333598769*^9, 3.7120863724056463`*^9}, {
   3.712086429924633*^9, 3.7120864559040813`*^9}, {3.712086573927266*^9, 
   3.712086725504046*^9}, {3.7120867602986593`*^9, 3.7120867770088654`*^9}, {
   3.71209013942155*^9, 3.7120901444412003`*^9}, {3.71219918137691*^9, 
   3.7121991950223703`*^9}, {3.712199241076564*^9, 3.712199242480421*^9}, 
   3.712199275625022*^9, {3.7123716649029016`*^9, 3.712371801313129*^9}, {
   3.712371882996496*^9, 3.71237189255145*^9}, {3.712371994561154*^9, 
   3.712372036305987*^9}, {3.712372079840028*^9, 3.712372123248171*^9}, {
   3.712373363786385*^9, 3.7123733790404663`*^9}, 3.712373618025732*^9, {
   3.712373736448555*^9, 3.712373753760255*^9}, {3.712373821475955*^9, 
   3.7123738216202173`*^9}, {3.719065754076694*^9, 3.7190657680666113`*^9}, {
   3.726716847307356*^9, 3.726716894678192*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Show many interactions", "Section",
 CellChangeTimes->{{3.71208978693006*^9, 3.712089791467641*^9}, {
  3.7121956935786457`*^9, 3.712195695233226*^9}}],

Cell["Visualize a list of interactions, superimposed together.", "Text",
 CellChangeTimes->{{3.7121956520913982`*^9, 3.712195664413714*^9}, {
  3.712195703901615*^9, 3.7121957074702253`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ShowIAs", "[", "ias_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"ess", "=", 
      RowBox[{"IA2ES", "/@", "ias"}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"TabView", "[", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"\"\<Size over time\>\"", "\[Rule]", 
        RowBox[{"ListPlot", "[", 
         RowBox[{"ess", ",", 
          RowBox[{"ImageSize", "\[Rule]", "Full"}], ",", 
          RowBox[{"AxesLabel", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"\"\<Time\>\"", ",", "\"\<Packet size\>\""}], "}"}]}]}], 
         "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<Size only\>\"", "\[Rule]", 
        RowBox[{"ListPlot", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"#", "[", "\"\<Values\>\"", "]"}], "&"}], "/@", "ess"}], 
          ",", 
          RowBox[{"ImageSize", "\[Rule]", "Full"}], ",", 
          RowBox[{"AxesLabel", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"\"\<Packet index\>\"", ",", "\"\<Packet size\>\""}], 
            "}"}]}]}], "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"\"\<Time only\>\"", "\[Rule]", 
        RowBox[{"ListPlot", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"#", "[", "\"\<Times\>\"", "]"}], "&"}], "/@", "ess"}], 
          ",", 
          RowBox[{"ImageSize", "\[Rule]", "Full"}], ",", 
          RowBox[{"AxesLabel", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"\"\<Packet index\>\"", ",", "\"\<Packet time\>\""}], 
            "}"}]}]}], "]"}]}]}], "\[IndentingNewLine]", "}"}], "]"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.712089803131646*^9, 3.712089836904229*^9}, {
  3.712089958955048*^9, 3.712090026765905*^9}, {3.712090132317346*^9, 
  3.712090136733383*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Aggregate functions over lists of interactions", "Section",
 InitializationCell->True,
 CellChangeTimes->{{3.711848484176508*^9, 3.7118484949936543`*^9}, {
  3.7118485911804*^9, 3.7118486034946527`*^9}, {3.711850364331164*^9, 
  3.711850380364977*^9}, {3.712195717567472*^9, 3.712195719117697*^9}}],

Cell["Maximum and minimum size and time over many interactions.", "Text",
 CellChangeTimes->{{3.712195726630375*^9, 3.7121957372689667`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"MinTimeInIAs", "[", "ias_", "]"}], ":=", 
   RowBox[{"Min", "[", 
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"#", "[", 
        RowBox[{"Min", ",", "\"\<time\>\""}], "]"}], "&"}], ",", "ias"}], 
     "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"MaxTimeInIAs", "[", "ias_", "]"}], ":=", 
    RowBox[{"Max", "[", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"#", "[", 
         RowBox[{"Max", ",", "\"\<time\>\""}], "]"}], "&"}], ",", "ias"}], 
      "]"}], "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"MinSizeInIAs", "[", "ias_", "]"}], ":=", 
   RowBox[{"Min", "[", 
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"#", "[", 
        RowBox[{"Min", ",", "\"\<size\>\""}], "]"}], "&"}], ",", "ias"}], 
     "]"}], "]"}]}], ";", 
  RowBox[{
   RowBox[{"MaxSizeInIAs", "[", "ias_", "]"}], ":=", 
   RowBox[{"Max", "[", 
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"#", "[", 
        RowBox[{"Max", ",", "\"\<size\>\""}], "]"}], "&"}], ",", "ias"}], 
     "]"}], "]"}]}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.711836730464699*^9, 3.7118367874150476`*^9}, {
  3.711836832932622*^9, 3.711836870980588*^9}, {3.711849329324112*^9, 
  3.711849338603737*^9}, {3.7121957462581253`*^9, 3.712195772372671*^9}, {
  3.712672483385116*^9, 3.7126725161363087`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Extract a ",
 StyleBox["sub",
  IgnoreSpellCheck->True],
 "-",
 StyleBox["interaction",
  IgnoreSpellCheck->True],
 " (time window)"
}], "Section",
 CellChangeTimes->{{3.71237385971087*^9, 3.712373912469242*^9}}],

Cell["Extract the sub-interaction within a time window.", "Text",
 CellChangeTimes->{{3.712254064756529*^9, 3.712254083118614*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"TimeWindowIA", "[", 
   RowBox[{"ia_", ",", "range_"}], "]"}], ":=", 
  RowBox[{"ia", "[", 
   RowBox[{"Select", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"First", "[", "range", "]"}], "\[LessEqual]", "#time", 
      "\[LessEqual]", 
      RowBox[{"Last", "[", "range", "]"}]}], "&"}], "]"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"TimeWindowIAs", "[", 
   RowBox[{"ias_", ",", " ", "range_"}], "]"}], ":=", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"TimeWindowIA", "[", 
      RowBox[{"#", ",", "range"}], "]"}], "&"}], ",", "ias"}], 
   "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.712253797443034*^9, 3.712253911220478*^9}, {
  3.712253948484867*^9, 3.712253955600765*^9}, {3.71225398636897*^9, 
  3.7122540353477783`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Browse list of interactions", "Section",
 InitializationCell->True,
 CellChangeTimes->{{3.7118501132177343`*^9, 3.711850118526517*^9}, {
   3.71185032542511*^9, 3.711850336919118*^9}, 3.711850375035491*^9}],

Cell[TextData[{
 "Browse through multiple interactions using a slider. Slow with too many ",
 StyleBox["ias",
  IgnoreSpellCheck->True],
 ". Try a smaller RandomSample of your interactions first.\n\n",
 StyleBox["PEND:",
  FontWeight->"Bold"],
 " Rethink the scaling issue. Max? Auto?"
}], "Text",
 CellChangeTimes->{{3.712195789611636*^9, 3.712195896134028*^9}, {
  3.7124170261125307`*^9, 3.712417095559495*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"BrowseSizeIAs", "[", "ias_", "]"}], ":=", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Column", "[", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"ShowSizesSrcDstIA", "[", 
          RowBox[{
           RowBox[{"ias", "[", 
            RowBox[{"[", "j", "]"}], "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{"ImageSize", "\[Rule]", "Large"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"Filling", "\[Rule]", "Bottom"}]}], "\[IndentingNewLine]", 
          "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"\"\<Interaction \>\"", "<>", 
          RowBox[{"ToString", "@", "j"}], "<>", "\"\< of \>\"", "<>", 
          RowBox[{"ToString", "@", 
           RowBox[{"Length", "@", "ias"}]}]}]}], "\[IndentingNewLine]", "}"}],
        "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"j", ",", "1", ",", 
        RowBox[{"Length", "[", "ias", "]"}], ",", "1"}], "}"}]}], 
     "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",\

 InitializationCell->True,
 CellChangeTimes->{{3.711892029116363*^9, 3.711892115564352*^9}, {
   3.7118921592314568`*^9, 3.711892238862234*^9}, {3.711977794066781*^9, 
   3.711977826179337*^9}, {3.7119782783930817`*^9, 3.711978287793234*^9}, {
   3.711978346521222*^9, 3.711978354196509*^9}, {3.7119796258220987`*^9, 
   3.711979647139599*^9}, 3.712370794581689*^9, {3.712375105169944*^9, 
   3.712375170889451*^9}, {3.712375236805543*^9, 3.71237526292463*^9}, {
   3.7123752984848413`*^9, 3.71237530591179*^9}, {3.712375384573851*^9, 
   3.712375437791436*^9}, {3.712375654778659*^9, 3.712375655693214*^9}, {
   3.712379015379867*^9, 3.712379021290929*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"BrowseTimeIAs", "[", "ias_", "]"}], ":=", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Column", "[", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"ShowTimesSrcDstIA", "[", 
          RowBox[{
           RowBox[{"ias", "[", 
            RowBox[{"[", "j", "]"}], "]"}], ",", "\[IndentingNewLine]", 
           RowBox[{"(*", 
            RowBox[{
             RowBox[{"PlotRange", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{"0", ",", "maxt"}], "}"}]}], ","}], "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{"ImageSize", "\[Rule]", "Large"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"Filling", "\[Rule]", "Bottom"}]}], "\[IndentingNewLine]", 
          "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"\"\<Interaction \>\"", "<>", 
          RowBox[{"ToString", "@", "j"}], "<>", "\"\< of \>\"", "<>", 
          RowBox[{"ToString", "@", 
           RowBox[{"Length", "@", "ias"}]}]}]}], "\[IndentingNewLine]", "}"}],
        "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"j", ",", "1", ",", 
        RowBox[{"Length", "[", "ias", "]"}], ",", "1"}], "}"}]}], 
     "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",\

 InitializationCell->True,
 CellChangeTimes->{{3.711892029116363*^9, 3.711892115564352*^9}, {
   3.7118921592314568`*^9, 3.711892238862234*^9}, {3.711977794066781*^9, 
   3.711977826179337*^9}, {3.7119782783930817`*^9, 3.711978287793234*^9}, {
   3.711978346521222*^9, 3.711978354196509*^9}, {3.7119796258220987`*^9, 
   3.711979647139599*^9}, 3.712370794581689*^9, {3.712375105169944*^9, 
   3.712375170889451*^9}, {3.712375236805543*^9, 3.71237526292463*^9}, {
   3.7123752984848413`*^9, 3.71237530591179*^9}, {3.712375384573851*^9, 
   3.7123754111237698`*^9}, {3.712376036646058*^9, 3.712376039232935*^9}, {
   3.71237895283325*^9, 3.7123789619533987`*^9}}],

Cell["This is a slightly older version.", "Text",
 CellChangeTimes->{{3.71241695539806*^9, 3.712416958836467*^9}, {
  3.712417006993094*^9, 3.712417010023213*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"BrowseIAs", "[", "interactions_", "]"}], ":=", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"maxtime", "=", 
       RowBox[{"MaxTimeInIAs", "[", "interactions", "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"maxsize", "=", 
       RowBox[{"MaxSizeInIAs", "[", "interactions", "]"}]}]}], 
     "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Column", "[", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"ListPlot", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Map", "[", 
            RowBox[{"IA2ES", ",", 
             RowBox[{"SeparateBySrcDst", "[", " ", 
              RowBox[{"interactions", "[", 
               RowBox[{"[", "j", "]"}], "]"}], " ", "]"}]}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"PlotRange", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"0", ",", "maxtime"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{"0", ",", "maxsize"}], "}"}]}], "}"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"ImageSize", "\[Rule]", "Large"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"Filling", "\[Rule]", "Bottom"}]}], "\[IndentingNewLine]", 
          "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"\"\<Interaction \>\"", "<>", 
          RowBox[{"ToString", "@", "j"}], "<>", "\"\< of \>\"", "<>", 
          RowBox[{"ToString", "@", 
           RowBox[{"Length", "@", "ias"}]}]}]}], "\[IndentingNewLine]", "}"}],
        "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"j", ",", "1", ",", 
        RowBox[{"Length", "[", "ias", "]"}], ",", "1"}], "}"}]}], 
     "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",\

 InitializationCell->True,
 CellChangeTimes->{{3.711892029116363*^9, 3.711892115564352*^9}, {
   3.7118921592314568`*^9, 3.711892238862234*^9}, {3.711977794066781*^9, 
   3.711977826179337*^9}, {3.7119782783930817`*^9, 3.711978287793234*^9}, {
   3.711978346521222*^9, 3.711978354196509*^9}, {3.7119796258220987`*^9, 
   3.711979647139599*^9}, 3.712370794581689*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Manually align interactions by interactive shifting", "Section",
 InitializationCell->True,
 CellChangeTimes->{{3.711892339235982*^9, 3.7118923998436193`*^9}, {
  3.71189286418626*^9, 3.711892900360207*^9}}],

Cell["\<\
Given two interactions and a {lo,hi} range, match them by shifting one of \
them by moving a slider.

PEND: The default range should be {-1,1}.\
\>", "Text",
 CellChangeTimes->{{3.712195905505027*^9, 3.7121960084823933`*^9}, 
   3.712196058282217*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ManuallyAlignIAs", "[", 
   RowBox[{"ia1_", ",", "ia2_", ",", "range_"}], "]"}], ":=", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Column", "[", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"ListPlot", "[", " ", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"TimeSeriesShift", "[", 
              RowBox[{
               RowBox[{"IA2ES", "@", "ia1"}], ",", "delta"}], "]"}], ",", 
             RowBox[{"IA2ES", "@", "ia2"}]}], "}"}], " ", ",", 
           "\[IndentingNewLine]", 
           RowBox[{"ImageSize", "\[Rule]", "Large"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"Filling", "\[Rule]", "Bottom"}]}], "\[IndentingNewLine]", 
          "]"}], ",", "\[IndentingNewLine]", "delta"}], "\[IndentingNewLine]",
         "}"}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"delta", ",", 
        RowBox[{"First", "@", "range"}], ",", 
        RowBox[{"Last", "@", "range"}]}], "}"}]}], "\[IndentingNewLine]", 
     "]"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7118923521786203`*^9, 3.711892360495517*^9}, {
  3.711892392499955*^9, 3.711892559501487*^9}, {3.711892593688115*^9, 
  3.711892722238586*^9}, {3.71189275822444*^9, 3.711892823917659*^9}, {
  3.711892905220523*^9, 3.711892905467067*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ManuallyAlignIAsWithMinimizeButton", "[", 
   RowBox[{"ia1_", ",", "ia2_", ",", "range_"}], "]"}], ":=", 
  RowBox[{"Module", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Column", "[", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"ListPlot", "[", " ", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"TimeSeriesShift", "[", 
              RowBox[{
               RowBox[{"IA2ES", "@", "ia1"}], ",", "delta"}], "]"}], ",", 
             RowBox[{"IA2ES", "@", "ia2"}]}], "}"}], " ", ",", 
           "\[IndentingNewLine]", 
           RowBox[{"ImageSize", "\[Rule]", "Large"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"Filling", "\[Rule]", "Bottom"}]}], "\[IndentingNewLine]", 
          "]"}], ",", "\[IndentingNewLine]", "delta"}], "\[IndentingNewLine]",
         "}"}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"delta", ",", 
        RowBox[{"First", "@", "range"}], ",", 
        RowBox[{"Last", "@", "range"}]}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{"Button", "[", 
       RowBox[{"\"\<Foo!\>\"", ",", 
        RowBox[{"delta", "=", 
         RowBox[{"Last", "@", 
          RowBox[{"First", "@", 
           RowBox[{"Last", "[", 
            RowBox[{"MinimizeWarpingDistanceIAs", "[", 
             RowBox[{"ia1", ",", "ia2"}], "]"}], "]"}]}]}]}]}], "]"}]}], 
     "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",\

 InitializationCell->True,
 CellChangeTimes->{{3.7118923521786203`*^9, 3.711892360495517*^9}, {
  3.711892392499955*^9, 3.711892559501487*^9}, {3.711892593688115*^9, 
  3.711892722238586*^9}, {3.71189275822444*^9, 3.711892823917659*^9}, {
  3.711892905220523*^9, 3.711892905467067*^9}, {3.713037934474184*^9, 
  3.7130380625351877`*^9}, {3.713039053415553*^9, 3.713039136152384*^9}, {
  3.713039214641363*^9, 3.713039218871336*^9}, {3.713039263879362*^9, 
  3.713039303085599*^9}, {3.713039347468781*^9, 3.713039370041679*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Align interactions by an offset that minimizes time-warping distance\
\>", "Section",
 CellChangeTimes->{{3.7121034228366528`*^9, 3.712103449828691*^9}, {
  3.712103568980695*^9, 3.712103576513438*^9}, {3.712104903258391*^9, 
  3.7121049222685223`*^9}}],

Cell["\<\
This shows where the minimum is.

PEND: It would be nice to compute this. Minimize and NMinimize can do it, but \
both raise warnings.
 
PEND: The choice of 100 is arbitrary; use something more robust.\
\>", "Text",
 CellChangeTimes->{{3.712196014230751*^9, 3.712196107023007*^9}}],

Cell["\<\
PEND: Could reuse aux func below instead of building an EventSeries.\
\>", "Text",
 CellChangeTimes->{{3.7126657012042503`*^9, 3.7126657279954853`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ShowWarpingDistanceIAs", "[", 
   RowBox[{"ia1_", ",", "ia2_", ",", "range_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"es1", "=", 
       RowBox[{"IA2ES", "@", "ia1"}]}], ",", 
      RowBox[{"es2", "=", 
       RowBox[{"IA2ES", "@", "ia2"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"DiscretePlot", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"WarpingDistance", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Normal", "@", 
         RowBox[{"TimeSeriesShift", "[", 
          RowBox[{"es1", ",", "\[Delta]"}], "]"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Normal", "@", "es2"}]}], "\[IndentingNewLine]", "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"\[Delta]", ",", 
        RowBox[{"First", "@", "range"}], ",", 
        RowBox[{"Last", "@", "range"}], ",", 
        FractionBox[
         RowBox[{
          RowBox[{"Last", "@", "range"}], "-", 
          RowBox[{"First", "@", "range"}]}], "100"]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "\[IndentingNewLine]", 
     "]"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7121035305217752`*^9, 3.712103552323502*^9}, {
   3.712103590552064*^9, 3.712103733541147*^9}, {3.712103887300449*^9, 
   3.712103903015627*^9}, {3.7121049439311323`*^9, 3.712104961117587*^9}, {
   3.7121050017760477`*^9, 3.7121050196627493`*^9}, {3.712105052358728*^9, 
   3.712105065408687*^9}, 3.712105254734342*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"WarpingDistanceTimeIAs", "[", 
   RowBox[{"ia1_", ",", "ia2_"}], "]"}], ":=", 
  RowBox[{"WarpingDistance", "[", 
   RowBox[{
    RowBox[{"TimesIA", "[", "ia1", "]"}], ",", 
    RowBox[{"TimesIA", "[", "ia2", "]"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.712665588033484*^9, 3.7126656845505857`*^9}, {
  3.712665782594174*^9, 3.712665785411705*^9}}],

Cell["\<\
NEW: Minimization without warnings!
Chop will replace near-zero with zero if smaller than 10^-10.\
\>", "Text",
 CellChangeTimes->{{3.713038460916992*^9, 3.71303846698627*^9}, {
  3.7130386902598467`*^9, 3.713038704102556*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"MinimizeWarpingDistanceIAs", "[", 
   RowBox[{"ia1_", ",", "ia2_"}], "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"Chop", "@", 
   RowBox[{"NMinimize", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Hold", "[", "\[IndentingNewLine]", 
      RowBox[{"WarpingDistance", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"TimesIA", "[", " ", "ia1", " ", "]"}], "+", "\[Delta]"}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"TimesIA", "[", " ", "ia2", " ", "]"}]}], 
       "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", "]"}], ",", 
     "\[IndentingNewLine]", "\[Delta]"}], "\[IndentingNewLine]", 
    "]"}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.713038477289132*^9, 3.713038502248705*^9}, {
  3.7130385581274757`*^9, 3.713038611373114*^9}, {3.7130387066141567`*^9, 
  3.713038732162757*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Align interactions based on the first packet before/after a certain point\
\>", "Section",
 CellChangeTimes->{{3.7121701203904257`*^9, 3.712170176003745*^9}, {
  3.71219623746576*^9, 3.712196251904904*^9}, {3.712266704347104*^9, 
  3.712266707087121*^9}}],

Cell["\<\
This is useful to horizontally align a part of the interaction, whenever we \
are willing to assume that it can safely be aligned. 

Of course, this distorts the data. Only use this when you are fairly certain \
that the distortion is innocuous.\
\>", "Text",
 CellChangeTimes->{{3.7121961237079477`*^9, 3.712196145987842*^9}, {
  3.7121962035739317`*^9, 3.71219622378493*^9}, {3.712275630908094*^9, 
  3.7122758329582253`*^9}}],

Cell[CellGroupData[{

Cell["\<\
Left-alignment: move events that take place after a given point.\
\>", "Subsection",
 CellChangeTimes->{{3.712266975610568*^9, 3.71226699195051*^9}, {
  3.712267895871276*^9, 3.7122679539243603`*^9}}],

Cell[TextData[{
 "Given an interaction, an alignment point in time A and a target point in \
time T, return a new interaction where all events that occurred ",
 StyleBox["after",
  FontWeight->"Bold"],
 " A are shifted by a constant, such that ",
 StyleBox["the first post-A event",
  FontWeight->"Bold"],
 " now occurs at T (and the rest of the post-A events are shifted by the same \
amount)."
}], "Text",
 CellChangeTimes->{{3.712165567142757*^9, 3.7121656327943172`*^9}, {
   3.712165667193039*^9, 3.712165823562213*^9}, {3.712166103362166*^9, 
   3.7121662094416647`*^9}, {3.7121662816150293`*^9, 3.712166289610158*^9}, {
   3.712196152647441*^9, 3.712196192085924*^9}, {3.712196290342326*^9, 
   3.7121962971758833`*^9}, {3.712266722446206*^9, 3.7122668242445097`*^9}, {
   3.7122690099600058`*^9, 3.712269011395238*^9}, {3.7122690857162952`*^9, 
   3.7122690860862637`*^9}, 3.7122758467286777`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"AlignLeftFromAtIA", "[", 
   RowBox[{"ia_", ",", "from_", ",", "at_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"firstAfterFrom", ",", "timeFirstAfterFrom", ",", "shift"}], 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"firstAfterFrom", "=", 
      RowBox[{"ia", "[", 
       RowBox[{"SelectFirst", "[", 
        RowBox[{
         RowBox[{"#time", ">", "from"}], "&"}], "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"timeFirstAfterFrom", "=", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"MissingQ", "[", "firstAfterFrom", "]"}], ",", 
        "firstAfterFrom", ",", 
        RowBox[{"firstAfterFrom", "[", "\"\<time\>\"", "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"shift", "=", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"MissingQ", "[", "firstAfterFrom", "]"}], ",", "0.0", ",", 
        RowBox[{"(", 
         RowBox[{"at", "-", "timeFirstAfterFrom"}], ")"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"ia", "[", 
      RowBox[{"All", ",", 
       RowBox[{"{", 
        RowBox[{"\"\<time\>\"", "\[Rule]", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"#", "\[GreaterEqual]", "timeFirstAfterFrom"}], ",", 
             RowBox[{"#", "+", "shift"}], ",", "#"}], "]"}], "&"}], ")"}]}], 
        "}"}]}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.712165839278883*^9, 3.712165846640539*^9}, {
  3.712165968577615*^9, 3.712166008915638*^9}, {3.712166235591935*^9, 
  3.712166266080724*^9}, {3.712167381017167*^9, 3.7121674165632563`*^9}, {
  3.712168019928619*^9, 3.712168141498111*^9}, {3.712168193901745*^9, 
  3.7121682095303392`*^9}, {3.71216852528083*^9, 3.712168564431801*^9}, {
  3.712168601429996*^9, 3.712168652689701*^9}, {3.71216870483013*^9, 
  3.712168705399055*^9}, {3.712168757657404*^9, 3.712168872725761*^9}, {
  3.712168961598995*^9, 3.712168968736*^9}, {3.712169030041214*^9, 
  3.712169060669477*^9}, {3.712169096440826*^9, 3.712169142370626*^9}, {
  3.7121691759621267`*^9, 3.712169232056074*^9}, {3.712169314860525*^9, 
  3.7121693482558947`*^9}, {3.7121693936230297`*^9, 3.712169436627822*^9}, {
  3.712169786656702*^9, 3.7121699583223047`*^9}, {3.71226682768447*^9, 
  3.712266828051752*^9}}],

Cell["Generalization to list of interactions.", "Text",
 CellChangeTimes->{{3.7121962614289722`*^9, 3.7121962782473583`*^9}, {
  3.712275861176301*^9, 3.712275865603848*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"AlignLeftFromAtIAs", "[", 
   RowBox[{"ias_", ",", "from_", ",", "at_"}], "]"}], ":=", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"AlignLeftFromAtIA", "[", 
      RowBox[{"#", ",", "from", ",", "at"}], "]"}], "&"}], ",", "ias"}], 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7121708187922707`*^9, 3.712170848579403*^9}, {
  3.712266840358638*^9, 3.7122668407203608`*^9}, {3.71226802173386*^9, 
  3.712268022064842*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Right-alignment: move events that take place before a given point.\
\>", "Subsection",
 CellChangeTimes->{{3.712266983662097*^9, 3.71226698823477*^9}, {
  3.712267907080655*^9, 3.712267956640088*^9}}],

Cell[TextData[{
 "Alternatively, one can align right. In that case, all events that occurred ",
 StyleBox["before ",
  FontWeight->"Bold"],
 "A are shifted so that ",
 StyleBox["the first pre-A event",
  FontWeight->"Bold"],
 " now occurs at T (and the rest of the pre-A events are shifted by the same \
amount)."
}], "Text",
 CellChangeTimes->{{3.712266851311701*^9, 3.7122669185764923`*^9}, {
  3.712266997265366*^9, 3.712266998601687*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"AlignRightFromAtIA", "[", 
   RowBox[{"ia_", ",", "from_", ",", "at_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "rowsBeforeFrom", ",", "firstBeforeFrom", ",", "timeFirstBeforeFrom", 
      ",", "shift"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"rowsBeforeFrom", "=", 
      RowBox[{"ia", "[", 
       RowBox[{"Select", "[", 
        RowBox[{
         RowBox[{"#time", "<", "from"}], "&"}], "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"firstBeforeFrom", "=", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "rowsBeforeFrom", "]"}], ">", "0"}], ",", 
        RowBox[{"Last", "@", "rowsBeforeFrom"}], ",", "Nothing"}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"timeFirstBeforeFrom", "=", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "rowsBeforeFrom", "]"}], ">", "0"}], ",", 
        RowBox[{"firstBeforeFrom", "[", "\"\<time\>\"", "]"}], ",", 
        "firstBeforeFrom"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"shift", "=", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "rowsBeforeFrom", "]"}], ">", "0"}], ",", 
        RowBox[{"(", 
         RowBox[{"at", "-", "timeFirstBeforeFrom"}], ")"}], ",", "0.0"}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"ia", "[", 
      RowBox[{"All", ",", 
       RowBox[{"{", 
        RowBox[{"\"\<time\>\"", "\[Rule]", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"#", "\[LessEqual]", "timeFirstBeforeFrom"}], ",", 
             RowBox[{"#", "+", "shift"}], ",", "#"}], "]"}], "&"}], ")"}]}], 
        "}"}]}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.712165839278883*^9, 3.712165846640539*^9}, {
   3.712165968577615*^9, 3.712166008915638*^9}, {3.712166235591935*^9, 
   3.712166266080724*^9}, {3.712167381017167*^9, 3.7121674165632563`*^9}, {
   3.712168019928619*^9, 3.712168141498111*^9}, {3.712168193901745*^9, 
   3.7121682095303392`*^9}, {3.71216852528083*^9, 3.712168564431801*^9}, {
   3.712168601429996*^9, 3.712168652689701*^9}, {3.71216870483013*^9, 
   3.712168705399055*^9}, {3.712168757657404*^9, 3.712168872725761*^9}, {
   3.712168961598995*^9, 3.712168968736*^9}, {3.712169030041214*^9, 
   3.712169060669477*^9}, {3.712169096440826*^9, 3.712169142370626*^9}, {
   3.7121691759621267`*^9, 3.712169232056074*^9}, {3.712169314860525*^9, 
   3.7121693482558947`*^9}, {3.7121693936230297`*^9, 3.712169436627822*^9}, {
   3.712169786656702*^9, 3.7121699583223047`*^9}, {3.71226682768447*^9, 
   3.712266828051752*^9}, {3.712267013843864*^9, 3.712267064959396*^9}, {
   3.712268014537068*^9, 3.712268015231094*^9}, 3.71226855947148*^9, {
   3.712268619893806*^9, 3.712268626496516*^9}, {3.712268675463166*^9, 
   3.712268787516515*^9}, {3.712268840493937*^9, 3.712268857154443*^9}, {
   3.712268936079784*^9, 3.712268937578203*^9}, {3.712269079033019*^9, 
   3.712269080615375*^9}}],

Cell["Generalization to list of interactions.", "Text",
 CellChangeTimes->{{3.7121962614289722`*^9, 3.7121962782473583`*^9}, {
  3.712275867732149*^9, 3.712275867848913*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"AlignRightFromAtIAs", "[", 
   RowBox[{"ias_", ",", "from_", ",", "at_"}], "]"}], ":=", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"AlignRightFromAtIA", "[", 
      RowBox[{"#", ",", "from", ",", "at"}], "]"}], "&"}], ",", "ias"}], 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7121708187922707`*^9, 3.712170848579403*^9}, {
  3.712266840358638*^9, 3.7122668407203608`*^9}, {3.712267017232955*^9, 
  3.712267020710544*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Default is to align left.", "Subsection",
 CellChangeTimes->{{3.7122679624391003`*^9, 3.712267973499364*^9}, {
  3.7122680608350887`*^9, 3.7122680673516607`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"AlignFromAtIA", "=", "AlignLeftFromAtIA"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"AlignFromAtIAs", "=", "AlignLeftFromAtIAs"}], ";"}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.71226802894272*^9, 3.712268054539275*^9}}],

Cell["\<\

PEND: These function names suck. Any better ideas?
PEND: The left/right choice could be implemented as an Option, rather than \
separate functions.\
\>", "Text",
 CellChangeTimes->{{3.712266816273843*^9, 3.712266819221756*^9}, 
   3.712267010159314*^9, {3.712267976448497*^9, 3.712267994122856*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Shift an interaction by a certain amount of time", "Section",
 CellChangeTimes->{{3.712171754635296*^9, 3.712171765245768*^9}}],

Cell["Add/subtract a constant offset to all times.", "Text",
 CellChangeTimes->{{3.71219631957521*^9, 3.7121963638094473`*^9}, {
  3.712372611499599*^9, 3.712372620516494*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ShiftIA", "[", 
   RowBox[{"ia_", ",", "offset_"}], "]"}], ":=", 
  RowBox[{"ia", "[", 
   RowBox[{"All", ",", 
    RowBox[{"{", 
     RowBox[{"\"\<time\>\"", "\[Rule]", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"#", "+", "offset"}], "&"}], ")"}]}], "}"}]}], 
   "]"}]}]], "Input",
 InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{

Cell["Canonical time warping correspondence", "Section",
 CellChangeTimes->{{3.712455991618619*^9, 3.712456012819026*^9}}],

Cell[TextData[{
 "This is another way to find similarity-zones over time between two \
interactions.\n\n",
 StyleBox["PEND: ",
  FontWeight->"Bold"],
 "Generalize to N interactions!"
}], "Text",
 CellChangeTimes->{{3.712458197130507*^9, 3.712458199996359*^9}, {
  3.712458263330078*^9, 3.712458303693955*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"CanonicalWarpingCorrespondenceTimeIAs", "[", 
   RowBox[{"ia1_", ",", "ia2_"}], "]"}], ":=", 
  RowBox[{"CanonicalWarpingCorrespondence", "[", 
   RowBox[{
    RowBox[{"TimesIA", "[", "ia1", "]"}], ",", 
    RowBox[{"TimesIA", "[", "ia2", "]"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.712457743407424*^9, 3.712457828418786*^9}, {
  3.718121964127144*^9, 3.71812196463311*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"CanonicalWarpingCorrespondenceSizeIAs", "[", 
   RowBox[{"ia1_", ",", "ia2_"}], "]"}], ":=", 
  RowBox[{"CanonicalWarpingCorrespondence", "[", 
   RowBox[{
    RowBox[{"SizesIA", "[", "ia1", "]"}], ",", 
    RowBox[{"SizesIA", "[", "ia2", "]"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.717871656805645*^9, 3.7178716614651213`*^9}, {
  3.718121953852219*^9, 3.718121968775557*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"CanonicalWarpingCorrespondenceTimeAndSizeIAs", "[", 
   RowBox[{"ia1_", ",", "ia2_"}], "]"}], ":=", 
  RowBox[{"CanonicalWarpingCorrespondence", "[", 
   RowBox[{
    RowBox[{"Normal", "@", 
     RowBox[{"IA2ES", "[", "ia1", "]"}]}], ",", 
    RowBox[{"Normal", "@", 
     RowBox[{"IA2ES", "[", "ia2", "]"}]}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7181277082023287`*^9, 3.7181277741384583`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ShowCanonicalWarpingCorrespondenceIAs", "[", 
   RowBox[{"ia1_", ",", "ia2_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"path", ",", "z"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"path", "=", 
      RowBox[{"Transpose", "@", 
       RowBox[{"CanonicalWarpingCorrespondenceIAs", "[", 
        RowBox[{"ia1", ",", "ia2"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"z", "=", 
      RowBox[{"WhereIsStraightPath", "[", "path", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"ListPlot", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"path", ",", "path"}], "}"}], ",", 
       RowBox[{"ImageSize", "\[Rule]", "Medium"}], ",", 
       RowBox[{"AspectRatio", "\[Rule]", "1"}]}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.712457743407424*^9, 3.712457804617433*^9}, {
  3.712457837779776*^9, 3.7124578465319777`*^9}, {3.712457905266037*^9, 
  3.712457942221291*^9}, {3.712458022607758*^9, 3.71245814402816*^9}, {
  3.718116750653075*^9, 3.718116790634797*^9}, {3.718121408752008*^9, 
  3.71812144383117*^9}, {3.718121480826543*^9, 3.7181215345796423`*^9}}],

Cell["This returns one Boolean per gap between datapoints.", "Text",
 CellChangeTimes->{{3.718116191242051*^9, 3.71811627235401*^9}, {
  3.718121816944418*^9, 3.718121831956257*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"WhereIsStraightPath", "[", "path_", "]"}], ":=", 
  RowBox[{"Join", "[", 
   RowBox[{
    RowBox[{"{", "1", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Table", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"path", "[", 
           RowBox[{"[", 
            RowBox[{"i", "-", "1"}], "]"}], "]"}], "+", 
          RowBox[{"{", 
           RowBox[{"1", ",", "1"}], "}"}]}], "\[Equal]", 
         RowBox[{"path", "[", 
          RowBox[{"[", "i", "]"}], "]"}]}], ",", "\[IndentingNewLine]", "1", 
        ",", "\[IndentingNewLine]", "0"}], "\[IndentingNewLine]", "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"i", ",", "2", ",", 
        RowBox[{"Length", "[", "path", "]"}]}], "}"}]}], 
     "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",\

 InitializationCell->True,
 CellChangeTimes->{{3.7124578954840508`*^9, 3.7124578963727827`*^9}, {
  3.7124579319478827`*^9, 3.712457932242303*^9}, {3.718109010811846*^9, 
  3.718109084389373*^9}, {3.718115542611244*^9, 3.7181155462867393`*^9}, {
  3.718115625911364*^9, 3.718115676983604*^9}, {3.718116138812016*^9, 
  3.7181161520349617`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Bubble chart for a list of interactions", "Section",
 InitializationCell->True,
 CellChangeTimes->{{3.711850663402232*^9, 3.7118506699057293`*^9}}],

Cell[CellGroupData[{

Cell["Aux function", "Subsection",
 CellChangeTimes->{{3.712275980848508*^9, 3.712275983857481*^9}}],

Cell["\<\
This generates a list of {time, y, size} tuples, where y is the number \
(index) of the interaction.\
\>", "Text",
 InitializationCell->True,
 CellChangeTimes->{{3.711850697138659*^9, 3.7118507665445347`*^9}, {
   3.712196410912703*^9, 3.712196412248438*^9}, {3.712275885483884*^9, 
   3.712275930279645*^9}, 3.7122759781993027`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"IAs2BubbleTriplets", "[", "interactions_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"ess", ",", "listsofpairs"}], "}"}], ",", "\[IndentingNewLine]", 
    
    RowBox[{
     RowBox[{"listsofpairs", "=", 
      RowBox[{"Normal", "/@", 
       RowBox[{"IA2ES", "/@", "interactions"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Table", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"listsofpairs", "[", 
              RowBox[{"[", "i", "]"}], "]"}], "[", 
             RowBox[{"[", "j", "]"}], "]"}], "[", 
            RowBox[{"[", "1", "]"}], "]"}], ",", "\[IndentingNewLine]", "i", 
           ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"listsofpairs", "[", 
              RowBox[{"[", "i", "]"}], "]"}], "[", 
             RowBox[{"[", "j", "]"}], "]"}], "[", 
            RowBox[{"[", "2", "]"}], "]"}]}], "\[IndentingNewLine]", "}"}], 
         ",", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{"j", ",", "1", ",", 
           RowBox[{"Length", "@", 
            RowBox[{"listsofpairs", "[", 
             RowBox[{"[", "i", "]"}], "]"}]}]}], "}"}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", 
         RowBox[{"Length", "@", "listsofpairs"}]}], "}"}]}], 
      "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7118502632349977`*^9, 3.711850263691794*^9}, {
   3.711850405871052*^9, 3.711850495580097*^9}, {3.711850539722796*^9, 
   3.7118505516910343`*^9}, 3.711850674301571*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Plot the bubble chart", "Subsection",
 CellChangeTimes->{{3.712275958335403*^9, 3.7122759621408167`*^9}}],

Cell["\<\
This can get slow for >50 interactions. Try a smaller RandomSample first.
Using PerformanceGoal \[Rule] Speed makes the chart non-interactive, but is \
faster and uses less memory.\
\>", "Text",
 InitializationCell->True,
 CellChangeTimes->{{3.711850833123561*^9, 3.7118508551487827`*^9}, {
  3.712196372802382*^9, 3.712196405478262*^9}, {3.712265577523418*^9, 
  3.7122656048186703`*^9}, {3.712275947057157*^9, 3.712275955521771*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"BubbleChartIAs", "[", 
    RowBox[{"interactions_", ",", "otherargs__"}], "]"}], ":=", 
   RowBox[{"BubbleChart", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"IAs2BubbleTriplets", "[", "interactions", "]"}], ",", 
     "\[IndentingNewLine]", "otherargs", ",", 
     RowBox[{"ImageSize", "\[Rule]", "Full"}], ",", " ", 
     RowBox[{"BubbleSizes", "\[Rule]", "Small"}], ",", 
     RowBox[{"PerformanceGoal", "\[Rule]", "\"\<Speed\>\""}]}], 
    "\[IndentingNewLine]", "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"BubbleChartIAs", "[", "interactions_", "]"}], ":=", 
  RowBox[{"BubbleChartIAs", "[", 
   RowBox[{"interactions", ",", 
    RowBox[{"{", "}"}]}], "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.711850569139387*^9, 3.711850637025975*^9}, {
  3.711850682640176*^9, 3.711850688796027*^9}, {3.712265608073298*^9, 
  3.712265616900262*^9}, {3.712265883764488*^9, 3.71226589857168*^9}, {
  3.7122659408752937`*^9, 3.712265941091857*^9}, {3.712265992007519*^9, 
  3.712266034410297*^9}, {3.7122749136254883`*^9, 3.712274946048826*^9}, {
  3.7122749789554577`*^9, 3.7122750162565403`*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Interaction to free-time and busy-time intervals", "Section",
 InitializationCell->True,
 CellChangeTimes->{{3.7118519399486217`*^9, 3.711851963568269*^9}, {
  3.7118519971631393`*^9, 3.711851997863369*^9}, {3.711886852268971*^9, 
  3.7118868605668707`*^9}, {3.711887519094307*^9, 3.711887519254047*^9}, {
  3.7118922630612707`*^9, 3.711892268377162*^9}, {3.7121534074686604`*^9, 
  3.712153409925838*^9}}],

Cell[TextData[{
 "Interval object with the union of all the packet-free intervals.\n",
 StyleBox["packetradius",
  IgnoreSpellCheck->True,
  FontWeight->"Bold"],
 " is the radius of the \[OpenCurlyDoubleQuote]non-free\
\[CloseCurlyDoubleQuote] zone created by each packet.\n",
 StyleBox["NOTE:",
  FontWeight->"Bold"],
 " This does not include the endpoints {-\[Infinity], 0-packetradius} and {",
 StyleBox["lastpkt",
  IgnoreSpellCheck->True],
 "+packetradius, +\[Infinity]}\n",
 StyleBox["NOTE:",
  FontWeight->"Bold"],
 " We filter out any subintervals {a,b} with a > b, as Interval interprets \
them as {b,a} rather than discarding them (!)"
}], "Text",
 InitializationCell->True,
 CellChangeTimes->{{3.7118864666362467`*^9, 3.711886516319981*^9}, {
  3.7118865866073236`*^9, 3.711886702081771*^9}, {3.7118901934692507`*^9, 
  3.711890238457778*^9}, {3.7118909130873127`*^9, 3.711890923961824*^9}, {
  3.7123726465738697`*^9, 3.712372669944686*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"IA2FreeInterval", "[", 
   RowBox[{"interaction_", ",", "packetradius_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"times", "=", 
       RowBox[{"Normal", "[", 
        RowBox[{"interaction", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "\"\<time\>\""}], "]"}], "]"}], "]"}]}], ",", 
      "\[IndentingNewLine]", "pairs", ",", "\[IndentingNewLine]", 
      "filteredpairs"}], "\[IndentingNewLine]", "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"pairs", "=", 
      RowBox[{"Transpose", "[", " ", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Drop", "[", 
          RowBox[{
           RowBox[{"times", "+", "packetradius"}], ",", 
           RowBox[{"-", "1"}]}], "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Drop", "[", 
          RowBox[{
           RowBox[{"times", "-", "packetradius"}], ",", "1"}], "]"}]}], 
        "\[IndentingNewLine]", "}"}], " ", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"filteredpairs", "=", 
      RowBox[{"Select", "[", 
       RowBox[{"pairs", ",", 
        RowBox[{
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "<", 
          RowBox[{"#", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}], "&"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Interval", "@@", "filteredpairs"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.711852014022575*^9, 3.7118520522528763`*^9}, {
   3.71185211326726*^9, 3.7118522157652597`*^9}, {3.7118522685565643`*^9, 
   3.711852312996509*^9}, {3.71185237838198*^9, 3.711852417185717*^9}, {
   3.7118526349950113`*^9, 3.7118526427201633`*^9}, {3.71185269445459*^9, 
   3.711852695504512*^9}, {3.7118528245704*^9, 3.711852894215996*^9}, 
   3.711852927927987*^9, {3.711853009826285*^9, 3.711853011410281*^9}, {
   3.711853188394743*^9, 3.71185327336939*^9}, {3.711853726825693*^9, 
   3.711853739018169*^9}, {3.711853795920188*^9, 3.711853841590802*^9}, {
   3.71188651886668*^9, 3.711886574221695*^9}, {3.7118873971165648`*^9, 
   3.711887412012492*^9}, {3.711890546094274*^9, 3.7118906105985413`*^9}, {
   3.7118906423007402`*^9, 3.71189065449856*^9}, 3.711890753801903*^9, {
   3.712153328981634*^9, 3.712153353250656*^9}}],

Cell["\<\
Same thing, but now keeping track of busy intervals instead of free intervals.\
\>", "Text",
 CellChangeTimes->{{3.712175208051302*^9, 3.712175234864153*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"IA2BusyInterval", "[", 
   RowBox[{"interaction_", ",", "packetradius_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"times", "=", 
       RowBox[{"Normal", "[", 
        RowBox[{"interaction", "[", 
         RowBox[{"[", 
          RowBox[{"All", ",", "\"\<time\>\""}], "]"}], "]"}], "]"}]}], ",", 
      "\[IndentingNewLine]", "lefts", ",", "rights", ",", "pairs", ",", 
      "filteredpairs"}], "\[IndentingNewLine]", "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"lefts", "=", 
      RowBox[{"Clip", "[", 
       RowBox[{
        RowBox[{"times", "-", "packetradius"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "\[Infinity]"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"rights", "=", 
      RowBox[{"times", "+", "packetradius"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"pairs", "=", 
      RowBox[{"Transpose", "@", 
       RowBox[{"{", 
        RowBox[{"lefts", ",", "rights"}], "}"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"filteredpairs", "=", 
      RowBox[{"Select", "[", 
       RowBox[{"pairs", ",", 
        RowBox[{
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "<", 
          RowBox[{"#", "[", 
           RowBox[{"[", "2", "]"}], "]"}]}], "&"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Interval", "@@", "filteredpairs"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.712155535945312*^9, 3.7121555368017406`*^9}, {
  3.7121558005594807`*^9, 3.712155829698196*^9}, {3.712155881900024*^9, 
  3.712155892613855*^9}, {3.712156086835981*^9, 3.7121561128788*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Filter interactions to get only events that lie inside/outside an Interval\
\>", "Section",
 CellChangeTimes->{{3.712692689372957*^9, 3.712692720355732*^9}, {
  3.712704893738407*^9, 3.712704910004691*^9}, {3.712705329690544*^9, 
  3.7127053438471203`*^9}, {3.712706465990313*^9, 3.7127064791188173`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"SelectInsideIntervalIA", "[", 
   RowBox[{"ia_", ",", "iv_"}], "]"}], ":=", 
  RowBox[{"ia", "[", 
   RowBox[{"Select", "[", 
    RowBox[{
     RowBox[{"IntervalMemberQ", "[", 
      RowBox[{"iv", ",", "#time"}], "]"}], "&"}], "]"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"SelectOutsideIntervalIA", "[", 
    RowBox[{"ia_", ",", "iv_"}], "]"}], ":=", 
   RowBox[{"ia", "[", 
    RowBox[{"Select", "[", 
     RowBox[{
      RowBox[{"Not", "@", 
       RowBox[{"IntervalMemberQ", "[", 
        RowBox[{"iv", ",", "#time"}], "]"}]}], "&"}], "]"}], "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SelectInsideIntervalIAs", "[", 
   RowBox[{"ias_", ",", "iv_"}], "]"}], ":=", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"SelectInsideIntervalIA", "[", 
      RowBox[{"#", ",", "iv"}], "]"}], "&"}], ",", "ias"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SelectOutsideIntervalIAs", "[", 
   RowBox[{"ias_", ",", "iv_"}], "]"}], ":=", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"SelectOutsideIntervalIA", "[", 
      RowBox[{"#", ",", "iv"}], "]"}], "&"}], ",", "ias"}], "]"}]}]}], "Input",\

 InitializationCell->True,
 CellChangeTimes->{{3.7126927266073236`*^9, 3.7126927345276623`*^9}, {
  3.712705240751564*^9, 3.712705308916004*^9}, {3.712705444929901*^9, 
  3.712705525347278*^9}, {3.7127062678312187`*^9, 3.712706458432291*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Visualize free-time and busy-time intervals", "Section",
 InitializationCell->True,
 CellChangeTimes->{{3.711887494395628*^9, 3.7118875209957523`*^9}, {
  3.711892252259266*^9, 3.7118922771134243`*^9}, {3.712153421597597*^9, 
  3.7121534230978403`*^9}}],

Cell[CellGroupData[{

Cell["Show an Interval", "Subsection",
 CellChangeTimes->{{3.712276001306913*^9, 3.712276011398692*^9}, {
  3.712276085092732*^9, 3.7122761016408577`*^9}, {3.7122761360097437`*^9, 
  3.7122761363444138`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ShowInterval", "[", "iv_", "]"}], ":=", 
  RowBox[{"ShowInterval", "[", 
   RowBox[{"iv", ",", 
    RowBox[{"{", "}"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ShowInterval", "[", 
   RowBox[{"iv_", ",", "args__"}], "]"}], ":=", 
  RowBox[{"NumberLinePlot", "[", 
   RowBox[{"iv", ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", 
      RowBox[{"Min", "@", "iv"}], ",", 
      RowBox[{"Max", "@", "iv"}]}], "}"}], ",", 
    RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.711887158861334*^9, 3.711887344261348*^9}, {
  3.711887418172402*^9, 3.71188742270074*^9}, {3.71188746646204*^9, 
  3.711887467425762*^9}, {3.711891596853971*^9, 3.711891620416828*^9}, {
  3.712153363440537*^9, 3.712153364344141*^9}, {3.712413195144228*^9, 
  3.7124132161597958`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ExplicitSubintervals", "[", "iv_", "]"}], ":=", 
  RowBox[{"Map", "[", 
   RowBox[{"Interval", ",", 
    RowBox[{"{", 
     RowBox[{"Sequence", "@@", "iv"}], "}"}]}], "]"}]}]], "Input",
 InitializationCell->True]
}, Open  ]],

Cell[CellGroupData[{

Cell["Show an Interval and its composition", "Subsection",
 CellChangeTimes->{{3.712276111031843*^9, 3.712276173989849*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ShowIntervalExplicit", "[", "iv_", "]"}], ":=", 
  RowBox[{"NumberLinePlot", "[", 
   RowBox[{
    RowBox[{"ExplicitSubintervals", "@", "iv"}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", 
      RowBox[{"Min", "@", "iv"}], ",", 
      RowBox[{"Max", "@", "iv"}]}], "}"}], ",", 
    RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7118916225419083`*^9, 3.7118916478259487`*^9}, {
  3.711891845722097*^9, 3.71189184658146*^9}, {3.712153374570898*^9, 
  3.7121533792373333`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ShowIntervalBoth", "[", "iv_", "]"}], ":=", 
  RowBox[{"ShowIntervalBoth", "[", 
   RowBox[{"iv", ",", 
    RowBox[{"{", "}"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ShowIntervalBoth", "[", 
   RowBox[{"iv_", ",", "args__"}], "]"}], ":=", 
  RowBox[{"Column", "[", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"NumberLinePlot", "[", 
      RowBox[{"iv", ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", 
         RowBox[{"Min", "@", "iv"}], ",", 
         RowBox[{"Max", "@", "iv"}]}], "}"}], ",", "args", ",", 
       RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"NumberLinePlot", "[", 
      RowBox[{
       RowBox[{"ExplicitSubintervals", "@", "iv"}], ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", 
         RowBox[{"Min", "@", "iv"}], ",", 
         RowBox[{"Max", "@", "iv"}]}], "}"}], ",", "args", ",", 
       RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "]"}]}], 
    "\[IndentingNewLine]", "}"}], "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.711891847624586*^9, 3.7118918674724693`*^9}, {
  3.7121533826215553`*^9, 3.7121533838693132`*^9}, {3.712412143118456*^9, 
  3.712412172933264*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Show free-time or busy-time of an interaction", "Subsection",
 CellChangeTimes->{{3.712276071065962*^9, 3.712276082021751*^9}, {
  3.712413694409637*^9, 3.712413694569457*^9}}],

Cell["\<\
This also shows the \[OpenCurlyDoubleQuote]explicit\[CloseCurlyDoubleQuote] \
view with the decomposition of the Interval.\
\>", "Text",
 CellChangeTimes->{{3.712175208051302*^9, 3.712175234864153*^9}, {
  3.712413589170733*^9, 3.712413606002446*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ShowFreeTimeIA", "[", 
   RowBox[{"ia_", ",", "radiusrange_"}], "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Column", "[", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"ShowIntervalBoth", "[", " ", 
        RowBox[{"IA2FreeInterval", "[", 
         RowBox[{"ia", ",", "radius"}], "]"}], " ", "]"}], ",", 
       "\[IndentingNewLine]", "radius"}], "\[IndentingNewLine]", "}"}], "]"}],
     ",", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{"radius", ",", 
      RowBox[{"First", "@", "radiusrange"}], ",", 
      RowBox[{"Last", "@", "radiusrange"}]}], "}"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.71198030345217*^9, 3.711980417764804*^9}, {
  3.7121534374768467`*^9, 3.7121534423250647`*^9}, {3.712413288838985*^9, 
  3.712413289183544*^9}, {3.712413544771463*^9, 3.712413545467814*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ShowBusyTimeIA", "[", 
   RowBox[{"ia_", ",", "radiusrange_"}], "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Column", "[", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"ShowIntervalBoth", "[", " ", 
        RowBox[{"IA2BusyInterval", "[", 
         RowBox[{"ia", ",", "radius"}], "]"}], " ", "]"}], ",", 
       "\[IndentingNewLine]", "radius"}], "\[IndentingNewLine]", "}"}], "]"}],
     ",", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{"radius", ",", 
      RowBox[{"First", "@", "radiusrange"}], ",", 
      RowBox[{"Last", "@", "radiusrange"}]}], "}"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.712156197689025*^9, 3.712156209274446*^9}, {
  3.712413293967105*^9, 3.7124132943193407`*^9}, {3.712413546947504*^9, 
  3.712413547372119*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Show an interaction along with its free-time or busy-time", "Subsection",
 CellChangeTimes->{{3.7124136277219553`*^9, 3.712413690713586*^9}}],

Cell["\<\
Experimental. For this to make sense, the ListPlot and the NumberLinePlot \
need to be in sync. For busy time it works quite well.\
\>", "Text",
 CellChangeTimes->{{3.712175208051302*^9, 3.712175234864153*^9}, {
  3.712413589170733*^9, 3.712413606002446*^9}, {3.712413703849166*^9, 
  3.712413749792818*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ShowBusyTimeWithIA", "[", 
   RowBox[{"ia_", ",", "radiusrange_"}], "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Column", "[", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"ListPlot", "[", 
        RowBox[{
         RowBox[{"Normal", "@", 
          RowBox[{"ia", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", 
             RowBox[{"{", 
              RowBox[{"\"\<time\>\"", ",", "\"\<size\>\""}], "}"}]}], "]"}], 
           "]"}]}], ",", 
         RowBox[{"Frame", "\[Rule]", "True"}], ",", 
         RowBox[{"Axes", "\[Rule]", "False"}], ",", 
         RowBox[{"FrameTicks", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"Automatic", ",", "None"}], "}"}]}], ",", 
         RowBox[{"Filling", "\[Rule]", "Bottom"}], ",", 
         RowBox[{"ImageSize", "\[Rule]", "Large"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"With", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"mi", "=", 
              RowBox[{"Min", "@", 
               RowBox[{"IA2BusyInterval", "[", 
                RowBox[{"ia", ",", "radius"}], "]"}]}]}], ",", 
             RowBox[{"ma", "=", 
              RowBox[{"Max", "@", 
               RowBox[{"IA2BusyInterval", "[", 
                RowBox[{"ia", ",", "radius"}], "]"}]}]}]}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"PlotRange", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"mi", "-", 
                 FractionBox[
                  RowBox[{"mi", "+", "ma"}], "8"]}], ",", 
                RowBox[{"ma", "+", 
                 FractionBox[
                  RowBox[{"mi", "+", "ma"}], "8"]}]}], "}"}], ",", 
              "Automatic"}], "}"}]}]}], "]"}]}], "\[IndentingNewLine]", "]"}],
        ",", "\[IndentingNewLine]", 
       RowBox[{"ShowInterval", "[", " ", 
        RowBox[{
         RowBox[{"IA2BusyInterval", "[", 
          RowBox[{"ia", ",", "radius"}], "]"}], ",", 
         RowBox[{"Frame", "\[Rule]", "True"}], ",", 
         RowBox[{"FrameTicks", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"Automatic", ",", "None"}], "}"}]}], ",", 
         RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "]"}], ",", 
       "\[IndentingNewLine]", "radius"}], "\[IndentingNewLine]", "}"}], "]"}],
     ",", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{"radius", ",", 
      RowBox[{"First", "@", "radiusrange"}], ",", 
      RowBox[{"Last", "@", "radiusrange"}]}], "}"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.712156197689025*^9, 3.712156209274446*^9}, {
  3.7124052526612387`*^9, 3.712405304789386*^9}, {3.712412098326108*^9, 
  3.712412099053958*^9}, {3.712412187981738*^9, 3.712412232964492*^9}, {
  3.712412272261272*^9, 3.712412374547009*^9}, {3.7124124254112387`*^9, 
  3.7124124473303127`*^9}, {3.7124124899460297`*^9, 3.712412564328796*^9}, {
  3.7124126537205267`*^9, 3.712412657008168*^9}, {3.712412722047399*^9, 
  3.71241275926261*^9}, {3.712412867205961*^9, 3.7124128833966417`*^9}, {
  3.712412944140452*^9, 3.712413079156431*^9}, {3.712413124793853*^9, 
  3.712413130097638*^9}, {3.7124131808900414`*^9, 3.712413181377987*^9}, {
  3.7124133076557007`*^9, 3.7124133196639433`*^9}, {3.712413352583725*^9, 
  3.712413358110918*^9}, {3.712413396822528*^9, 3.7124134003913193`*^9}, {
  3.7124138318822117`*^9, 3.7124138367292023`*^9}, {3.712413868192912*^9, 
  3.712413872192423*^9}}],

Cell["\<\
The free-time version is not yet as good: it goes out of sync a bit when the \
NumberLinePlot starts zooming in.\
\>", "Text",
 CellChangeTimes->{{3.712175208051302*^9, 3.712175234864153*^9}, {
  3.712413589170733*^9, 3.712413606002446*^9}, {3.7124137538565617`*^9, 
  3.712413794912137*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ShowFreeTimeWithIA", "[", 
   RowBox[{"ia_", ",", "radiusrange_"}], "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Column", "[", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"ListPlot", "[", 
        RowBox[{
         RowBox[{"Normal", "@", 
          RowBox[{"ia", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", 
             RowBox[{"{", 
              RowBox[{"\"\<time\>\"", ",", "\"\<size\>\""}], "}"}]}], "]"}], 
           "]"}]}], ",", 
         RowBox[{"Frame", "\[Rule]", "True"}], ",", 
         RowBox[{"Axes", "\[Rule]", "False"}], ",", 
         RowBox[{"FrameTicks", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"Automatic", ",", "None"}], "}"}]}], ",", 
         RowBox[{"Filling", "\[Rule]", "Bottom"}], ",", 
         RowBox[{"ImageSize", "\[Rule]", "Large"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"With", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"mi", "=", 
              RowBox[{"Min", "@", 
               RowBox[{"IA2FreeInterval", "[", 
                RowBox[{"ia", ",", "radius"}], "]"}]}]}], ",", 
             RowBox[{"ma", "=", 
              RowBox[{"Max", "@", 
               RowBox[{"IA2FreeInterval", "[", 
                RowBox[{"ia", ",", "radius"}], "]"}]}]}]}], "}"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"PlotRange", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"mi", "-", 
                 FractionBox[
                  RowBox[{"mi", "+", "ma"}], "8"]}], ",", 
                RowBox[{"ma", "+", 
                 FractionBox[
                  RowBox[{"mi", "+", "ma"}], "8"]}]}], "}"}], ",", 
              "Automatic"}], "}"}]}]}], "]"}]}], "\[IndentingNewLine]", "]"}],
        ",", "\[IndentingNewLine]", 
       RowBox[{"ShowInterval", "[", " ", 
        RowBox[{
         RowBox[{"IA2FreeInterval", "[", 
          RowBox[{"ia", ",", "radius"}], "]"}], ",", 
         RowBox[{"Frame", "\[Rule]", "True"}], ",", 
         RowBox[{"FrameTicks", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{"Automatic", ",", "None"}], "}"}]}], ",", 
         RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "]"}], ",", 
       "\[IndentingNewLine]", "radius"}], "\[IndentingNewLine]", "}"}], "]"}],
     ",", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{"radius", ",", 
      RowBox[{"First", "@", "radiusrange"}], ",", 
      RowBox[{"Last", "@", "radiusrange"}]}], "}"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGAQBmIQXcezzSVhxWtH5xMabiD6nsbUBzeB9DInyecguirf
y+IukGbblQim07LqnUG03F05TxAdHsPhB6IlGy9G3QXr100E0W8mvkoG0Q9c
7TJBdH1rVxGI7uPbXguiXzkp1IFo7xbHNhDtm/6iC0TbTE+bAaK9NubMAtFT
61gWgegaxqebQLRd+swdIPqWvPNOEG1RPWc/iK6QWAOmG36XnAe71/7rBbD9
a4WuguglPYfBtFrQrFsgekMrz20QrSIXdB9EZ4lmPQTRT9o4he4B6ZP8OWB6
td0UMRAdFfIITAMAwQ2tXw==
  "]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Show free-time intersection and busy-time union over multiple interactions\
\>", "Subsection",
 CellChangeTimes->{{3.71227602860511*^9, 3.71227605191006*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ShowFreeTimeIntersectionIAs", "[", 
   RowBox[{"ias_", ",", "radiusrange_"}], "]"}], ":=", "\[IndentingNewLine]", 
  
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"maxtime", "=", 
      RowBox[{"MaxTimeInIAs", "[", "ias", "]"}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Column", "[", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"NumberLinePlot", "[", 
          RowBox[{
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"IA2FreeInterval", "[", 
               RowBox[{"#", ",", "radius"}], "]"}], "&"}], ",", "ias"}], 
            "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"x", ",", "0", ",", "maxtime"}], "}"}], ",", 
           RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"NumberLinePlot", "[", 
          RowBox[{
           RowBox[{"IntervalIntersection", "@@", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"IA2FreeInterval", "[", 
                RowBox[{"#", ",", "radius"}], "]"}], "&"}], ",", "ias"}], 
             "]"}]}], ",", 
           RowBox[{"{", 
            RowBox[{"x", ",", "0", ",", "maxtime"}], "}"}], ",", 
           RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "]"}], ",", 
         "\[IndentingNewLine]", "radius"}], "\[IndentingNewLine]", "}"}], 
       "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"radius", ",", 
        RowBox[{"First", "@", "radiusrange"}], ",", 
        RowBox[{"Last", "@", "radiusrange"}]}], "}"}]}], 
     "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",\

 InitializationCell->True,
 CellChangeTimes->{{3.71198009629946*^9, 3.7119801246700478`*^9}, {
  3.7119801667411413`*^9, 3.7119801869021807`*^9}, {3.711980441191051*^9, 
  3.7119804453306093`*^9}, {3.7121534494191313`*^9, 3.712153482894503*^9}, {
  3.71215637282295*^9, 3.712156374591412*^9}}],

Cell["The busy-time version now has an Export to JSON button! :)", "Text",
 CellChangeTimes->{{3.712607732149588*^9, 3.712607755913281*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ShowBusyTimeUnionIAs", "[", 
   RowBox[{"ias_", ",", "radiusrange_"}], "]"}], ":=", "\[IndentingNewLine]", 
  
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"maxtime", "=", 
       RowBox[{"MaxTimeInIAs", "[", "ias", "]"}]}], ",", 
      RowBox[{"destfilename", "=", "\"\</tmp/test.json\>\""}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Column", "[", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"NumberLinePlot", "[", 
          RowBox[{
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"IA2BusyInterval", "[", 
               RowBox[{"#", ",", "radius"}], "]"}], "&"}], ",", "ias"}], 
            "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"x", ",", "0", ",", "maxtime"}], "}"}], ",", 
           RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"NumberLinePlot", "[", 
          RowBox[{
           RowBox[{"IntervalUnion", "@@", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"IA2BusyInterval", "[", 
                RowBox[{"#", ",", "radius"}], "]"}], "&"}], ",", "ias"}], 
             "]"}]}], ",", 
           RowBox[{"{", 
            RowBox[{"x", ",", "0", ",", "maxtime"}], "}"}], ",", 
           RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "]"}], ",", 
         "\[IndentingNewLine]", "radius"}], "\[IndentingNewLine]", "}"}], 
       "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"radius", ",", 
        RowBox[{"First", "@", "radiusrange"}], ",", 
        RowBox[{"Last", "@", "radiusrange"}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Button", "[", 
       RowBox[{"\"\<Export to JSON\>\"", ",", 
        RowBox[{"ExportBusyTimeUnionIAs", "[", 
         RowBox[{"ias", ",", "radius", ",", "destfilename"}], "]"}]}], "]"}], 
      ",", "\[IndentingNewLine]", 
      RowBox[{"Button", "[", 
       RowBox[{"\"\<Show union interval\>\"", ",", 
        RowBox[{"Print", "[", 
         RowBox[{"ToString", "[", 
          RowBox[{"IntervalUnion", "@@", 
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"IA2BusyInterval", "[", 
               RowBox[{"#", ",", "radius"}], "]"}], "&"}], ",", "ias"}], 
            "]"}]}], "]"}], "]"}]}], "]"}]}], "\[IndentingNewLine]", "]"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7121562202819242`*^9, 3.712156231776081*^9}, {
   3.71215631244939*^9, 3.7121563198858356`*^9}, {3.712156376831712*^9, 
   3.7121563780588827`*^9}, {3.712602309697701*^9, 3.712602450566957*^9}, {
   3.712602519154211*^9, 3.7126025271234913`*^9}, {3.71260263252487*^9, 
   3.712602647059182*^9}, {3.712602747848413*^9, 3.712602766044422*^9}, {
   3.712605567756934*^9, 3.712605616235767*^9}, {3.712605652057543*^9, 
   3.712605658001227*^9}, {3.712607695727686*^9, 3.712607696931548*^9}, {
   3.7126077791053267`*^9, 3.712607797620422*^9}, {3.712610161563326*^9, 
   3.712610166270953*^9}, {3.7126102325976152`*^9, 3.712610233849291*^9}, {
   3.7126102752289057`*^9, 3.712610323868568*^9}, 3.712610432465782*^9, {
   3.712611392787237*^9, 3.712611408106256*^9}, {3.71268714176607*^9, 
   3.712687178780396*^9}, 3.712687226589343*^9, {3.71268725710695*^9, 
   3.7126872650862923`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ShowBusyTimeOnlyUnionIAs", "[", 
   RowBox[{"ias_", ",", "radiusrange_"}], "]"}], ":=", "\[IndentingNewLine]", 
  
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"maxtime", "=", 
       RowBox[{"MaxTimeInIAs", "[", "ias", "]"}]}], ",", 
      RowBox[{"destfilename", "=", "\"\</tmp/test.json\>\""}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Column", "[", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"NumberLinePlot", "[", 
          RowBox[{
           RowBox[{"IntervalUnion", "@@", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"IA2BusyInterval", "[", 
                RowBox[{"#", ",", "radius"}], "]"}], "&"}], ",", "ias"}], 
             "]"}]}], ",", 
           RowBox[{"{", 
            RowBox[{"x", ",", "0", ",", "maxtime"}], "}"}], ",", 
           RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "]"}], ",", 
         "\[IndentingNewLine]", "radius"}], "\[IndentingNewLine]", "}"}], 
       "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"radius", ",", 
        RowBox[{"First", "@", "radiusrange"}], ",", 
        RowBox[{"Last", "@", "radiusrange"}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"Button", "[", 
       RowBox[{"\"\<Export to JSON\>\"", ",", 
        RowBox[{"ExportBusyTimeUnionIAs", "[", 
         RowBox[{"ias", ",", "radius", ",", "destfilename"}], "]"}]}], 
       "]"}]}], "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7121562202819242`*^9, 3.712156231776081*^9}, {
   3.71215631244939*^9, 3.7121563198858356`*^9}, {3.712156376831712*^9, 
   3.7121563780588827`*^9}, {3.712602309697701*^9, 3.712602450566957*^9}, {
   3.712602519154211*^9, 3.7126025271234913`*^9}, {3.71260263252487*^9, 
   3.712602647059182*^9}, {3.712602747848413*^9, 3.712602766044422*^9}, {
   3.712605567756934*^9, 3.712605616235767*^9}, {3.712605652057543*^9, 
   3.712605658001227*^9}, {3.712607695727686*^9, 3.712607696931548*^9}, {
   3.7126077791053267`*^9, 3.712607797620422*^9}, {3.712610161563326*^9, 
   3.712610166270953*^9}, {3.7126102325976152`*^9, 3.712610233849291*^9}, {
   3.7126102752289057`*^9, 3.712610323868568*^9}, 3.712610432465782*^9, {
   3.712611392787237*^9, 3.712611408106256*^9}, {3.712681983252255*^9, 
   3.712681997082508*^9}}],

Cell["\<\
This is a non-interactive version of the above, for a fixed radius.\
\>", "Text",
 CellChangeTimes->{{3.712683419660017*^9, 3.712683450773205*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"DisplayBusyTimeOnlyUnionIAs", "[", 
   RowBox[{"ias_", ",", "radius_"}], "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"maxtime", "=", 
       RowBox[{"MaxTimeInIAs", "[", "ias", "]"}]}], ",", 
      RowBox[{"destfilename", "=", "\"\</tmp/test.json\>\""}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"Column", "[", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"NumberLinePlot", "[", 
        RowBox[{
         RowBox[{"IntervalUnion", "@@", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"IA2BusyInterval", "[", 
              RowBox[{"#", ",", "radius"}], "]"}], "&"}], ",", "ias"}], 
           "]"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"x", ",", "0", ",", "maxtime"}], "}"}], ",", 
         RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "]"}], ",", 
       "\[IndentingNewLine]", "radius", ",", "\[IndentingNewLine]", 
       RowBox[{"Button", "[", 
        RowBox[{"\"\<Export to JSON\>\"", ",", 
         RowBox[{"ExportBusyTimeUnionIAs", "[", 
          RowBox[{"ias", ",", "radius", ",", "destfilename"}], "]"}]}], 
        "]"}]}], "\[IndentingNewLine]", "}"}], "]"}]}], "\[IndentingNewLine]",
    "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.712683439077092*^9, 3.712683490965617*^9}}],

Cell["This is a non-GUI version of the above.", "Text",
 CellChangeTimes->{{3.7126114734665823`*^9, 3.712611482468773*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ExportBusyTimeUnionIAs", "[", 
   RowBox[{"ias_", ",", "radius_", ",", "destfilename_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"file", ",", "jsonstring"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"lastIntervalUnion", "=", 
      RowBox[{"IntervalUnion", "@@", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"IA2BusyInterval", "[", 
           RowBox[{"#", ",", "radius"}], "]"}], "&"}], ",", "ias"}], 
        "]"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"file", "=", 
      RowBox[{"OpenWrite", "[", "destfilename", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"jsonstring", "=", 
      RowBox[{"IAsIV2JSON", "[", 
       RowBox[{"ias", ",", "lastIntervalUnion"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"WriteString", " ", "[", 
      RowBox[{"file", ",", "jsonstring"}], "]"}], ";", "\[IndentingNewLine]", 
     
     RowBox[{"Close", "[", "file", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Print", "[", 
      RowBox[{"\"\<Exported to \>\"", "<>", "destfilename"}], "]"}], ";"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7126111942927027`*^9, 3.712611297558419*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["JSON export (old, based on Interval objects)", "Section",
 CellChangeTimes->{{3.7126053675301228`*^9, 3.7126053735852203`*^9}, {
  3.712605900801735*^9, 3.712605922211985*^9}, {3.7210972450309677`*^9, 
  3.721097251365184*^9}}],

Cell["\<\
(This is sometimes not enough because adjacent intervals in an Interval \
object get merged together. We need a list of pairs instead.)\
\>", "Text",
 CellChangeTimes->{{3.721097253232008*^9, 3.721097282025221*^9}, {
  3.7211430084209013`*^9, 3.721143010831815*^9}}],

Cell["Many interactions with the same Interval object", "Text",
 CellChangeTimes->{{3.71545952143467*^9, 3.715459531645515*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"IAsIV2JSON", "[", 
    RowBox[{"ias_", ",", "iv_"}], "]"}], ":=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"pairs", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"i", ",", 
           RowBox[{"f", "[", 
            RowBox[{
             RowBox[{"ias", "[", 
              RowBox[{"[", "i", "]"}], "]"}], ",", "iv"}], "]"}]}], "}"}], 
         ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "1", ",", 
           RowBox[{"Length", "[", "ias", "]"}]}], "}"}]}], "]"}]}], "}"}], 
     ",", "\[IndentingNewLine]", 
     RowBox[{"ExportString", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"<|", 
           RowBox[{
            RowBox[{"\"\<interaction_num\>\"", "\[Rule]", 
             RowBox[{
              RowBox[{"First", "[", "#", "]"}], "-", "1"}]}], ",", 
            RowBox[{"\"\<interval_list\>\"", "\[Rule]", 
             RowBox[{"Last", "@", "#"}]}]}], "|>"}], "&"}], ",", "pairs"}], 
        "]"}], ",", "\[IndentingNewLine]", "\"\<RawJSON\>\"", ",", 
       RowBox[{"\"\<Compact\>\"", "\[Rule]", "2"}]}], "\[IndentingNewLine]", 
      "]"}]}], "\[IndentingNewLine]", "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"IAsIV2JSON", "[", 
    RowBox[{"ias_", ",", "iv_", ",", "goodpositions_"}], "]"}], ":=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"pairs", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"i", ",", 
           RowBox[{"f", "[", 
            RowBox[{
             RowBox[{"ias", "[", 
              RowBox[{"[", "i", "]"}], "]"}], ",", "iv"}], "]"}]}], "}"}], 
         ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "goodpositions"}], "}"}]}], "]"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"ExportString", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"<|", 
           RowBox[{
            RowBox[{"\"\<interaction_num\>\"", "\[Rule]", 
             RowBox[{
              RowBox[{"First", "[", "#", "]"}], "-", "1"}]}], ",", 
            RowBox[{"\"\<interval_list\>\"", "\[Rule]", 
             RowBox[{"Last", "@", "#"}]}]}], "|>"}], "&"}], ",", "pairs"}], 
        "]"}], ",", "\[IndentingNewLine]", "\"\<RawJSON\>\"", ",", 
       RowBox[{"\"\<Compact\>\"", "\[Rule]", "2"}]}], "\[IndentingNewLine]", 
      "]"}]}], "\[IndentingNewLine]", "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"ia_", ",", "iv_"}], "]"}], ":=", 
   RowBox[{"With", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"listOfListsOfIdx", "=", 
       RowBox[{"SelectTimeIdxsIA", "[", 
        RowBox[{"ia", ",", "iv"}], "]"}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "[", "#", "]"}], ">", "0"}], ",", 
          RowBox[{"FirstAndLast", "[", "#", "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"1", ",", "0"}], "}"}]}], "]"}], "&"}], ",", 
       "listOfListsOfIdx"}], "]"}]}], "\[IndentingNewLine]", "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"FirstAndLast", "[", "elems_", "]"}], ":=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"First", "@", "elems"}], ",", 
    RowBox[{"Last", "@", "elems"}]}], "}"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7126033962917337`*^9, 3.712603399509391*^9}, {
  3.7126034388761578`*^9, 3.71260350528404*^9}, {3.712604733021996*^9, 
  3.7126047353792467`*^9}, {3.712604772420883*^9, 3.712604885996477*^9}, {
  3.712604920380847*^9, 3.712604990641815*^9}, {3.7126050222523737`*^9, 
  3.712605092874563*^9}, {3.7126052728788643`*^9, 3.712605377249927*^9}, {
  3.7126054134958563`*^9, 3.712605507318378*^9}, {3.7126079556713047`*^9, 
  3.712607964827983*^9}, {3.712608024020651*^9, 3.71260802448711*^9}, {
  3.7126080633301783`*^9, 3.7126080841199217`*^9}, {3.712610472206612*^9, 
  3.7126104853449907`*^9}, {3.71261074186543*^9, 3.712610745675531*^9}, {
  3.7126108470507812`*^9, 3.712610866277054*^9}, {3.712687405675619*^9, 
  3.71268740902885*^9}, {3.712687498504889*^9, 3.7126875205641613`*^9}, {
  3.712687551772241*^9, 3.7126875601796017`*^9}}],

Cell["Many interactions, each with its own Interval object", "Text",
 CellChangeTimes->{{3.71545953727468*^9, 3.715459547315433*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"IAsIVs2JSON", "[", 
   RowBox[{"ias_", ",", "ivs_"}], "]"}], ":=", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"pairs", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"i", ",", 
          RowBox[{"f", "[", 
           RowBox[{
            RowBox[{"ias", "[", 
             RowBox[{"[", "i", "]"}], "]"}], ",", 
            RowBox[{"ivs", "[", 
             RowBox[{"[", "i", "]"}], "]"}]}], "]"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "1", ",", 
          RowBox[{"Length", "[", "ias", "]"}]}], "}"}]}], "]"}]}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{"ExportString", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"<|", 
          RowBox[{
           RowBox[{"\"\<interaction_num\>\"", "\[Rule]", 
            RowBox[{
             RowBox[{"First", "[", "#", "]"}], "-", "1"}]}], ",", 
           RowBox[{"\"\<interval_list\>\"", "\[Rule]", 
            RowBox[{"Last", "@", "#"}]}]}], "|>"}], "&"}], ",", "pairs"}], 
       "]"}], ",", "\[IndentingNewLine]", "\"\<RawJSON\>\"", ",", 
      RowBox[{"\"\<Compact\>\"", "\[Rule]", "2"}]}], "\[IndentingNewLine]", 
     "]"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True],

Cell[TextData[{
 "Input: an interaction and an Interval object.\nOutput: a list of lists of \
",
 StyleBox["idxs",
  IgnoreSpellCheck->True],
 " (original-",
 StyleBox["pcap",
  IgnoreSpellCheck->True],
 " indices), each with only those events that correspond to the associated \
sub-interval of the interaction."
}], "Text",
 CellChangeTimes->{{3.7125843247957973`*^9, 3.7125844118695183`*^9}, {
  3.7125852010003147`*^9, 3.7125852250608788`*^9}, {3.712585787700667*^9, 
  3.712585793346568*^9}, {3.712603333606732*^9, 3.712603344049699*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"SelectTimeIdxsIA", "[", 
    RowBox[{"ia_", ",", "iv_"}], "]"}], ":=", 
   RowBox[{"Map", "[", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"Normal", "[", 
       RowBox[{"#", "[", 
        RowBox[{"[", 
         RowBox[{"All", ",", "\"\<idx\>\""}], "]"}], "]"}], "]"}], "&"}], ",",
      " ", 
     RowBox[{"SelectIntervalIA", "[", 
      RowBox[{"ia", ",", "iv"}], "]"}]}], " ", "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SelectIntervalIA", "[", 
   RowBox[{"ia_", ",", "iv_"}], "]"}], ":=", 
  RowBox[{"Table", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ia", "[", 
     RowBox[{"Select", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"First", "[", 
         RowBox[{"iv", "[", 
          RowBox[{"[", "i", "]"}], "]"}], "]"}], "\[LessEqual]", "#time", 
        "\[LessEqual]", 
        RowBox[{"Last", "[", 
         RowBox[{"iv", "[", 
          RowBox[{"[", "i", "]"}], "]"}], "]"}]}], "&"}], 
      "\[IndentingNewLine]", "]"}], "]"}], ",", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{"i", ",", "1", ",", 
      RowBox[{"Length", "@", "iv"}]}], "}"}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7125846380158367`*^9, 3.712584644481406*^9}, {
   3.712584758969145*^9, 3.712584799319174*^9}, {3.712585056644165*^9, 
   3.7125851853986807`*^9}, 3.712585245425474*^9, {3.7125857629319887`*^9, 
   3.712585769240281*^9}, {3.712585808582735*^9, 3.712585834072791*^9}, {
   3.712593037054443*^9, 3.7125930582532787`*^9}, {3.712603294468358*^9, 
   3.712603326714847*^9}, {3.7126033575472*^9, 3.7126033607820873`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Take uniform random sample from all secrets", "Section",
 CellChangeTimes->{{3.712502303516788*^9, 3.712502304310388*^9}, {
  3.712585345065563*^9, 3.712585355658634*^9}}],

Cell["\<\
Take a random sample of N interactions from each secret. Flatten them into \
one list of interactions.\
\>", "Text",
 CellChangeTimes->{{3.7125852549094152`*^9, 3.712585289883951*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"RandomSampleFromEachSecret", "[", 
   RowBox[{"sec2ias_", ",", "npersecret_"}], "]"}], ":=", 
  RowBox[{"Catenate", "@", 
   RowBox[{"Values", "@", 
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"RandomSample", "[", 
        RowBox[{"#", ",", "npersecret"}], "]"}], "&"}], ",", "sec2ias"}], 
     "]"}]}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.712502321632291*^9, 3.712502343471726*^9}, {
  3.712502392319108*^9, 3.712502431412801*^9}, {3.712502537755032*^9, 
  3.712502563297235*^9}, {3.712502598243471*^9, 3.7125025986143837`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Outlier detection and pruning", "Section",
 CellChangeTimes->{{3.712674057647333*^9, 3.712674061006733*^9}}],

Cell[TextData[{
 "Given ",
 StyleBox["ias",
  IgnoreSpellCheck->True],
 " and n, return a list {indices, interactions} of those whose last-packet \
time is over n standard deviations apart from the mean last-packet time.\n\
Note that the returned indices are wrt to the given ias (not to anything \
global)."
}], "Text",
 CellChangeTimes->{{3.712674546532823*^9, 3.7126746659443417`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"GuessOutliersByLastPacketTimeIAs", "[", 
   RowBox[{"ias_", ",", "numberOfStdDevs_"}], "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "lastpackettimes", ",", "mean", ",", "stddev", ",", "threshold", ",", 
      "positions"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"lastpackettimes", "=", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"#", "[", 
          RowBox[{"Max", ",", "\"\<time\>\""}], "]"}], "&"}], ",", "ias"}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"mean", "=", 
      RowBox[{"Mean", "[", "lastpackettimes", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"stddev", "=", 
      RowBox[{"StandardDeviation", "[", "lastpackettimes", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"threshold", "=", 
      RowBox[{"mean", "+", 
       RowBox[{"numberOfStdDevs", "*", "stddev"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"positions", "=", 
      RowBox[{"Position", "[", 
       RowBox[{"ias", ",", 
        RowBox[{"_", "?", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"#", "[", 
             RowBox[{"Max", ",", "\"\<time\>\""}], "]"}], ">", "threshold"}], 
           "&"}], ")"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"Flatten", "[", "positions", "]"}], ",", 
       RowBox[{"Extract", "[", 
        RowBox[{"ias", ",", "positions"}], "]"}], ",", 
       RowBox[{"Delete", "[", 
        RowBox[{
         RowBox[{"Range", "[", 
          RowBox[{"Length", "[", "ias", "]"}], "]"}], ",", "positions"}], 
        "]"}], ",", 
       RowBox[{"Delete", "[", 
        RowBox[{"ias", ",", "positions"}], "]"}]}], "}"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.712674184041996*^9, 3.712674289158736*^9}, {
  3.712674357327923*^9, 3.7126744289232492`*^9}, {3.712674476925455*^9, 
  3.712674511471896*^9}, {3.712680578366988*^9, 3.712680663199799*^9}, {
  3.712680699217697*^9, 3.712680748231625*^9}, {3.7126807932062063`*^9, 
  3.712680798427588*^9}, {3.71268151023869*^9, 3.712681514393506*^9}, {
  3.71268668070207*^9, 3.712686701824563*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
  "ShowOutliersByLastPacketTimeForIncreasingThresholdIAs", "[", "ias_", "]"}],
   ":=", "\[IndentingNewLine]", 
  RowBox[{"DiscretePlot", "[", 
   RowBox[{
    RowBox[{"Length", "[", 
     RowBox[{"First", "[", 
      RowBox[{"GuessOutliersByLastPacketTimeIAs", "[", 
       RowBox[{"ias", ",", "nstddevs"}], "]"}], "]"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"nstddevs", ",", "2", ",", "3", ",", "0.2"}], "}"}]}], 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7126846487749367`*^9, 3.712684773886091*^9}, {
  3.712686390671165*^9, 3.712686400406383*^9}, {3.7126864421471148`*^9, 
  3.712686444361866*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Pending", "Section",
 CellChangeTimes->{{3.712612946583228*^9, 3.712612948277649*^9}}],

Cell[TextData[{
 "Export certain intervals to JSON that ",
 StyleBox["don\[CloseCurlyQuote]t",
  FontWeight->"Bold"],
 " come from a radius-based union calculation."
}], "Text",
 CellChangeTimes->{{3.712612951560598*^9, 3.712612973311441*^9}}],

Cell["\<\
Number of busy interval segments resulting from a certain radius:\
\>", "Text",
 CellChangeTimes->{{3.715347741533782*^9, 3.715347755098995*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"HowManySegmentsBusyIntervalIA", "[", 
   RowBox[{"ia_", ",", "radius_"}], "]"}], ":=", 
  RowBox[{"Length", "@", 
   RowBox[{"IA2BusyInterval", "[", 
    RowBox[{"ia", ",", "radius"}], "]"}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7153476521097603`*^9, 3.715347675555715*^9}, {
  3.715347709848971*^9, 3.7153477344361353`*^9}, {3.7153482392768803`*^9, 
  3.715348239348898*^9}, {3.7154410731766768`*^9, 3.715441075546949*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ShowHowManySegmentsBusyIntervalsIAs", "[", 
   RowBox[{"ias_", ",", "radiusrange_"}], "]"}], ":=", 
  RowBox[{"Plot", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"HowManySegmentsBusyIntervalIA", "[", 
        RowBox[{"#", ",", "r"}], "]"}], "&"}], ",", "ias"}], "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{"r", ",", 
      RowBox[{"First", "@", "radiusrange"}], ",", 
      RowBox[{"Last", "@", "radiusrange"}]}], "}"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.715348206738473*^9, 3.7153482816906347`*^9}, {
  3.715441087703402*^9, 3.715441088409594*^9}, {3.7157208779933853`*^9, 
  3.715720882734414*^9}}],

Cell["\<\
Given an interaction and a desired number of segments (how many intervals in \
the resulting Interval object), use binary search to find a radius that \
yields exactly that number of segments. Return the radius and the Interval \
object.\
\>", "Text",
 CellChangeTimes->{{3.7154475944106693`*^9, 3.715447660441648*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"IA2BusyIntervalWithFixedNumberOfSegments", "[", 
   RowBox[{"ia_", ",", "desiredNumberOfSegments_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"left", "=", "0.000001"}], ",", "\[IndentingNewLine]", 
      RowBox[{"right", "=", 
       RowBox[{
        RowBox[{"ia", "[", 
         RowBox[{"Max", ",", "\"\<time\>\""}], "]"}], "-", 
        RowBox[{"ia", "[", 
         RowBox[{"Min", ",", "\"\<time\>\""}], "]"}]}]}], ",", 
      "\[IndentingNewLine]", "radius", ",", "numberOfSegments"}], 
     "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"While", "[", 
      RowBox[{"True", ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"radius", "=", 
         FractionBox[
          RowBox[{"left", "+", "right"}], "2"]}], ";", "\[IndentingNewLine]", 
        
        RowBox[{"numberOfSegments", "=", 
         RowBox[{"HowManySegmentsBusyIntervalIA", "[", 
          RowBox[{"ia", ",", "radius"}], "]"}]}], ";", "\[IndentingNewLine]", 
        
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"numberOfSegments", "==", "desiredNumberOfSegments"}], ",", 
          
          RowBox[{"Break", "[", "]"}]}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
          "numberOfSegments", " ", "<", " ", "desiredNumberOfSegments"}], ",", 
          RowBox[{"right", "=", "radius"}], ",", 
          RowBox[{"left", "=", "radius"}]}], "]"}], ";"}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", 
      RowBox[{"{", 
       RowBox[{"radius", ",", 
        RowBox[{"IA2BusyInterval", "[", 
         RowBox[{"ia", ",", "radius"}], "]"}]}], "}"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.715438470232386*^9, 3.7154385385408697`*^9}, {
   3.715438975738978*^9, 3.7154390306175013`*^9}, 3.715440304090537*^9, {
   3.715440346300432*^9, 3.715440526027275*^9}, {3.7154405595976257`*^9, 
   3.715440633219893*^9}, {3.715440697132594*^9, 3.715440711916812*^9}, {
   3.7154410498355227`*^9, 3.715441053680711*^9}, {3.715720885933489*^9, 
   3.715720888341485*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"IAs2BusyIntervalsWithFixedNumberOfSegments", "[", 
   RowBox[{"ias_", ",", "desiredNumberOfSegments_"}], "]"}], ":=", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"IA2BusyIntervalWithFixedNumberOfSegments", "[", 
      RowBox[{"#", ",", "desiredNumberOfSegments"}], "]"}], "&"}], ",", 
    "ias"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.715441435321837*^9, 3.715441495427134*^9}, {
  3.715441542916669*^9, 3.7154415764284477`*^9}, {3.715441621104994*^9, 
  3.715441624774453*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ShowIAIV", "[", 
   RowBox[{"ia_", ",", "iv_"}], "]"}], ":=", 
  RowBox[{"ListPlot", "[", "\[IndentingNewLine]", 
   RowBox[{"Table", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"IA2ES", "@", 
      RowBox[{"TimeWindowIA", "[", 
       RowBox[{"ia", ",", 
        RowBox[{"iv", "[", 
         RowBox[{"[", "j", "]"}], "]"}]}], "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"j", ",", "1", ",", 
       RowBox[{"Length", "[", "iv", "]"}]}], "}"}]}], "\[IndentingNewLine]", 
    "]"}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7154492753921537`*^9, 3.7154493553892183`*^9}, {
  3.715449411874072*^9, 3.715449416629396*^9}, {3.7154495234555407`*^9, 
  3.715449525285774*^9}, {3.7154495764902554`*^9, 3.715449665032881*^9}}],

Cell["\<\
Split an interaction into many by markers. Each of the resulting interactions \
starts with a marker.\
\>", "Text",
 CellChangeTimes->{{3.7156264439343*^9, 3.715626473940579*^9}, {
  3.715626544830585*^9, 3.715626582373904*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"SplitByMarkersIA", "[", "ia_", "]"}], ":=", 
  RowBox[{"Map", "[", 
   RowBox[{"Dataset", ",", 
    RowBox[{"Split", "[", 
     RowBox[{
      RowBox[{"Normal", "[", "ia", "]"}], ",", 
      RowBox[{
       RowBox[{
        RowBox[{"Lookup", "[", 
         RowBox[{"#2", ",", "\"\<flags\>\""}], "]"}], "\[NotEqual]", 
        "\"\<M\>\""}], "&"}]}], "]"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.715622971813113*^9, 3.715622985332487*^9}, {
  3.715623137417375*^9, 3.715623143906046*^9}, {3.715625286720765*^9, 
  3.715625287521353*^9}, {3.715626421665839*^9, 3.7156264219691896`*^9}, {
  3.715626480014879*^9, 3.7156265083016357`*^9}, {3.7156265637274437`*^9, 
  3.715626564994154*^9}}],

Cell["Longest common subsequence among N lists.", "Text",
 CellChangeTimes->{{3.715988502995075*^9, 3.715988529742216*^9}, {
  3.7159885628224287`*^9, 3.715988563495661*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"LCSN", "[", "seqs_", "]"}], ":=", 
  RowBox[{"Fold", "[", 
   RowBox[{"LongestCommonSubsequence", ",", 
    RowBox[{"seqs", "[", 
     RowBox[{"[", "1", "]"}], "]"}], ",", "seqs"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.71598853933418*^9, 3.71598853963093*^9}}],

Cell["\<\
This could be more efficient, but I can\[CloseCurlyQuote]t find the right \
function (that only cares about whether there is at least one appearance). So \
this will work for now.\
\>", "Text",
 CellChangeTimes->{{3.716054823660838*^9, 3.716054840695223*^9}, {
  3.7160741115689993`*^9, 3.716074135373667*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"IsSublistQ", "[", 
   RowBox[{"sublist_", ",", "list_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Length", "[", 
    RowBox[{"SequencePosition", "[", 
     RowBox[{"list", ",", "sublist"}], "]"}], "]"}], ">", "0"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.716054055463091*^9, 3.716054063770898*^9}, {
  3.716054342518035*^9, 3.716054347729637*^9}, {3.716054518368599*^9, 
  3.7160545295367317`*^9}, {3.716054733938756*^9, 3.716054810991592*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"HowManyContainSublist", "[", 
   RowBox[{"sublist_", ",", "listOfLists_"}], "]"}], ":=", 
  RowBox[{"Length", "[", "\[IndentingNewLine]", 
   RowBox[{"Select", "[", "\[IndentingNewLine]", 
    RowBox[{"listOfLists", ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"IsSublistQ", "[", 
       RowBox[{"sublist", ",", "#"}], "]"}], "&"}]}], "\[IndentingNewLine]", 
    "]"}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.717857434669949*^9, 3.717857527285288*^9}}],

Cell["\<\
Assuming sublist is contained within list, return {before, sublist, after} \
such that their concatenation is list. If there are multiple appearances of \
sublist within list, the first one is used.\
\>", "Text",
 CellChangeTimes->{{3.716755652712212*^9, 3.716755682716836*^9}, {
  3.7167558319515533`*^9, 3.716755846889634*^9}, {3.71675699778297*^9, 
  3.7167570049475946`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"SplitBySublist", "[", 
   RowBox[{"list_", ",", "sublist_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "positionpairs", ",", "pStart", ",", "pEnd", ",", "before", ",", 
      "after"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"positionpairs", "=", 
      RowBox[{"SequencePosition", "[", 
       RowBox[{"list", ",", "sublist"}], "]"}]}], ";", "\[IndentingNewLine]", 
     
     RowBox[{
      RowBox[{"{", 
       RowBox[{"pStart", ",", "pEnd"}], "}"}], "=", 
      RowBox[{"First", "[", "positionpairs", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"before", "=", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"pStart", ">", "1"}], ",", 
        RowBox[{"Take", "[", 
         RowBox[{"list", ",", 
          RowBox[{"pStart", "-", "1"}]}], "]"}], ",", 
        RowBox[{"{", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"after", "=", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"pEnd", "<", 
         RowBox[{"Length", "[", "list", "]"}]}], ",", 
        RowBox[{"Take", "[", 
         RowBox[{"list", ",", 
          RowBox[{"-", 
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Length", "[", "list", "]"}], "-", "pEnd"}], ")"}]}]}], 
         "]"}], ",", 
        RowBox[{"{", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", 
      RowBox[{"{", 
       RowBox[{"before", ",", "sublist", ",", "after"}], "}"}], "]"}], 
     ";"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.716755626841255*^9, 3.71675564957684*^9}, {
  3.716755691919466*^9, 3.716755738325122*^9}, {3.716755770236972*^9, 
  3.7167558058409567`*^9}, {3.716755857230873*^9, 3.71675589026693*^9}, {
  3.716756013907474*^9, 3.7167560387692833`*^9}, {3.716756596418585*^9, 
  3.716756703999814*^9}, {3.716756751100923*^9, 3.716756788613756*^9}, {
  3.716756853748619*^9, 3.7167568889759007`*^9}, {3.717788553222245*^9, 
  3.717788555257744*^9}}],

Cell["\<\
Generate some interesting candidates. LCSN is run on a random subset of the \
interactions. This is repeated a number of times, and then duplicates are \
deleted.\
\>", "Text",
 CellChangeTimes->{{3.716074172916205*^9, 3.716074245017625*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"LCSNCandidates", "[", "ias_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"iasizes", ",", 
      RowBox[{"significantFraction", "=", "0.1"}], ",", "significantNumber", 
      ",", 
      RowBox[{"howManyTries", "=", "20"}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"iasizes", "=", 
      RowBox[{"Map", "[", 
       RowBox[{"SizesIA", ",", "ias"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"significantNumber", "=", 
      RowBox[{"significantFraction", " ", "*", " ", 
       RowBox[{"Length", "[", "iasizes", "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"DeleteDuplicates", "[", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"LCSN", "[", 
         RowBox[{"RandomChoice", "[", 
          RowBox[{"iasizes", ",", "significantNumber"}], "]"}], "]"}], ",", 
        "howManyTries"}], "]"}], "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.716055181658525*^9, 3.716055193999357*^9}, {
  3.716055262426803*^9, 3.716055321365624*^9}, {3.7160561633954773`*^9, 
  3.7160562072329884`*^9}, {3.716056249413261*^9, 3.7160562524807043`*^9}, {
  3.716057486231584*^9, 3.716057564212061*^9}, {3.716057609155224*^9, 
  3.7160576151684523`*^9}}],

Cell["\<\
Look at a bunch of interactions and try to gain insight from the size \
sequences.\
\>", "Text",
 CellChangeTimes->{{3.716074138473068*^9, 3.716074164610276*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"LCSNStudySizes", "[", "ias_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "iasizes", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"iasizes", "=", 
      RowBox[{"SizesIA", "/@", "ias"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Print", "[", 
      RowBox[{"\"\<Length frequencies: \>\"", "<>", 
       RowBox[{"ToString", "[", 
        RowBox[{"Tally", "[", 
         RowBox[{"Length", "/@", "iasizes"}], "]"}], "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Print", "[", 
      RowBox[{"\"\<Longest sublist common to all: \>\"", "<>", 
       RowBox[{"ToString", "[", 
        RowBox[{"LCSN", "[", "iasizes", "]"}], "]"}]}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7160519375214453`*^9, 3.716051944332306*^9}, {
  3.7160520109034843`*^9, 3.716052018372966*^9}, {3.716052329274274*^9, 
  3.716052335229273*^9}, {3.716052532552484*^9, 3.7160526152741623`*^9}, {
  3.7160530068937597`*^9, 3.716053013746523*^9}, {3.716053045507347*^9, 
  3.716053064017975*^9}}],

Cell["\<\
Return all (maximally non-overlapping) common subsequences with at least the \
given number of elements.\
\>", "Text",
 CellChangeTimes->{{3.717788890143887*^9, 3.7177889092255697`*^9}, {
  3.717789113355125*^9, 3.717789118497293*^9}, {3.717859282755763*^9, 
  3.717859373662745*^9}, {3.7178594971841097`*^9, 3.717859505169464*^9}, {
  3.7178596718096952`*^9, 3.717859673889328*^9}, {3.717859752843749*^9, 
  3.717859762558709*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"AllCommonSubsequencesWithLengthAtLeast", "[", 
   RowBox[{"list1_", ",", "list2_", ",", "minLength_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"length1", "=", 
       RowBox[{"Length", "@", "list1"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"length2", "=", 
       RowBox[{"Length", "@", "list2"}]}], ",", "\[IndentingNewLine]", "lcs", 
      ",", "lcsPos", ",", "before1", ",", "dummy1", ",", "after1", ",", 
      "before2", ",", "dummy2", ",", "after2"}], "\[IndentingNewLine]", "}"}],
     ",", "\[IndentingNewLine]", 
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"length1", "<", "minLength"}], "\[Or]", 
       RowBox[{"length2", "<", "minLength"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"{", "}"}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"lcs", "=", 
        RowBox[{"LongestCommonSubsequence", "[", 
         RowBox[{"list1", ",", "list2"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "lcs", "]"}], "<", "minLength"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Return", "[", 
          RowBox[{"{", "}"}], "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{"before1", ",", "dummy1", ",", "after1"}], "}"}], "=", 
           RowBox[{"SplitBySublist", "[", 
            RowBox[{"list1", ",", "lcs"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"before2", ",", "dummy2", ",", "after2"}], "}"}], "=", 
           RowBox[{"SplitBySublist", "[", 
            RowBox[{"list2", ",", "lcs"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"Return", "[", "\[IndentingNewLine]", 
           RowBox[{"Join", "[", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"{", "lcs", "}"}], ",", "\[IndentingNewLine]", 
             RowBox[{"AllCommonSubsequencesWithLengthAtLeast", "[", 
              RowBox[{"before1", ",", "before2", ",", "minLength"}], "]"}], 
             ",", "\[IndentingNewLine]", 
             RowBox[{"AllCommonSubsequencesWithLengthAtLeast", "[", 
              RowBox[{"after1", ",", "after2", ",", "minLength"}], "]"}]}], 
            "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", "]"}]}]}], 
        "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.71778589385996*^9, 3.717785938686623*^9}, {
  3.71778614036209*^9, 3.7177862059701443`*^9}, {3.7177884436641273`*^9, 
  3.717788512081347*^9}, {3.717788588722033*^9, 3.7177886101100883`*^9}, {
  3.7177886743822613`*^9, 3.7177887517301693`*^9}, {3.717788782889666*^9, 
  3.717788856746088*^9}, {3.717788932651643*^9, 3.7177890586119223`*^9}}],

Cell["\<\
Given a list and a number (typically 1448), return a list of lists that don\
\[CloseCurlyQuote]t contain anything greater than that number, which, if \
concatenated together, would yield a list equal to the original list after \
deletion of all elements greater than the given number. For example, \
SplitListByAnyNumberGreaterThan[{8, 7, 300, 5, 6, 7, 100, 8, 9, 200}] returns \
{{8, 7}, {5, 6, 7}, {8, 9}}.
PEND: Should we be using 1448 or 1447 here? In other words, < or \[LessEqual] \
? Remember to double-check, as that could be nontrivial.\
\>", "Text",
 CellChangeTimes->{{3.717854822821472*^9, 3.717855048208683*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"SplitListByAnyNumberGreaterThan", "[", 
   RowBox[{"list_", ",", "n_"}], "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"Select", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Map", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"Select", "[", 
        RowBox[{"#", ",", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"#", "\[LessEqual]", "n"}], "&"}], ")"}]}], "]"}], "&"}], 
      ",", "\[IndentingNewLine]", 
      RowBox[{"Split", "[", 
       RowBox[{"list", ",", 
        RowBox[{
         RowBox[{"#", "\[LessEqual]", "n"}], "&"}]}], "]"}]}], 
     "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"Length", "[", "#", "]"}], ">", "0"}], "&"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.717851255247342*^9, 3.717851295421773*^9}, {
  3.717851367570339*^9, 3.7178514230904713`*^9}, {3.7178550640869703`*^9, 
  3.717855108250588*^9}, {3.717855150776582*^9, 3.717855164821494*^9}, {
  3.717855198099106*^9, 3.71785527923385*^9}}],

Cell["\<\
This is an attempt to find common (adjacent) subsequences of at least a \
certain length between two lists of packet sizes.
First, sizes are merged whenever streaks of 1448 are found (see SizesMergedIA).
Then we find all common subsequences of at least minLength elements using a \
recursive algorithm.
Then we split those whenever a greater-than-1448 super-element is \
encountered, removing such elements and any empty lists generated.
Then we flatten the result at level 1 so that a list of sublists is returned.
Finally, we filter by minLength again, since the final sublists could indeed \
be shorter than that.

PEND: This is far from perfect. It\[CloseCurlyQuote]s by no means a \
guaranteed-exhaustive result, but can be interesting as a way to generate \
some candidates.\
\>", "Text",
 CellChangeTimes->{{3.717855614260749*^9, 3.717855674910665*^9}, {
  3.7178557500338583`*^9, 3.717855946045923*^9}, {3.7178560290367203`*^9, 
  3.7178563243202143`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"FindCommonSizeSubsequencesAttempt1", "[", 
   RowBox[{"ia1_", ",", "ia2_", ",", "minLength_"}], "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"Select", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Flatten", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Map", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"SplitListByAnyNumberGreaterThan", "[", 
          RowBox[{"#", ",", "1448"}], "]"}], "&"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"AllCommonSubsequencesWithLengthAtLeast", "[", 
         RowBox[{
          RowBox[{"SizesMergedIA", "@", "ia1"}], ",", 
          RowBox[{"SizesMergedIA", "@", "ia2"}], ",", "minLength"}], "]"}]}], 
       "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", "1"}], 
     "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"Length", "[", "#", "]"}], "\[GreaterEqual]", "minLength"}], 
     "&"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.717851305514678*^9, 3.7178513096262627`*^9}, {
  3.717851427598529*^9, 3.717851479927289*^9}, {3.717855315689313*^9, 
  3.7178553842004766`*^9}, {3.717855416908019*^9, 3.717855426179229*^9}, {
  3.717855503333953*^9, 3.7178555077623253`*^9}, {3.7178555519767942`*^9, 
  3.717855572056053*^9}, {3.717855603795381*^9, 3.717855610289322*^9}, {
  3.717855905485882*^9, 3.717855911396018*^9}, {3.7178559924033422`*^9, 
  3.717856011342552*^9}, {3.7178563305748463`*^9, 3.717856348663533*^9}}],

Cell["\<\
This is an attempt to generate candidates using the above.
NOTE: We are using SizesMergedIA to search for candidates, but SizesIA for \
ensuring that they are in almostAll. Should make no difference, right?

PEND: This is sometimes failing to find a good candidate due to the abundance \
of an even longer candidate. For example, in a dataset from airplan_3, \
{30,11,0,0,216} appears in 650 of 1000 ias, but {11,0,0,216} (without the 30) \
appears in all 1000 ias. It\[CloseCurlyQuote]s possible for the random \
samplings to always pick {30,11,0,0,216}, never pick {11,0,0,216}, and then \
rule out {30,11,0,0,216} due to being present in too low a fraction of the \
ias, therefore failing to spot that {11,0,0,216} is in all of them.

PEND: Another more mysterious case: {198,6,53,586,373,37,282,341} appears on \
997 of 1000 ias, whereas {6,53,586,373,37,282,341} (without the 198) appears \
in all 1000 ias. Why do we sometimes get neither, using 0.95 as \
almostAllFraction??\
\>", "Text",
 CellChangeTimes->{{3.7178571346885557`*^9, 3.71785715358545*^9}, {
  3.717857326973248*^9, 3.7178573423947277`*^9}, {3.717858299837088*^9, 
  3.717858337612442*^9}, {3.7178585217073298`*^9, 3.717858618251001*^9}, {
  3.717859131316553*^9, 3.717859269629013*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"FindCommonSizeSubsequencesAttempt1Candidates", "[", "ias_", "]"}], 
  ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"almostAllFraction", "=", "0.95"}], ",", "almostAll", ",", 
      RowBox[{"howManyTries", "=", "50"}], ",", 
      RowBox[{"minLength", "=", "3"}], ",", "cands", ",", "iasizes"}], "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"almostAll", "=", 
      RowBox[{"almostAllFraction", " ", "*", " ", 
       RowBox[{"Length", "[", "ias", "]"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"cands", "=", 
      RowBox[{"DeleteDuplicates", "[", "\[IndentingNewLine]", 
       RowBox[{"Flatten", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Table", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
           "FindCommonSizeSubsequencesAttempt1", "[", "\[IndentingNewLine]", 
            RowBox[{"Sequence", "@@", 
             RowBox[{"Join", "[", 
              RowBox[{
               RowBox[{"RandomSample", "[", 
                RowBox[{"ias", ",", "2"}], "]"}], ",", 
               RowBox[{"{", "minLength", "}"}]}], "]"}]}], 
            "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
           "howManyTries"}], "\[IndentingNewLine]", "]"}], 
         "\[IndentingNewLine]", ",", "\[IndentingNewLine]", "1"}], 
        "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"iasizes", "=", 
      RowBox[{"Map", "[", 
       RowBox[{"SizesIA", ",", "ias"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Sort", "@", 
      RowBox[{"Select", "[", "\[IndentingNewLine]", 
       RowBox[{"cands", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"HowManyContainSublist", "[", 
           RowBox[{"#", ",", "iasizes"}], "]"}], "\[GreaterEqual]", 
          "almostAll"}], "&"}]}], "\[IndentingNewLine]", "]"}]}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.717856884955255*^9, 3.7178569908935223`*^9}, {
  3.717857021177526*^9, 3.71785702953692*^9}, {3.717857085388052*^9, 
  3.71785712524715*^9}, {3.717857212581979*^9, 3.7178572425989017`*^9}, {
  3.717857347051268*^9, 3.7178573656327333`*^9}, {3.717857577874268*^9, 
  3.717857622491953*^9}, {3.717857653531365*^9, 3.717857666246999*^9}, {
  3.717857761103469*^9, 3.7178577665833282`*^9}, {3.717857797009199*^9, 
  3.7178577975974703`*^9}, {3.717857864329442*^9, 3.717857887168976*^9}, {
  3.717858094073086*^9, 3.717858100596992*^9}, {3.717858296112576*^9, 
  3.717858296946417*^9}}],

Cell["\<\
Let\[CloseCurlyQuote]s retry, now using all sublists of minLength within each \
maximally-long candidate. This could get expensive but shouldn\
\[CloseCurlyQuote]t miss candidates so often.\
\>", "Text",
 CellChangeTimes->{{3.717859787898369*^9, 3.717859821728182*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"AllSubsequencesOfLengthAtLeast", "[", 
   RowBox[{"list_", ",", "minLength_"}], "]"}], ":=", 
  RowBox[{"Subsequences", "[", 
   RowBox[{"list", ",", 
    RowBox[{"{", 
     RowBox[{"minLength", ",", "\[Infinity]"}], "}"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.717859850363043*^9, 3.717859889092863*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TimesIA", "[", "a", "]"}]], "Input",
 CellChangeTimes->{{3.716323042880434*^9, 3.716323047667124*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.`", ",", "0.01327991485595703125`18.123195290566144", ",", 
   "0.013545989990234375`18.131810750349956", ",", 
   "0.0290470123291015625`18.463101469059836", ",", 
   "0.04120898246765136719`18.614991891056015", ",", 
   "0.04175281524658203125`18.620685763767778", ",", 
   "0.11443281173706054688`19.058550569152644", ",", 
   "0.11447882652282714844`19.058725168993572", ",", 
   "0.1162109375`19.06524700475272", ",", 
   "0.12178301811218261719`19.085586732842373", ",", 
   "0.12293100357055664062`19.089661427081353", ",", 
   "0.12403893470764160156`19.09355802769928", ",", 
   "0.1310138702392578125`19.11731727618628", ",", 
   "0.13937687873840332031`19.14419073452836", ",", 
   "0.14272093772888183594`19.15448769051538", ",", 
   "0.15435385704040527344`19.188517486234282", ",", 
   "0.15742897987365722656`19.19708468126786", ",", 
   "0.1590938568115234375`19.201653410291676", ",", 
   "0.1604938507080078125`19.20545839714749", ",", 
   "0.16049385170800781197`19.205458399853477"}], "}"}]], "Output",
 CellChangeTimes->{{3.716323044762369*^9, 3.7163230479031963`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SizesIA", "[", "a", "]"}]], "Input",
 CellChangeTimes->{{3.716323656012949*^9, 3.716323657689707*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "112", ",", "0", ",", "0", ",", "192", ",", "778", ",", "230", ",", "6", 
   ",", "85", ",", "277", ",", "213", ",", "69", ",", "117", ",", "117", ",", 
   "117", ",", "117", ",", "117", ",", "437", ",", "0", ",", "69", ",", "0"}],
   "}"}]], "Output",
 CellChangeTimes->{3.716323657917248*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SizesIA", "[", "b", "]"}]], "Input",
 CellChangeTimes->{{3.71632366044106*^9, 3.716323662068758*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "108", ",", "0", ",", "0", ",", "192", ",", "778", ",", "230", ",", "6", 
   ",", "85", ",", "277", ",", "213", ",", "69", ",", "117", ",", "117", ",", 
   "117", ",", "117", ",", "117", ",", "437", ",", "0", ",", "69", ",", "0"}],
   "}"}]], "Output",
 CellChangeTimes->{3.716323662355176*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Riffle", "[", 
  RowBox[{
   RowBox[{"SizesIA", "[", "a", "]"}], ",", 
   RowBox[{"TimesIA", "[", "a", "]"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.716323721127121*^9, 3.716323729453409*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "112", ",", "0.`", ",", "0", ",", 
   "0.01327991485595703125`18.123195290566144", ",", "0", ",", 
   "0.013545989990234375`18.131810750349956", ",", "192", ",", 
   "0.0290470123291015625`18.463101469059836", ",", "778", ",", 
   "0.04120898246765136719`18.614991891056015", ",", "230", ",", 
   "0.04175281524658203125`18.620685763767778", ",", "6", ",", 
   "0.11443281173706054688`19.058550569152644", ",", "85", ",", 
   "0.11447882652282714844`19.058725168993572", ",", "277", ",", 
   "0.1162109375`19.06524700475272", ",", "213", ",", 
   "0.12178301811218261719`19.085586732842373", ",", "69", ",", 
   "0.12293100357055664062`19.089661427081353", ",", "117", ",", 
   "0.12403893470764160156`19.09355802769928", ",", "117", ",", 
   "0.1310138702392578125`19.11731727618628", ",", "117", ",", 
   "0.13937687873840332031`19.14419073452836", ",", "117", ",", 
   "0.14272093772888183594`19.15448769051538", ",", "117", ",", 
   "0.15435385704040527344`19.188517486234282", ",", "437", ",", 
   "0.15742897987365722656`19.19708468126786", ",", "0", ",", 
   "0.1590938568115234375`19.201653410291676", ",", "69", ",", 
   "0.1604938507080078125`19.20545839714749", ",", "0", ",", 
   "0.16049385170800781197`19.205458399853477"}], "}"}]], "Output",
 CellChangeTimes->{3.716323729641862*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"das", "=", 
  RowBox[{
   RowBox[{
    RowBox[{"TimesIA", "[", "a", "]"}], "[", 
    RowBox[{"[", 
     RowBox[{"2", ";;"}], "]"}], "]"}], "-", 
   RowBox[{
    RowBox[{"TimesIA", "[", "a", "]"}], "[", 
    RowBox[{"[", 
     RowBox[{";;", 
      RowBox[{"-", "2"}]}], "]"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.7163239697477694`*^9, 3.7163240371014347`*^9}, {
  3.716324071843584*^9, 3.716324078207532*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.013279914855957031`", ",", "0.00026607513427734375`16.123974294329994", 
   ",", "0.0155010223388671875`17.88933034647321", ",", 
   "0.01216197013854980469`17.783973937084852", ",", 
   "0.00054383277893066406`16.43443538500508", ",", 
   "0.07267999649047851563`18.560384902001104", ",", 
   "0.00004601478576660156`15.361867408736206", ",", 
   "0.00173211097717285156`16.937545718362472", ",", 
   "0.00557208061218261719`17.44498739514122", ",", 
   "0.00114798545837402343`16.758906391188987", ",", 
   "0.00110793113708496094`16.7434827722073", ",", 
   "0.00697493553161621094`17.542510202175173", ",", 
   "0.00836300849914550781`17.621332542485167", ",", 
   "0.00334405899047851563`17.223243934291197", ",", 
   "0.0116329193115234375`17.764658720078078", ",", 
   "0.00307512283325195312`17.18683247232976", ",", 
   "0.00166487693786621094`16.92035214176945", ",", 
   "0.001399993896484375`16.845096146636447", ",", 
   "9.9999999947`10.698970004105844*^-10"}], "}"}]], "Output",
 CellChangeTimes->{{3.716323985177589*^9, 3.7163240375162992`*^9}, 
   3.716324079047886*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", "das", "]"}]], "Input",
 CellChangeTimes->{{3.716324080209144*^9, 3.7163240816426687`*^9}}],

Cell[BoxData[
 GraphicsBox[{{}, {{}, 
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.012833333333333334`],
      AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJxTTMoPSmViYGAQBmIQDQEf7EFkg1G3PVTAAUwWGEL5HBD+/n4oXwDMT3jR
AeWLQOQvOUL5EmC+xuxNUL4MRF6BA8pXgPATY6B8JTD/wKUyKF8FIn8+CMpX
g/DVYXwNiPqJNVC+Fpi/QKERyteBqE/NhvL1IPzL7VC+AYRvmAnlG0L47tFQ
vhGE/yEMyjd20Nr9/zm3nqAdACbtJVQ=
      "]]}, {}}, {}, {}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0., 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  ImageSize->{748.94921875, Automatic},
  Method->{"CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0., 19.}, {0, 0.030005812644958496`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.716324081903277*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.716324017444223*^9, 3.716324036190373*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.`", ",", "0.01327991485595703125`18.123195290566144", ",", 
   "0.013545989990234375`18.131810750349956", ",", 
   "0.0290470123291015625`18.463101469059836", ",", 
   "0.04120898246765136719`18.614991891056015", ",", 
   "0.04175281524658203125`18.620685763767778", ",", 
   "0.11443281173706054688`19.058550569152644", ",", 
   "0.11447882652282714844`19.058725168993572", ",", 
   "0.1162109375`19.06524700475272", ",", 
   "0.12178301811218261719`19.085586732842373", ",", 
   "0.12293100357055664062`19.089661427081353", ",", 
   "0.12403893470764160156`19.09355802769928", ",", 
   "0.1310138702392578125`19.11731727618628", ",", 
   "0.13937687873840332031`19.14419073452836", ",", 
   "0.14272093772888183594`19.15448769051538", ",", 
   "0.15435385704040527344`19.188517486234282", ",", 
   "0.15742897987365722656`19.19708468126786", ",", 
   "0.1590938568115234375`19.201653410291676", ",", 
   "0.1604938507080078125`19.20545839714749"}], "}"}]], "Output",
 CellChangeTimes->{{3.716324022118074*^9, 3.7163240317082233`*^9}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"Quantas", "[", 
   RowBox[{"ia_", ",", "multipleOf_"}], "]"}], ":=", 
  RowBox[{"ia", "[", 
   RowBox[{"All", ",", 
    RowBox[{"{", 
     RowBox[{"\"\<time\>\"", "\[Rule]", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"Round", "[", 
         RowBox[{"#", ",", "multipleOf"}], "]"}], "&"}], ")"}]}], "}"}]}], 
   "]"}]}]], "Input",
 InitializationCell->True],

Cell["\<\
Given an interaction, return a Ri starting with Size where the sizes are \
interleaved with the deltas between packets.\
\>", "Text",
 CellChangeTimes->{{3.716845964520875*^9, 3.716846004654552*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"IA2Ri", "[", "ia_", "]"}], ":=", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"times", "=", 
       RowBox[{"TimesIA", "[", "ia", "]"}]}], ",", 
      RowBox[{"sizes", "=", 
       RowBox[{"SizesIA", "[", "ia", "]"}]}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"Ri", "[", "\[IndentingNewLine]", 
     RowBox[{"Size", ",", "\[IndentingNewLine]", 
      RowBox[{"Riffle", "[", "\[IndentingNewLine]", 
       RowBox[{"sizes", ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Drop", "[", 
          RowBox[{"times", ",", "1"}], "]"}], "-", 
         RowBox[{"Drop", "[", 
          RowBox[{"times", ",", 
           RowBox[{"-", "1"}]}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
     "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",\

 InitializationCell->True,
 CellChangeTimes->{{3.716844827840013*^9, 3.716844847717095*^9}, {
  3.716844937827038*^9, 3.716844966958207*^9}, {3.71684513985767*^9, 
  3.716845194521237*^9}, {3.716845231352992*^9, 3.7168452577603683`*^9}, {
  3.716845300246249*^9, 3.7168453013738623`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"TryAlign", "[", 
    RowBox[{"ia1_", ",", "ia2_", ",", "distfun_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "s1", ",", "s2", ",", "plot1", ",", "plot2", ",", "plot3", ",", "plot4",
        ",", "wis", ",", "imgsize"}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"s1", ",", "s2"}], "}"}], "=", 
       RowBox[{"SizesIA", "/@", 
        RowBox[{"{", 
         RowBox[{"ia1", ",", "ia2"}], "}"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"maxn", "=", 
       RowBox[{"Max", "[", 
        RowBox[{"Length", "/@", 
         RowBox[{"{", 
          RowBox[{"s1", ",", "s2"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"imgsize", "=", "Medium"}], ";", "\[IndentingNewLine]", 
      RowBox[{"plot1", "=", 
       RowBox[{"ListPlot", "[", 
        RowBox[{"s1", ",", 
         RowBox[{"PlotRange", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"1", ",", "maxn"}], "}"}], ",", "Automatic"}], "}"}]}], 
         ",", 
         RowBox[{"ImageSize", "\[Rule]", "imgsize"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"plot2", "=", 
       RowBox[{"ListPlot", "[", 
        RowBox[{"s2", ",", 
         RowBox[{"PlotRange", "\[Rule]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"1", ",", "maxn"}], "}"}], ",", "Automatic"}], "}"}]}], 
         ",", 
         RowBox[{"ImageSize", "\[Rule]", "imgsize"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"p1", ",", "p2"}], "}"}], "=", 
       RowBox[{"WarpingCorrespondence", "[", 
        RowBox[{"s1", ",", "s2", ",", 
         RowBox[{"DistanceFunction", "\[Rule]", "distfun"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"plot3", "=", 
       RowBox[{"ListPlot", "[", 
        RowBox[{
         RowBox[{"Transpose", "@", 
          RowBox[{"{", 
           RowBox[{"p1", ",", "p2"}], "}"}]}], ",", 
         RowBox[{"ImageSize", "\[Rule]", "imgsize"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"arrayplot", "=", 
       RowBox[{"ArrayPlot", "@", 
        RowBox[{"{", 
         RowBox[{"WhereIsStraightPath", "[", 
          RowBox[{"Transpose", "@", 
           RowBox[{"{", 
            RowBox[{"p1", ",", "p2"}], "}"}]}], "]"}], "}"}]}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"plot4", "=", 
       RowBox[{"ListPlot", "[", 
        RowBox[{
         RowBox[{"Transpose", "@", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"s1", "[", 
             RowBox[{"[", "p1", "]"}], "]"}], ",", 
            RowBox[{"s2", "[", 
             RowBox[{"[", "p2", "]"}], "]"}]}], "}"}]}], ",", 
         RowBox[{"ImageSize", "\[Rule]", "imgsize"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Column", "[", 
       RowBox[{"{", 
        RowBox[{
        "plot1", ",", "plot2", ",", "plot3", ",", "arrayplot", ",", "plot4"}],
         "}"}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"TryAlign", "[", 
   RowBox[{"ia1_", ",", "ia2_"}], "]"}], ":=", 
  RowBox[{"TryAlign", "[", 
   RowBox[{"ia1", ",", "ia2", ",", "Automatic"}], "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.718205874295682*^9, 3.71820616616654*^9}, {
  3.718206214860737*^9, 3.718206317742703*^9}, {3.718210357057975*^9, 
  3.718210399113797*^9}, {3.718397585346345*^9, 3.718397623303788*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ShowDiagonalZones", "[", "ias_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "ss", ",", "warpz", ",", "plotz", ",", "imgsize", ",", "npairs"}], "}"}],
     ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"ss", "=", 
      RowBox[{"SizesMergedIA", "/@", "ias"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"imgsize", "=", "Medium"}], ";", "\[IndentingNewLine]", 
     RowBox[{"npairs", "=", "70"}], ";", "\[IndentingNewLine]", 
     RowBox[{"warpz", "=", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"WarpingCorrespondence", "[", 
          RowBox[{
           RowBox[{"First", "@", "#"}], ",", 
           RowBox[{"Last", "@", "#"}]}], "]"}], "&"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{"RandomSample", "[", 
           RowBox[{"ss", ",", "2"}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "1", ",", "npairs"}], "}"}]}], "]"}]}], 
       "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"plotz", "=", 
      RowBox[{"Column", "[", "\[IndentingNewLine]", 
       RowBox[{"Table", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"ArrayPlot", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"WhereIsStraightPath", "[", 
             RowBox[{"Transpose", "@", 
              RowBox[{"warpz", "[", 
               RowBox[{"[", "j", "]"}], "]"}]}], "]"}], "}"}], ",", 
           RowBox[{"ImageSize", "\[Rule]", "imgsize"}], ",", 
           RowBox[{"Frame", "\[Rule]", "None"}], ",", 
           RowBox[{"ImagePadding", "\[Rule]", "None"}], ",", 
           RowBox[{"Mesh", "\[Rule]", "All"}], ",", 
           RowBox[{"PlotRangePadding", "\[Rule]", "0"}]}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{"j", ",", "1", ",", 
           RowBox[{"Length", "@", "warpz"}]}], "}"}]}], "\[IndentingNewLine]",
         "]"}], "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     "plotz"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.718210431594692*^9, 3.718210503983631*^9}, {
   3.7182105437402687`*^9, 3.7182106947004337`*^9}, {3.718210735240199*^9, 
   3.718210792374247*^9}, {3.718210828438896*^9, 3.7182108340699253`*^9}, {
   3.7182108773680363`*^9, 3.718210903706645*^9}, {3.718210944345594*^9, 
   3.718210998338027*^9}, {3.718211045988543*^9, 3.718211124730872*^9}, {
   3.718211160114892*^9, 3.718211168791543*^9}, {3.7182112031326447`*^9, 
   3.7182112060072527`*^9}, {3.718211347822208*^9, 3.718211350213242*^9}, {
   3.718456678713256*^9, 3.718456689776246*^9}, {3.718456769732608*^9, 
   3.718456796701701*^9}, {3.718456828802409*^9, 3.718456828957513*^9}, {
   3.718457341085047*^9, 3.718457356219244*^9}, 3.718998615493554*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"TryAlign", "[", 
   RowBox[{"ia1_", ",", "ia2_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "s1", ",", "s2", ",", "plot1", ",", "plot2", ",", "plot3", ",", "plot4", 
      ",", "wis", ",", "imgsize", ",", "arrayplot", ",", "maxn"}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"s1", ",", "s2"}], "}"}], "=", 
      RowBox[{"SizesIA", "/@", 
       RowBox[{"{", 
        RowBox[{"ia1", ",", "ia2"}], "}"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"maxn", "=", 
      RowBox[{"Max", "[", 
       RowBox[{"Length", "/@", 
        RowBox[{"{", 
         RowBox[{"s1", ",", "s2"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"imgsize", "=", "Medium"}], ";", "\[IndentingNewLine]", 
     RowBox[{"plot1", "=", 
      RowBox[{"ListPlot", "[", 
       RowBox[{"s1", ",", 
        RowBox[{"PlotRange", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "maxn"}], "}"}], ",", "Automatic"}], "}"}]}], 
        ",", 
        RowBox[{"ImageSize", "\[Rule]", "imgsize"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"plot2", "=", 
      RowBox[{"ListPlot", "[", 
       RowBox[{"s2", ",", 
        RowBox[{"PlotRange", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "maxn"}], "}"}], ",", "Automatic"}], "}"}]}], 
        ",", 
        RowBox[{"ImageSize", "\[Rule]", "imgsize"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"p1", ",", "p2"}], "}"}], "=", 
      RowBox[{"WarpingCorrespondence", "[", 
       RowBox[{"s1", ",", "s2"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"plot3", "=", 
      RowBox[{"ListPlot", "[", 
       RowBox[{
        RowBox[{"Transpose", "@", 
         RowBox[{"{", 
          RowBox[{"p1", ",", "p2"}], "}"}]}], ",", 
        RowBox[{"ImageSize", "\[Rule]", "imgsize"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"arrayplot", "=", 
      RowBox[{"ArrayPlot", "@", 
       RowBox[{"{", 
        RowBox[{"WhereIsStraightPath", "[", 
         RowBox[{"Transpose", "@", 
          RowBox[{"{", 
           RowBox[{"p1", ",", "p2"}], "}"}]}], "]"}], "}"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"plot4", "=", 
      RowBox[{"ListPlot", "[", 
       RowBox[{
        RowBox[{"Transpose", "@", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"s1", "[", 
            RowBox[{"[", "p1", "]"}], "]"}], ",", 
           RowBox[{"s2", "[", 
            RowBox[{"[", "p2", "]"}], "]"}]}], "}"}]}], ",", 
        RowBox[{"ImageSize", "\[Rule]", "imgsize"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Column", "[", 
      RowBox[{"{", 
       RowBox[{
       "plot1", ",", "plot2", ",", "plot3", ",", "arrayplot", ",", "plot4"}], 
       "}"}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.719331507606913*^9, 3.7193315101180267`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"TryAlignMerged", "[", 
   RowBox[{"ia1_", ",", "ia2_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "s1", ",", "s2", ",", "plot1", ",", "plot2", ",", "plot3", ",", "plot4", 
      ",", "wis", ",", "imgsize", ",", "arrayplot", ",", "maxn"}], "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"s1", ",", "s2"}], "}"}], "=", 
      RowBox[{"SizesMergedIA", "/@", 
       RowBox[{"{", 
        RowBox[{"ia1", ",", "ia2"}], "}"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Print", "[", 
      RowBox[{"s1", "-", "s2"}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"maxn", "=", 
      RowBox[{"Max", "[", 
       RowBox[{"Length", "/@", 
        RowBox[{"{", 
         RowBox[{"s1", ",", "s2"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"imgsize", "=", "Medium"}], ";", "\[IndentingNewLine]", 
     RowBox[{"plot1", "=", 
      RowBox[{"ListPlot", "[", 
       RowBox[{"s1", ",", 
        RowBox[{"PlotRange", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "maxn"}], "}"}], ",", "Automatic"}], "}"}]}], 
        ",", 
        RowBox[{"ImageSize", "\[Rule]", "imgsize"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"plot2", "=", 
      RowBox[{"ListPlot", "[", 
       RowBox[{"s2", ",", 
        RowBox[{"PlotRange", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "maxn"}], "}"}], ",", "Automatic"}], "}"}]}], 
        ",", 
        RowBox[{"ImageSize", "\[Rule]", "imgsize"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"p1", ",", "p2"}], "}"}], "=", 
      RowBox[{"WarpingCorrespondence", "[", 
       RowBox[{"s1", ",", "s2"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Print", "[", 
      RowBox[{"p1", "-", "p2"}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"plot3", "=", 
      RowBox[{"ListPlot", "[", 
       RowBox[{
        RowBox[{"Transpose", "@", 
         RowBox[{"{", 
          RowBox[{"p1", ",", "p2"}], "}"}]}], ",", 
        RowBox[{"ImageSize", "\[Rule]", "imgsize"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"arrayplot", "=", 
      RowBox[{"ArrayPlot", "@", 
       RowBox[{"{", 
        RowBox[{"WhereIsStraightPath", "[", 
         RowBox[{"Transpose", "@", 
          RowBox[{"{", 
           RowBox[{"p1", ",", "p2"}], "}"}]}], "]"}], "}"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"plot4", "=", 
      RowBox[{"ListPlot", "[", 
       RowBox[{
        RowBox[{"Transpose", "@", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"s1", "[", 
            RowBox[{"[", "p1", "]"}], "]"}], ",", 
           RowBox[{"s2", "[", 
            RowBox[{"[", "p2", "]"}], "]"}]}], "}"}]}], ",", 
        RowBox[{"ImageSize", "\[Rule]", "imgsize"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Column", "[", 
      RowBox[{"{", 
       RowBox[{
       "plot1", ",", "plot2", ",", "plot3", ",", "arrayplot", ",", "plot4"}], 
       "}"}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.718370368563652*^9, 3.71837037539791*^9}, {
  3.718371359055842*^9, 3.718371359433051*^9}, {3.718371460143815*^9, 
  3.718371469932823*^9}, {3.719331498449486*^9, 3.7193315014895897`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"SubwayCactus", "[", 
   RowBox[{"ia_", ",", "otherias_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"sia", ",", "soias"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"sia", "=", 
      RowBox[{"SizesIA", "@", "ia"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"soias", "=", 
      RowBox[{"SizesIA", "/@", "otherias"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Column", "[", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"ListPlot", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Map", "[", 
           RowBox[{"Transpose", ",", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"WarpingCorrespondence", "[", 
                RowBox[{"sia", ",", "#"}], "]"}], "&"}], ",", "soias"}], 
             "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"ImageSize", "\[Rule]", "Large"}], ",", 
          RowBox[{"AspectRatio", "\[Rule]", "1"}], ",", 
          RowBox[{"Joined", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
         "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"ListPlot", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"SizesIA", "[", "ia", "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"ImageSize", "\[Rule]", "Large"}], ",", 
          RowBox[{"AspectRatio", "\[Rule]", "1"}], ",", 
          RowBox[{"Filling", "\[Rule]", "Axis"}]}], "\[IndentingNewLine]", 
         "]"}]}], "\[IndentingNewLine]", "}"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.718975026499777*^9, 3.718975027591181*^9}, {
  3.7189763270794783`*^9, 3.7189763325646544`*^9}, {3.718980668326722*^9, 
  3.718980670183605*^9}, {3.719166675584756*^9, 3.719166676551421*^9}, {
  3.719331396911313*^9, 3.719331399597123*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"WhereIsStraightPath", "[", "path_", "]"}], ":=", 
  RowBox[{"Join", "[", 
   RowBox[{
    RowBox[{"{", "1", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Table", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"path", "[", 
           RowBox[{"[", 
            RowBox[{"i", "-", "1"}], "]"}], "]"}], "+", 
          RowBox[{"{", 
           RowBox[{"1", ",", "1"}], "}"}]}], "\[Equal]", 
         RowBox[{"path", "[", 
          RowBox[{"[", "i", "]"}], "]"}]}], ",", "\[IndentingNewLine]", "1", 
        ",", "\[IndentingNewLine]", "0"}], "\[IndentingNewLine]", "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"i", ",", "2", ",", 
        RowBox[{"Length", "[", "path", "]"}]}], "}"}]}], 
     "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",\

 InitializationCell->True,
 CellChangeTimes->{{3.7124578954840508`*^9, 3.7124578963727827`*^9}, {
  3.7124579319478827`*^9, 3.712457932242303*^9}, {3.718109010811846*^9, 
  3.718109084389373*^9}, {3.718115542611244*^9, 3.7181155462867393`*^9}, {
  3.718115625911364*^9, 3.718115676983604*^9}, {3.718116138812016*^9, 
  3.7181161520349617`*^9}}],

Cell["\<\
The following code is wrong!  It fails to capture the difference between \
\[OpenCurlyDoubleQuote]going up\[CloseCurlyDoubleQuote] and \
\[OpenCurlyDoubleQuote]going right\[CloseCurlyDoubleQuote].  Works well for \
concave paths but fails for convex ones, or vice versa.\
\>", "Text",
 CellChangeTimes->{{3.718993310282336*^9, 3.7189933515989523`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Wisper", "[", "path_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"curr", "=", "1"}], ",", 
      RowBox[{"lastDiagStart", "=", "1"}], ",", 
      RowBox[{"currInDiag", "=", "True"}], ",", "result"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"result", "=", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"While", "[", 
      RowBox[{
       RowBox[{"curr", "<", 
        RowBox[{"Length", "[", "path", "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"path", "[", 
             RowBox[{"[", "curr", "]"}], "]"}], "+", 
            RowBox[{"{", 
             RowBox[{"1", ",", "1"}], "}"}]}], "\[Equal]", 
           RowBox[{"path", "[", 
            RowBox[{"[", 
             RowBox[{"curr", "+", "1"}], "]"}], "]"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", "then", "*)"}], "\[IndentingNewLine]", "\t", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"Not", "[", "currInDiag", "]"}], ",", 
            "\[IndentingNewLine]", "\t", 
            RowBox[{"(*", "then", "*)"}], "\[IndentingNewLine]", "\t\t", 
            RowBox[{
             RowBox[{"currInDiag", "=", "True"}], ";", "\[IndentingNewLine]", 
             "\t\t", 
             RowBox[{"lastDiagStart", "=", "curr"}], ";"}]}], 
           "\[IndentingNewLine]", "\t", "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"(*", "else", "*)"}], "\[IndentingNewLine]", "\t", 
          RowBox[{"If", "[", 
           RowBox[{"currInDiag", ",", "\[IndentingNewLine]", "\t", 
            RowBox[{"(*", "then", "*)"}], "\[IndentingNewLine]", "\t\t", 
            RowBox[{
             RowBox[{"AppendTo", "[", 
              RowBox[{"result", ",", 
               RowBox[{"{", 
                RowBox[{"lastDiagStart", ",", "curr"}], "}"}]}], "]"}], ";", 
             "\[IndentingNewLine]", "\t\t", 
             RowBox[{"lastDiagStart", "=", "curr"}], ";", " ", 
             RowBox[{"(*", "hmmm", "*)"}], "\[IndentingNewLine]", "\t\t", 
             RowBox[{"currInDiag", "=", "False"}], ";"}]}], 
           "\[IndentingNewLine]", "\t", "]"}]}], "\[IndentingNewLine]", "]"}],
         ";", "\[IndentingNewLine]", 
        RowBox[{"curr", "++"}], ";"}]}], "\[IndentingNewLine]", "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "result", "]"}], ";"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.718983588524474*^9, 3.718983615393845*^9}, {
  3.718983736669969*^9, 3.7189837441690207`*^9}, {3.718983788071183*^9, 
  3.718983821689803*^9}, {3.718983853730866*^9, 3.718983857355833*^9}, {
  3.718983925139172*^9, 3.718984063668988*^9}, {3.7189841212264223`*^9, 
  3.718984166078124*^9}, {3.718984196759776*^9, 3.718984212383244*^9}, {
  3.718984260518545*^9, 3.718984260796206*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ExpandedWisper", "[", "path_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"ival", ",", "range"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"ival", "=", 
      RowBox[{"Interval", "@@", 
       RowBox[{"Wisper", "[", "path", "]"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"range", "=", 
      RowBox[{"Range", "[", 
       RowBox[{
        RowBox[{"Min", "[", "ival", "]"}], ",", 
        RowBox[{"Max", "[", "ival", "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Select", "[", 
      RowBox[{"range", ",", 
       RowBox[{
        RowBox[{"IntervalMemberQ", "[", 
         RowBox[{"ival", ",", "#"}], "]"}], "&"}]}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7189848260382423`*^9, 3.718984848819833*^9}, {
  3.718984980455418*^9, 3.718985000528304*^9}, {3.718985068394424*^9, 
  3.718985094257258*^9}, {3.718985247312305*^9, 3.718985269622932*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ExpandedWisperDense", "[", "path_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"ival", ",", "range"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"ival", "=", 
      RowBox[{"Interval", "@@", 
       RowBox[{"Wisper", "[", "path", "]"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"range", "=", 
      RowBox[{"Range", "[", 
       RowBox[{
        RowBox[{"Min", "[", "ival", "]"}], ",", 
        RowBox[{"Max", "[", "ival", "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"IntervalMemberQ", "[", 
           RowBox[{"ival", ",", "#"}], "]"}], ",", "1", ",", "0"}], "]"}], 
        "&"}], ",", "range"}], "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7189848260382423`*^9, 3.718984848819833*^9}, {
  3.718984980455418*^9, 3.718985000528304*^9}, {3.718985068394424*^9, 
  3.718985094257258*^9}, {3.718985247312305*^9, 3.718985269622932*^9}, {
  3.7189861232745047`*^9, 3.718986123805407*^9}, {3.718986154248342*^9, 
  3.718986159334487*^9}, {3.718986219554707*^9, 3.718986229007352*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Chu", "[", 
   RowBox[{"ia_", ",", "otherias_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"sia", ",", "soias", ",", "paths", ",", "wisps", ",", "ivals"}], 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"sia", "=", 
      RowBox[{"SizesIA", "@", "ia"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"soias", "=", 
      RowBox[{"SizesIA", "/@", "otherias"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"paths", "=", 
      RowBox[{"Map", "[", 
       RowBox[{"Transpose", ",", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"WarpingCorrespondence", "[", 
            RowBox[{"sia", ",", "#"}], "]"}], "&"}], ",", "soias"}], "]"}]}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"wisps", "=", 
      RowBox[{"Map", "[", 
       RowBox[{"Wisper", ",", "paths"}], "]"}]}], ";", "\[IndentingNewLine]", 
     
     RowBox[{"ivals", "=", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Interval", "@@", "#"}], "&"}], ",", "wisps"}], "]"}]}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7189763691844893`*^9, 3.718976388567556*^9}, {
  3.7189808008906097`*^9, 3.71898081353509*^9}, {3.7189809396547947`*^9, 
  3.718981014120661*^9}, {3.718984280740774*^9, 3.7189843059079447`*^9}, {
  3.718984355059701*^9, 3.71898437724223*^9}, {3.718984653725321*^9, 
  3.7189846550364323`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Foo", "[", 
   RowBox[{"ia_", ",", "otherias_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"sia", ",", "soias", ",", "paths", ",", "ewisps"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"sia", "=", 
      RowBox[{"SizesIA", "@", "ia"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"soias", "=", 
      RowBox[{"SizesIA", "/@", "otherias"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"paths", "=", 
      RowBox[{"Map", "[", 
       RowBox[{"Transpose", ",", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"WarpingCorrespondence", "[", 
            RowBox[{"sia", ",", "#"}], "]"}], "&"}], ",", "soias"}], "]"}]}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"ewisps", "=", 
      RowBox[{"Map", "[", 
       RowBox[{"ExpandedWisper", ",", "paths"}], "]"}]}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.718984778806087*^9, 3.718984799397099*^9}, {
  3.718985331097226*^9, 3.718985368993145*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"FooDense", "[", 
   RowBox[{"ia_", ",", "otherias_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"sia", ",", "soias", ",", "paths", ",", "ewisps"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"sia", "=", 
      RowBox[{"SizesIA", "@", "ia"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"soias", "=", 
      RowBox[{"SizesIA", "/@", "otherias"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"paths", "=", 
      RowBox[{"Map", "[", 
       RowBox[{"Transpose", ",", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"WarpingCorrespondence", "[", 
            RowBox[{"sia", ",", "#"}], "]"}], "&"}], ",", "soias"}], "]"}]}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"ewisps", "=", 
      RowBox[{"Map", "[", 
       RowBox[{"ExpandedWisperDense", ",", "paths"}], "]"}]}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.718984778806087*^9, 3.718984799397099*^9}, {
  3.718985331097226*^9, 3.718985368993145*^9}, {3.718986172226386*^9, 
  3.7189861789157887`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"NewWisper", "[", "path_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "tuples", ",", "runs", ",", "runlengths", ",", "prefixsums", ",", 
      "fromtopairs", ",", "boolsbetweenpoints"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
      RowBox[{"each", " ", "tuple", " ", "can", " ", "either", " ", "be", " ", 
       RowBox[{"{", 
        RowBox[{"1", ",", "1"}], "}"}]}], ",", " ", 
      RowBox[{"{", 
       RowBox[{"1", ",", "0"}], "}"}], ",", " ", 
      RowBox[{"or", " ", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}]}]}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"tuples", "=", 
      RowBox[{
       RowBox[{"Drop", "[", 
        RowBox[{"path", ",", "1"}], "]"}], "-", 
       RowBox[{"Drop", "[", 
        RowBox[{"path", ",", 
         RowBox[{"-", "1"}]}], "]"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "split", " ", "the", " ", "list", " ", "in", " ", "adjacent", " ", 
       "runs", " ", "of", " ", "identical", " ", "tuples"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"runs", "=", 
      RowBox[{"Split", "[", "tuples", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "remove", " ", "any", " ", "runs", " ", "of", " ", "vertical", " ", 
       "steps"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"runs", "=", 
      RowBox[{"Select", "[", 
       RowBox[{"runs", ",", 
        RowBox[{
         RowBox[{"Not", "[", 
          RowBox[{
           RowBox[{"First", "[", "#", "]"}], "\[Equal]", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}]}], "]"}], "&"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"replace", " ", 
       RowBox[{"{", 
        RowBox[{"1", ",", "1"}], "}"}], " ", "with", " ", "1", " ", "and", 
       " ", 
       RowBox[{"{", 
        RowBox[{"1", ",", "0"}], "}"}], " ", "with", " ", "0"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"runs", "=", 
      RowBox[{"Map", "[", 
       RowBox[{"Last", ",", "runs", ",", 
        RowBox[{"{", "2", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"runlengths", "=", 
      RowBox[{"Map", "[", 
       RowBox[{"Length", ",", "runs"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"generate", " ", "a", " ", 
       RowBox[{"{", 
        RowBox[{"from", ",", "to"}], "}"}], " ", "pair", " ", "for", " ", 
       "each", " ", "run"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{
       "remember", " ", "that", " ", "path", " ", "elements", " ", 
        "represent", " ", "the", " ", "spaces", " ", "between", " ", 
        "datapoints"}], ",", " ", 
       RowBox[{"not", " ", "the", " ", 
        RowBox[{"datapoints", "!"}]}]}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"prefixsums", "=", 
      RowBox[{"FoldList", "[", 
       RowBox[{"Plus", ",", "1", ",", "runlengths"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"fromtopairs", "=", 
      RowBox[{"Transpose", "@", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Drop", "[", 
          RowBox[{"prefixsums", ",", 
           RowBox[{"-", "1"}]}], "]"}], ",", 
         RowBox[{"Drop", "[", 
          RowBox[{"prefixsums", ",", "1"}], "]"}]}], "}"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"boolsbetweenpoints", "=", 
      RowBox[{"Flatten", "[", "runs", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", 
      RowBox[{"{", 
       RowBox[{"fromtopairs", ",", "boolsbetweenpoints"}], "}"}], "]"}], 
     ";"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.718993360079582*^9, 3.718993486060812*^9}, {
   3.718994673501997*^9, 3.718994726804324*^9}, 3.7189952266312447`*^9, {
   3.718995662328011*^9, 3.718995717440507*^9}, {3.7189964814299297`*^9, 
   3.7189965535667677`*^9}, {3.718996854620489*^9, 3.7189968940672283`*^9}, {
   3.718996926912199*^9, 3.71899698002085*^9}, {3.718997224836825*^9, 
   3.71899724099113*^9}, {3.718997432817669*^9, 3.718997436078599*^9}, {
   3.718997516361639*^9, 3.718997560397925*^9}, {3.718997640805943*^9, 
   3.718997678211466*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"NewViz", "[", 
   RowBox[{"ia_", ",", "otherias_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"sia", ",", "soias", ",", "paths", ",", "vectors"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"sia", "=", 
      RowBox[{"SizesIA", "@", "ia"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"soias", "=", 
      RowBox[{"SizesIA", "/@", "otherias"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"paths", "=", 
      RowBox[{"Map", "[", 
       RowBox[{"Transpose", ",", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"WarpingCorrespondence", "[", 
            RowBox[{"sia", ",", "#"}], "]"}], "&"}], ",", "soias"}], "]"}]}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"vectors", "=", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Last", "[", 
          RowBox[{"NewWisper", "[", "#", "]"}], "]"}], "&"}], ",", "paths"}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "vectors", "]"}], ";"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.718984778806087*^9, 3.718984799397099*^9}, {
  3.718985331097226*^9, 3.718985368993145*^9}, {3.718986172226386*^9, 
  3.7189861789157887`*^9}, {3.718997330714744*^9, 3.7189974107483997`*^9}, {
  3.7189976890534067`*^9, 3.7189977364884377`*^9}, {3.71899777205058*^9, 
  3.718997804375454*^9}}],

Cell[BoxData[
 RowBox[{"Column", "@", 
  RowBox[{"Map", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"ArrayPlot", "[", 
      RowBox[{
       RowBox[{"{", "#", "}"}], ",", 
       RowBox[{"Mesh", "->", "All"}], ",", 
       RowBox[{"ImageSize", "\[Rule]", "Large"}], ",", 
       RowBox[{"Frame", "\[Rule]", "None"}], ",", 
       RowBox[{"ImagePadding", "\[Rule]", "None"}]}], "]"}], "&"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"Table", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Total", "@", 
       RowBox[{"NewViz", "[", 
        RowBox[{
         RowBox[{"ias", "[", 
          RowBox[{"[", "i", "]"}], "]"}], ",", 
         RowBox[{"RandomSample", "[", 
          RowBox[{"ias", ",", "15"}], "]"}]}], "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", "20"}], "}"}]}], "\[IndentingNewLine]", 
     "]"}]}], "\[IndentingNewLine]", "]"}]}]], "Input"],

Cell[BoxData[
 RowBox[{
  RowBox[{"NewViz2", "[", 
   RowBox[{"ia_", ",", "otherias_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "sia", ",", "soias", ",", "paths", ",", "wisps", ",", "fromtos", ",", 
      "vectors"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"sia", "=", 
      RowBox[{"SizesIA", "@", "ia"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"soias", "=", 
      RowBox[{"SizesIA", "/@", "otherias"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"paths", "=", 
      RowBox[{"Map", "[", 
       RowBox[{"Transpose", ",", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"WarpingCorrespondence", "[", 
            RowBox[{"sia", ",", "#"}], "]"}], "&"}], ",", "soias"}], "]"}]}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"wisps", "=", 
      RowBox[{"Map", "[", 
       RowBox[{"NewWisper", ",", "paths"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"fromtos", "=", 
      RowBox[{"Map", "[", 
       RowBox[{"First", ",", "wisps"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"vectors", "=", 
      RowBox[{"Map", "[", 
       RowBox[{"Last", ",", "wisps"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", 
      RowBox[{"{", 
       RowBox[{"fromtos", ",", "vectors"}], "}"}], "]"}], ";"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.719000925168985*^9, {3.7190009602027807`*^9, 3.719001008972644*^9}}],

Cell["This is finally starting to yield something interesting:", "Text",
 CellChangeTimes->{{3.719064332336874*^9, 3.719064340977643*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"DiagonalDetector", "[", "path_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "tuples", ",", "runs", ",", "runlengths", ",", "prefixsums", ",", 
      "fromtopairs", ",", "fromtopairsruns", ",", "diagfromtopairsruns"}], 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"(*", 
     RowBox[{
      RowBox[{"each", " ", "tuple", " ", "can", " ", "either", " ", "be", " ", 
       RowBox[{"{", 
        RowBox[{"1", ",", "1"}], "}"}]}], ",", " ", 
      RowBox[{"{", 
       RowBox[{"1", ",", "0"}], "}"}], ",", " ", 
      RowBox[{"or", " ", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}]}]}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"tuples", "=", 
      RowBox[{
       RowBox[{"Drop", "[", 
        RowBox[{"path", ",", "1"}], "]"}], "-", 
       RowBox[{"Drop", "[", 
        RowBox[{"path", ",", 
         RowBox[{"-", "1"}]}], "]"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "split", " ", "the", " ", "list", " ", "in", " ", "adjacent", " ", 
       "runs", " ", "of", " ", "identical", " ", "tuples"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"runs", "=", 
      RowBox[{"Split", "[", "tuples", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "remove", " ", "any", " ", "runs", " ", "of", " ", "vertical", " ", 
       "steps"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"runs", "=", 
      RowBox[{"Select", "[", 
       RowBox[{"runs", ",", 
        RowBox[{
         RowBox[{"Not", "[", 
          RowBox[{
           RowBox[{"First", "[", "#", "]"}], "\[Equal]", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}]}], "]"}], "&"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"replace", " ", 
       RowBox[{"{", 
        RowBox[{"1", ",", "1"}], "}"}], " ", "with", " ", "1", " ", "and", 
       " ", 
       RowBox[{"{", 
        RowBox[{"1", ",", "0"}], "}"}], " ", "with", " ", "0"}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"runs", "=", 
      RowBox[{"Map", "[", 
       RowBox[{"Last", ",", "runs", ",", 
        RowBox[{"{", "2", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"runlengths", "=", 
      RowBox[{"Map", "[", 
       RowBox[{"Length", ",", "runs"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"generate", " ", "a", " ", 
       RowBox[{"{", 
        RowBox[{"from", ",", "to"}], "}"}], " ", "pair", " ", "for", " ", 
       "each", " ", "run"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{
       "remember", " ", "that", " ", "path", " ", "elements", " ", 
        "represent", " ", "the", " ", "spaces", " ", "between", " ", 
        "datapoints"}], ",", " ", 
       RowBox[{"not", " ", "the", " ", 
        RowBox[{"datapoints", "!"}]}]}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"prefixsums", "=", 
      RowBox[{"FoldList", "[", 
       RowBox[{"Plus", ",", "1", ",", "runlengths"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"fromtopairs", "=", 
      RowBox[{"Transpose", "@", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Drop", "[", 
          RowBox[{"prefixsums", ",", 
           RowBox[{"-", "1"}]}], "]"}], ",", 
         RowBox[{"Drop", "[", 
          RowBox[{"prefixsums", ",", "1"}], "]"}]}], "}"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"only", " ", "keep", " ", "the", " ", 
       RowBox[{"{", 
        RowBox[{"from", ",", "to"}], "}"}], " ", "pairs", " ", "that", " ", 
       "are", " ", "associated", " ", "with", " ", "a", " ", "nonzero", " ", 
       "run", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"i", ".", "e", "."}], ",", " ", 
         RowBox[{"diagonal", " ", "part"}]}], ")"}]}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"fromtopairsruns", "=", 
      RowBox[{"Transpose", "@", 
       RowBox[{"{", 
        RowBox[{"fromtopairs", ",", "runs"}], "}"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"diagfromtopairsruns", "=", 
      RowBox[{"Select", "[", 
       RowBox[{"fromtopairsruns", ",", 
        RowBox[{
         RowBox[{
          RowBox[{"First", "[", 
           RowBox[{"Last", "[", "#", "]"}], "]"}], "\[Equal]", "1"}], "&"}]}],
        "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", 
      RowBox[{"Map", "[", 
       RowBox[{"First", ",", "diagfromtopairsruns"}], "]"}], "]"}], ";"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.719004676506998*^9, 3.719004936628316*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"DiagonalCandidates", "[", 
   RowBox[{"ia_", ",", "otherias_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"sia", ",", "soias", ",", "paths", ",", "fromtos"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"sia", "=", 
      RowBox[{"SizesIA", "@", "ia"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"soias", "=", 
      RowBox[{"SizesIA", "/@", "otherias"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"paths", "=", 
      RowBox[{"Map", "[", 
       RowBox[{"Transpose", ",", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"WarpingCorrespondence", "[", 
            RowBox[{"sia", ",", "#"}], "]"}], "&"}], ",", "soias"}], "]"}]}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"fromtos", "=", 
      RowBox[{"Map", "[", 
       RowBox[{"DiagonalDetector", ",", "paths"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "fromtos", "]"}], ";"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.719000925168985*^9, {3.7190009602027807`*^9, 3.719001008972644*^9}, {
   3.719006274422886*^9, 3.7190063472609377`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"DiagonalCandidatesTime", "[", 
   RowBox[{"ia_", ",", "otherias_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"sia", ",", "soias", ",", "paths", ",", "fromtos"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"sia", "=", 
      RowBox[{"TimesIA", "@", "ia"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"soias", "=", 
      RowBox[{"TimesIA", "/@", "otherias"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"paths", "=", 
      RowBox[{"Map", "[", 
       RowBox[{"Transpose", ",", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"WarpingCorrespondence", "[", 
            RowBox[{"sia", ",", "#"}], "]"}], "&"}], ",", "soias"}], "]"}]}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"fromtos", "=", 
      RowBox[{"Map", "[", 
       RowBox[{"DiagonalDetector", ",", "paths"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "fromtos", "]"}], ";"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.719000925168985*^9, {3.7190009602027807`*^9, 3.719001008972644*^9}, {
   3.719006274422886*^9, 3.7190063472609377`*^9}, {3.7190670299454107`*^9, 
   3.719067038107243*^9}, 3.719068700836193*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", "old", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"ShowDiagonalCandidates", "[", 
    RowBox[{"ia_", ",", "otherias_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"allfromtos", ",", "commonest", ",", "xvalues"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"allfromtos", "=", 
       RowBox[{"Flatten", "[", 
        RowBox[{
         RowBox[{"DiagonalCandidates", "[", 
          RowBox[{"ia", ",", "otherias"}], "]"}], ",", "1"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"commonest", "=", 
       RowBox[{"CommonestAppearingAtLeast", "[", 
        RowBox[{
         RowBox[{"Flatten", "@", "allfromtos"}], ",", "0.01"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"xvalues", "=", 
       RowBox[{"Flatten", "[", "commonest", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"ListPlot", "[", 
       RowBox[{
        RowBox[{"SizesIA", "@", "ia"}], ",", 
        RowBox[{"GridLines", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"xvalues", ",", 
           RowBox[{"{", "}"}]}], "}"}]}]}], "]"}]}]}], "\[IndentingNewLine]", 
    "]"}]}]}]], "Input",
 CellChangeTimes->{{3.71900673037188*^9, 3.719006788500217*^9}, {
  3.719006958137026*^9, 3.7190069733389597`*^9}, {3.719007003450386*^9, 
  3.719007003838966*^9}, {3.71900716157754*^9, 3.7190072585999126`*^9}, {
  3.7190080970011787`*^9, 3.719008150382655*^9}, {3.719008404071383*^9, 
  3.719008433743206*^9}, {3.719008479232273*^9, 3.719008504085803*^9}, {
  3.719010295336329*^9, 3.719010297091457*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"CommonestAppearingAtLeast", "[", 
   RowBox[{"elems_", ",", "fraction_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"n2e", ",", "threshold"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"numAppearances", ",", "elem"}], "}"}], " ", "pairs", " ", 
      "sorted", " ", "by", " ", "numAppearances"}], " ", "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"n2e", "=", 
      RowBox[{"Reverse", "[", 
       RowBox[{"Sort", "[", 
        RowBox[{"Reverse", "/@", 
         RowBox[{"Tally", "[", "elems", "]"}]}], "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"return", " ", "elems", " ", 
       RowBox[{"s", ".", "t", ".", " ", "their"}], " ", "numAppearances", " ",
        "is", " ", "at", " ", "least", " ", "the", " ", "desired", " ", 
       "fraction", " ", "of", " ", "the", " ", "total"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"threshold", "=", 
      RowBox[{"fraction", "*", 
       RowBox[{"Length", "[", "elems", "]"}]}]}], ";", "\[IndentingNewLine]", 
     
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Last", "[", "#", "]"}], "&"}], ",", 
       RowBox[{"Select", "[", 
        RowBox[{"n2e", ",", 
         RowBox[{
          RowBox[{
           RowBox[{"First", "[", "#", "]"}], "\[GreaterEqual]", "threshold"}],
           "&"}]}], "]"}]}], "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.719007562924891*^9, 3.719007659710751*^9}, {
  3.719007704026093*^9, 3.7190077779373817`*^9}, {3.719007822484864*^9, 
  3.7190080119926233`*^9}, {3.719009256328668*^9, 3.7190092597011833`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"TallyNormalized", "[", "elems_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"tally", ",", "maxReps", ",", "normalizedTally"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{"total", " ", "incl", " ", "repetitions"}], " ", "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"tally", "=", 
      RowBox[{"Tally", "[", "elems", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"maxReps", "=", 
      RowBox[{"Max", "[", 
       RowBox[{"Last", "/@", "tally"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"normalizedTally", "=", 
      RowBox[{"MapAt", "[", 
       RowBox[{
        RowBox[{
         FractionBox["#", "maxReps"], "&"}], ",", "tally", ",", 
        RowBox[{"{", 
         RowBox[{"All", ",", "2"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "normalizedTally", "]"}], ";"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True],

Cell[BoxData[
 RowBox[{
  RowBox[{"VerticalGridlines", "[", "xvaluesWithReps_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "normalizedTally", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"normalizedTally", "=", 
      RowBox[{"TallyNormalized", "[", "xvaluesWithReps", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"First", "[", "#", "]"}], ",", 
          RowBox[{"AbsoluteThickness", "[", 
           RowBox[{"3", "*", 
            RowBox[{"Last", "[", "#", "]"}]}], "]"}]}], "}"}], "&"}], ",", 
       "\[IndentingNewLine]", "normalizedTally"}], "\[IndentingNewLine]", 
      "]"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.719009951826214*^9, 3.719010006301405*^9}, {
  3.719010043783688*^9, 3.719010156493578*^9}, {3.7190102318774977`*^9, 
  3.719010253120533*^9}, {3.719010390281851*^9, 3.7190103904743958`*^9}, {
  3.719010457894875*^9, 3.719010550285192*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ShowDiagonalCandidates", "[", 
   RowBox[{"ia_", ",", "otherias_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"allfromtos", ",", "verticalgridlinespec"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"allfromtos", "=", 
      RowBox[{"Flatten", "[", 
       RowBox[{
        RowBox[{"DiagonalCandidates", "[", 
         RowBox[{"ia", ",", "otherias"}], "]"}], ",", "1"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"verticalgridlinespec", "=", 
      RowBox[{"VerticalGridlines", "[", 
       RowBox[{"Flatten", "@", "allfromtos"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"ListPlot", "[", 
      RowBox[{
       RowBox[{"SizesIA", "@", "ia"}], ",", 
       RowBox[{"GridLines", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"verticalgridlinespec", ",", 
          RowBox[{"{", "}"}]}], "}"}]}]}], "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.71900673037188*^9, 3.719006788500217*^9}, {
  3.719006958137026*^9, 3.7190069733389597`*^9}, {3.719007003450386*^9, 
  3.719007003838966*^9}, {3.71900716157754*^9, 3.7190072585999126`*^9}, {
  3.7190080970011787`*^9, 3.719008150382655*^9}, {3.719008404071383*^9, 
  3.719008433743206*^9}, {3.719008479232273*^9, 3.719008504085803*^9}, {
  3.719010324574506*^9, 3.71901037041078*^9}}],

Cell["\<\
Testing negative/positive size representation; this incorporates some \
direction information into the size feature.
Packets whose source IP address ends with the provided suffix become negative.\
\>", "Text",
 CellChangeTimes->{{3.719065132797577*^9, 3.719065141460731*^9}, {
  3.719065216816289*^9, 3.719065275119293*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"PosNegIA", "[", 
   RowBox[{"ia_", ",", "senderSuffix_"}], "]"}], ":=", "\[IndentingNewLine]", 
  
  RowBox[{"ia", "[", 
   RowBox[{"All", ",", 
    RowBox[{
     RowBox[{"ReplacePart", "[", 
      RowBox[{"#", ",", 
       RowBox[{"{", 
        RowBox[{"\"\<size\>\"", "\[Rule]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"StringEndsQ", "[", 
            RowBox[{"#src", ",", "senderSuffix"}], "]"}], ",", 
           RowBox[{"-", "#size"}], ",", "#size"}], "]"}]}], "}"}]}], "]"}], 
     "&"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7190631993429003`*^9, 3.7190632180607243`*^9}, {
  3.719065150381886*^9, 3.719065164949853*^9}, {3.7190651955021*^9, 
  3.719065207599193*^9}, {3.719065251553939*^9, 3.719065282281178*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"RemoveZeroBytePacketsIA", "[", "ia_", "]"}], ":=", 
  RowBox[{"Select", "[", 
   RowBox[{"ia", ",", 
    RowBox[{
     RowBox[{
      RowBox[{"#", "[", "\"\<size\>\"", "]"}], ">", "0"}], "&"}]}], 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.719247984141944*^9, 3.719247994056975*^9}, {
  3.71924805338903*^9, 3.719248058688044*^9}, {3.719250698076634*^9, 
  3.719250698148156*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Cleanup", "[", 
   RowBox[{"ias_", ",", "srcSuffix_"}], "]"}], ":=", 
  RowBox[{"Map", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"PosNegIA", "[", 
      RowBox[{"#", ",", "srcSuffix"}], "]"}], "&"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"Map", "[", 
     RowBox[{"RemoveMarkersIA", ",", "\[IndentingNewLine]", 
      RowBox[{"Map", "[", "\[IndentingNewLine]", 
       RowBox[{"RemoveZeroBytePacketsIA", ",", "\[IndentingNewLine]", "ias"}],
        "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.719066651016548*^9, 3.719066704379356*^9}, {
  3.7192480909565363`*^9, 3.719248125925679*^9}, {3.719250116578972*^9, 
  3.719250140548129*^9}, {3.7192505541787453`*^9, 3.719250564042983*^9}}],

Cell["Doing some tests with {size, delta} DTWing:", "Text",
 CellChangeTimes->{{3.719068616819709*^9, 3.719068635398266*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"SizesAndDeltasIA", "[", "ia_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"sizes", ",", "times", ",", "deltas"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"sizes", "=", 
      RowBox[{"SizesIA", "[", "ia", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"times", "=", 
      RowBox[{"TimesIA", "[", "ia", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"deltas", "=", 
      RowBox[{"Join", "[", 
       RowBox[{
        RowBox[{"{", "0", "}"}], ",", 
        RowBox[{
         RowBox[{"Drop", "[", 
          RowBox[{"times", ",", "1"}], "]"}], "-", 
         RowBox[{"Drop", "[", 
          RowBox[{"times", ",", 
           RowBox[{"-", "1"}]}], "]"}]}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Return", "[", 
      RowBox[{"Transpose", "@", 
       RowBox[{"{", 
        RowBox[{"sizes", ",", "deltas"}], "}"}]}], "]"}], ";"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.719068468236305*^9, 3.7190686041346607`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"DiagonalCandidatesSizesAndDeltas", "[", 
   RowBox[{"ia_", ",", "otherias_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"sia", ",", "soias", ",", "paths", ",", "fromtos"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"sia", "=", 
      RowBox[{"SizesAndDeltasIA", "@", "ia"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"soias", "=", 
      RowBox[{"SizesAndDeltasIA", "/@", "otherias"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"paths", "=", 
      RowBox[{"Map", "[", 
       RowBox[{"Transpose", ",", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"WarpingCorrespondence", "[", 
            RowBox[{"sia", ",", "#"}], "]"}], "&"}], ",", "soias"}], "]"}]}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"fromtos", "=", 
      RowBox[{"Map", "[", 
       RowBox[{"DiagonalDetector", ",", "paths"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "fromtos", "]"}], ";"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.719068671923785*^9, 3.719068691392252*^9}}],

Cell[TextData[{
 "Given an interaction and a value like 0.01, discretize time down to that \
precision (multiples of 0.01, i.e., 100 slots per second) and return a list \
where each element is the number of events in the interaction that take place \
in that slot. The list\[CloseCurlyQuote]s length is equal to the number of \
slots needed. Empty slots are zeros.\n\n",
 StyleBox["NOTE: ",
  FontWeight->"Bold"],
 "We could return the size values instead, but in that case, what do you do \
when multiple values fall into the same slot? Add them up? Average them?\n",
 StyleBox["NOTE:",
  FontWeight->"Bold"],
 " 0 is not a valid list index, so the first bin must be numbered 1."
}], "Text",
 CellChangeTimes->{{3.719094001982847*^9, 3.719094206019744*^9}, {
  3.719094754917079*^9, 3.7190947834557133`*^9}, {3.719095720001658*^9, 
  3.719095749606946*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"QuantizeIAToNumberOfEvents", "[", 
   RowBox[{"ia_", ",", "multipleOf_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "qia", ",", "slotsPerBin", ",", "bns", ",", "tallyAsRules", ",", 
      "sparsearray", ",", "denselist"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"qia", "=", 
      RowBox[{"ia", "[", 
       RowBox[{"All", ",", 
        RowBox[{"{", 
         RowBox[{"\"\<time\>\"", "\[Rule]", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Floor", "[", 
             RowBox[{"#", ",", "multipleOf"}], "]"}], "&"}], ")"}]}], "}"}]}],
        "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"slotsPerBin", "=", 
      RowBox[{"1", "/", "multipleOf"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"bns", "=", 
      RowBox[{
       RowBox[{"Floor", "[", 
        RowBox[{
         RowBox[{"TimesIA", "[", "qia", "]"}], "*", "slotsPerBin"}], "]"}], 
       "+", "1"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"tallyAsRules", "=", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Thread", "[", 
          RowBox[{
           RowBox[{"First", "@", "#"}], "\[Rule]", 
           RowBox[{"Last", "@", "#"}]}], "]"}], "&"}], ",", 
        RowBox[{"Tally", "[", "bns", "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"sparsearray", "=", 
      RowBox[{"SparseArray", "[", "tallyAsRules", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"denselist", "=", 
      RowBox[{"Normal", "[", "sparsearray", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "denselist", "]"}], ";"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.719086517174477*^9, 3.719086546348206*^9}, {
  3.71908767446069*^9, 3.719087674737575*^9}, {3.7190880466989603`*^9, 
  3.71908805692306*^9}, {3.7190885978124933`*^9, 3.719088709857003*^9}, {
  3.719088766837282*^9, 3.7190888114527807`*^9}, {3.719088931201145*^9, 
  3.719088933440055*^9}, {3.719093902698823*^9, 3.719093997568865*^9}, {
  3.7190942139549828`*^9, 3.7190942442609797`*^9}, {3.7190946586117897`*^9, 
  3.719094659287314*^9}, {3.719094747828422*^9, 3.719094751946355*^9}, {
  3.7190955915441027`*^9, 3.719095610790588*^9}, {3.719095754544136*^9, 
  3.71909577718673*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ShowDiagonalCandidatesQuantizedTime", "[", 
   RowBox[{"ia_", ",", "otherias_", ",", "multipleOf_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"allfromtos", ",", "verticalgridlinespec"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"allfromtos", "=", 
      RowBox[{"Flatten", "[", 
       RowBox[{
        RowBox[{"DiagonalCandidatesQuantizedTime", "[", 
         RowBox[{"ia", ",", "otherias", ",", "multipleOf"}], "]"}], ",", 
        "1"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"verticalgridlinespec", "=", 
      RowBox[{"VerticalGridlines", "[", 
       RowBox[{"Flatten", "@", "allfromtos"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"ListPlot", "[", 
      RowBox[{
       RowBox[{"QuantizeIAToNumberOfEvents", "[", 
        RowBox[{"ia", ",", "multipleOf"}], "]"}], ",", 
       RowBox[{"GridLines", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"verticalgridlinespec", ",", 
          RowBox[{"{", "}"}]}], "}"}]}], ",", 
       RowBox[{"PlotRange", "\[Rule]", "Full"}]}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.71900673037188*^9, 3.719006788500217*^9}, {
  3.719006958137026*^9, 3.7190069733389597`*^9}, {3.719007003450386*^9, 
  3.719007003838966*^9}, {3.71900716157754*^9, 3.7190072585999126`*^9}, {
  3.7190080970011787`*^9, 3.719008150382655*^9}, {3.719008404071383*^9, 
  3.719008433743206*^9}, {3.719008479232273*^9, 3.719008504085803*^9}, {
  3.719010324574506*^9, 3.71901037041078*^9}, {3.719098495906061*^9, 
  3.7190985110830097`*^9}, {3.7190987368803463`*^9, 3.719098739726972*^9}, {
  3.719099001225677*^9, 3.719099003979641*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"DiagonalCandidatesQuantizedTime", "[", 
   RowBox[{"ia_", ",", "otherias_", ",", "multipleOf_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"sia", ",", "soias", ",", "paths", ",", "fromtos"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"sia", "=", 
      RowBox[{"QuantizeIAToNumberOfEvents", "[", 
       RowBox[{"ia", ",", "multipleOf"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"soias", "=", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"QuantizeIAToNumberOfEvents", "[", 
          RowBox[{"#", ",", "multipleOf"}], "]"}], "&"}], ",", "otherias"}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"paths", "=", 
      RowBox[{"Map", "[", 
       RowBox[{"Transpose", ",", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"WarpingCorrespondence", "[", 
            RowBox[{"sia", ",", "#"}], "]"}], "&"}], ",", "soias"}], "]"}]}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"fromtos", "=", 
      RowBox[{"Map", "[", 
       RowBox[{"DiagonalDetector", ",", "paths"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "fromtos", "]"}], ";"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.719000925168985*^9, {3.7190009602027807`*^9, 3.719001008972644*^9}, {
   3.719006274422886*^9, 3.7190063472609377`*^9}, {3.7190985323313427`*^9, 
   3.719098592920619*^9}}],

Cell["\<\
This is just another experiment in visualizing warping paths of many \
interactions against an ideal/chosen one.\
\>", "Text",
 CellChangeTimes->{{3.7191532718485937`*^9, 3.71915330242449*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ShowWarpingCorrespondencePathUsingSize", "[", 
   RowBox[{"idealIA_", ",", "otherIAs_"}], "]"}], ":=", 
  RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"maxi", ",", "otherIA"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"otherIA", "=", 
        RowBox[{"otherIAs", "[", 
         RowBox[{"[", "i", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"maxi", "=", 
        RowBox[{"Max", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Length", "[", "otherIA", "]"}], ",", 
           RowBox[{"Length", "[", "idealIA", "]"}]}], "}"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Column", "[", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"ListPlot", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"SizesIA", "@", "idealIA"}], ",", "\[IndentingNewLine]", 
            RowBox[{"ImageSize", "\[Rule]", "Medium"}], ",", 
            RowBox[{"Ticks", "\[Rule]", "None"}], ",", "\[IndentingNewLine]", 
            
            RowBox[{"GridLines", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Range", "[", "maxi", "]"}], ",", "None"}], "}"}]}], 
            ",", "\[IndentingNewLine]", 
            RowBox[{"PlotRange", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"1", ",", "maxi"}], "}"}], ",", "Automatic"}], 
              "}"}]}]}], "\[IndentingNewLine]", "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"ListPlot", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"Transpose", "@", 
             RowBox[{"WarpingCorrespondence", "[", 
              RowBox[{
               RowBox[{"SizesIA", "@", "idealIA"}], ",", 
               RowBox[{"SizesIA", "@", "otherIA"}]}], "]"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"ImageSize", "\[Rule]", "Medium"}], ",", 
            RowBox[{"Ticks", "\[Rule]", "None"}], ",", "\[IndentingNewLine]", 
            
            RowBox[{"GridLines", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Range", "[", "maxi", "]"}], ",", "None"}], "}"}]}], 
            ",", "\[IndentingNewLine]", 
            RowBox[{"PlotRange", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"1", ",", "maxi"}], "}"}], ",", "Automatic"}], 
              "}"}]}]}], "\[IndentingNewLine]", "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"ListPlot", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"SizesIA", "@", "otherIA"}], ",", "\[IndentingNewLine]", 
            RowBox[{"ImageSize", "\[Rule]", "Medium"}], ",", 
            RowBox[{"Ticks", "\[Rule]", "None"}], ",", "\[IndentingNewLine]", 
            
            RowBox[{"GridLines", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Range", "[", "maxi", "]"}], ",", "None"}], "}"}]}], 
            ",", "\[IndentingNewLine]", 
            RowBox[{"PlotRange", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"1", ",", "maxi"}], "}"}], ",", "Automatic"}], 
              "}"}]}]}], "\[IndentingNewLine]", "]"}]}], 
         "\[IndentingNewLine]", "}"}], "]"}]}]}], "\[IndentingNewLine]", 
     "]"}], ",", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{"i", ",", "1", ",", 
      RowBox[{"Length", "[", "ias", "]"}], ",", "1"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"ContinuousAction", "\[Rule]", "False"}]}], "\[IndentingNewLine]",
    "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.719153310627535*^9, 3.719153430908257*^9}, {
  3.7191534791058598`*^9, 3.719153482420183*^9}, {3.719153571629607*^9, 
  3.719153577277154*^9}, {3.719153786991024*^9, 3.7191538243591433`*^9}}],

Cell["\<\
Compute the DTW path of ia against each of the other ias, then detect \
diagonal zones. Return a 2D array where each row is from a different \
\[OpenCurlyDoubleQuote]other ia\[CloseCurlyDoubleQuote], and cells contain 0 \
if no diagonal, 1 if diagonal, and 2 if doubly diagonal (both start and end \
of a diagonal). Interestingly, the columns of value 2 seem to convey \
good-quality borders.\
\>", "Text",
 CellChangeTimes->{{3.719158586294773*^9, 3.719158681095296*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"DiagonalCandidatesV2", "[", 
   RowBox[{"ia_", ",", "otherias_"}], "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "denserangelistlists", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"denserangelistlists", "=", 
      RowBox[{"Map", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"Range", "[", 
          RowBox[{"Sequence", "@@", "#"}], "]"}], "&"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"DiagonalCandidates", "[", 
         RowBox[{"ia", ",", "otherias"}], "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"{", "2", "}"}]}], "\[IndentingNewLine]", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Table", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Normal", "@", 
        RowBox[{"SparseArray", "[", "\[IndentingNewLine]", 
         RowBox[{"Map", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"First", "@", "#"}], "\[Rule]", 
             RowBox[{"Last", "@", "#"}]}], "&"}], ",", "\[IndentingNewLine]", 
           
           RowBox[{"Tally", "@", 
            RowBox[{"Flatten", "[", 
             RowBox[{"denserangelistlists", "[", 
              RowBox[{"[", "j", "]"}], "]"}], "]"}]}]}], 
          "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", "]"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"j", ",", "1", ",", 
         RowBox[{"Length", "[", "denserangelistlists", "]"}]}], "}"}]}], 
      "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.719154846397709*^9, 3.719154894136714*^9}, {
  3.71915554991975*^9, 3.71915555826698*^9}, {3.7191557857304163`*^9, 
  3.719155841896862*^9}, {3.7191558874978724`*^9, 3.719156223199018*^9}, {
  3.719158439113161*^9, 3.719158446868123*^9}, {3.71915849409172*^9, 
  3.719158495398744*^9}, {3.7191585548669567`*^9, 3.719158555007805*^9}}],

Cell["\<\
Given a 2D array of values {0, 1, 2}, consider only the value 2, and add rows \
together. The result is a horizontal vector whose cell values express the \
number of 2s in that column. \
\>", "Text",
 CellChangeTimes->{{3.7191586943217287`*^9, 3.7191587647502832`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"NumberOfTwosPerColumn", "[", "mtx_", "]"}], ":=", 
  RowBox[{"Total", "[", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{"Function", "[", 
      RowBox[{
       RowBox[{"{", "row", "}"}], ",", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"#", "\[Equal]", "2"}], ",", "1", ",", "0"}], "]"}], 
          "&"}], ",", "row"}], "]"}]}], "]"}], ",", "mtx"}], "]"}], 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7191587751447277`*^9, 3.719158856459035*^9}, {
  3.719158903828673*^9, 3.7191589052118073`*^9}}],

Cell[TextData[{
 "Given a list of values, return another where any values that have a \
greater-than-them immediately adjacent neighbor are zeroed out.\n",
 StyleBox["PEND: ",
  FontWeight->"Bold"],
 "This is still pretty crappy! Iteration order matters (but shouldn\
\[CloseCurlyQuote]t), and thick groups are not handled well."
}], "Text",
 CellChangeTimes->{{3.719162870844956*^9, 3.719162948490081*^9}, {
  3.719163016027266*^9, 3.719163044330709*^9}, {3.719164694101235*^9, 
  3.719164723276329*^9}, {3.7191649622651167`*^9, 3.7191650036573877`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"RemoveWeakerNeighbors", "[", "xs_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Table", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"i", ">", "1"}], "&&", 
           RowBox[{
            RowBox[{"xs", "[", 
             RowBox[{"[", 
              RowBox[{"i", "-", "1"}], "]"}], "]"}], ">", 
            RowBox[{"xs", "[", 
             RowBox[{"[", "i", "]"}], "]"}]}]}], ")"}], "||", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"i", "<", 
            RowBox[{"Length", "[", "xs", "]"}]}], "&&", 
           RowBox[{
            RowBox[{"xs", "[", 
             RowBox[{"[", 
              RowBox[{"i", "+", "1"}], "]"}], "]"}], ">", 
            RowBox[{"xs", "[", 
             RowBox[{"[", "i", "]"}], "]"}]}]}], ")"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", "then", "*)"}], "\[IndentingNewLine]", "0", ",", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", "else", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"xs", "[", 
         RowBox[{"[", "i", "]"}], "]"}]}], "\[IndentingNewLine]", "]"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", 
        RowBox[{"Length", "[", "xs", "]"}]}], "}"}]}], "\[IndentingNewLine]", 
     "]"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.719163049887416*^9, 3.719163070876038*^9}, {
  3.7191631164646683`*^9, 3.7191631398789787`*^9}, {3.719164555206971*^9, 
  3.719164675849328*^9}}],

Cell[TextData[{
 "Given a 2D array of values {0, 1, 2}, return another where the positions \
where an interesting interval should end and another should begin are 1, and \
any others are 0.\n",
 StyleBox["PEND: ",
  FontWeight->"Bold"],
 "This is still very rough, and should be improved later on."
}], "Text",
 CellChangeTimes->{{3.719165012940248*^9, 3.719165058058799*^9}, {
  3.719165111595014*^9, 3.719165148718293*^9}, {3.719165461401504*^9, 
  3.719165480066613*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ChoppingPointsViaDiagonalCandidatesV2", "[", 
   RowBox[{"ia_", ",", "otherias_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "vec", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"vec", "=", 
      RowBox[{"RemoveWeakerNeighbors", "[", 
       RowBox[{"NumberOfTwosPerColumn", "[", 
        RowBox[{"DiagonalCandidatesV2", "[", 
         RowBox[{"ia", ",", "otherias"}], "]"}], "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"#", ">", "0"}], ",", "1", ",", "0"}], "]"}], "&"}], ",", 
       "vec"}], "]"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7191651762945642`*^9, 3.719165310621406*^9}, {
  3.71916545294945*^9, 3.719165453253693*^9}}],

Cell["\<\
Visualize the above. Note that this calls DiagonalCandidatesV2 twice \
(indirectly). Could be only once, but this is just for debugging.\
\>", "Text",
 CellChangeTimes->{{3.719158685067975*^9, 3.719158686931028*^9}, {
  3.7191655781492434`*^9, 3.719165601764428*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ShowDiagonalCandidatesV2", "[", 
   RowBox[{"ia_", ",", "otherias_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"width", "=", "400"}], ",", "diagCands", ",", 
      "numOfTwosPerColumn", ",", "choppingPoints"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"diagCands", "=", 
      RowBox[{"DiagonalCandidatesV2", "[", 
       RowBox[{"ia", ",", "otherias"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"numOfTwosPerColumn", "=", 
      RowBox[{"NumberOfTwosPerColumn", "[", "diagCands", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"choppingPoints", "=", 
      RowBox[{"ChoppingPointsViaDiagonalCandidatesV2", "[", 
       RowBox[{"ia", ",", "otherias"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Column", "[", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"ArrayPlot", "[", "\[IndentingNewLine]", 
         RowBox[{"diagCands", ",", "\[IndentingNewLine]", 
          RowBox[{"Frame", "\[Rule]", "None"}], ",", 
          RowBox[{"Mesh", "->", "All"}], ",", 
          RowBox[{"ImageSize", "\[Rule]", "width"}]}], "\[IndentingNewLine]", 
         "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"ArrayPlot", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", "numOfTwosPerColumn", "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Frame", "\[Rule]", "None"}], ",", 
          RowBox[{"Mesh", "\[Rule]", "All"}], ",", 
          RowBox[{"ImageSize", "\[Rule]", "width"}]}], "\[IndentingNewLine]", 
         "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"ArrayPlot", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", "choppingPoints", "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Frame", "\[Rule]", "None"}], ",", 
          RowBox[{"Mesh", "\[Rule]", "All"}], ",", 
          RowBox[{"ImageSize", "\[Rule]", "width"}]}], "\[IndentingNewLine]", 
         "]"}]}], "\[IndentingNewLine]", "}"}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.719154846397709*^9, 3.719154894136714*^9}, {
  3.71915554991975*^9, 3.71915555826698*^9}, {3.7191557857304163`*^9, 
  3.719155841896862*^9}, {3.7191558874978724`*^9, 3.719156223199018*^9}, {
  3.7191585199025507`*^9, 3.71915854213505*^9}, {3.719158930365629*^9, 
  3.719158995414716*^9}, {3.719159066678491*^9, 3.7191591484212227`*^9}, {
  3.7191593533591337`*^9, 3.719159353835301*^9}, {3.719165317744006*^9, 
  3.719165410185234*^9}, {3.719165488177062*^9, 3.719165507911849*^9}, {
  3.719165575253666*^9, 3.719165576585685*^9}, {3.7191665546726923`*^9, 
  3.719166555312791*^9}, {3.719166769475103*^9, 3.719166769684231*^9}}],

Cell["\<\
Run one-to-many simulation n times with m other ias per time, and get the \
chopping points for each.\
\>", "Text",
 CellChangeTimes->{{3.7191669897352123`*^9, 3.7191670415485573`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ChoppingPointsViaDiagonalCandidatesV2ManyTimes", "[", 
   RowBox[{"ias_", ",", "n_", ",", "m_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "allindices", ",", "chosenindices", ",", "idx", ",", "allbutidx"}], 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"allindices", "=", 
      RowBox[{"Range", "[", 
       RowBox[{"Length", "[", "ias", "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"chosenindices", "=", 
      RowBox[{"RandomSample", "[", 
       RowBox[{"allindices", ",", "n"}], "]"}]}], ";", "\[IndentingNewLine]", 
     
     RowBox[{"Table", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"idx", "=", 
         RowBox[{"chosenindices", "[", 
          RowBox[{"[", "i", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"allbutidx", "=", 
         RowBox[{"DeleteCases", "[", 
          RowBox[{"allindices", ",", "idx"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{
        "ChoppingPointsViaDiagonalCandidatesV2", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"ias", "[", 
           RowBox[{"[", " ", "idx", " ", "]"}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"ias", "[", 
           RowBox[{"[", " ", 
            RowBox[{"RandomSample", "[", 
             RowBox[{"allbutidx", ",", "m"}], "]"}], " ", "]"}], "]"}]}], 
         "\[IndentingNewLine]", "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", "n"}], "}"}]}], "\[IndentingNewLine]", 
      "]"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.71916705370403*^9, 3.719167083050742*^9}, {
  3.719167122705551*^9, 3.719167216632341*^9}, {3.719167372624126*^9, 
  3.719167425354403*^9}, {3.719167617443316*^9, 3.719167711613471*^9}, {
  3.7191677646569347`*^9, 3.719167792505229*^9}, {3.719167837268735*^9, 
  3.7191679377108994`*^9}}],

Cell["\<\
Run one-to-many simulation one time, and show the chopping points.\
\>", "Text",
 CellChangeTimes->{{3.719169988926277*^9, 3.719170011463977*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Fah", "[", 
   RowBox[{"ia_", ",", "ias_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "choppingPoints", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"choppingPoints", "=", 
      RowBox[{"Flatten", "[", "\[IndentingNewLine]", 
       RowBox[{"Position", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"ChoppingPointsViaDiagonalCandidatesV2", "[", 
          RowBox[{"ia", ",", "ias"}], "]"}], ",", "\[IndentingNewLine]", 
         "1"}], "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"ListPlot", "[", 
      RowBox[{
       RowBox[{"SizesIA", "[", "ia", "]"}], ",", 
       RowBox[{"GridLines", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"choppingPoints", ",", "None"}], "}"}]}]}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7191700258620367`*^9, 3.719170037454414*^9}, {
  3.71917006915617*^9, 3.719170167887562*^9}, {3.7191702304931717`*^9, 
  3.71917023150819*^9}, {3.719170265113617*^9, 3.7191702661067*^9}}],

Cell["\<\
Compute the DTW path of ia against each of the other ias, then detect \
diagonal zones. Return a 2D array where each row is from a different \
\[OpenCurlyDoubleQuote]other ia\[CloseCurlyDoubleQuote], and cells contain 0 \
if no diagonal, 1 if diagonal, and 2 if doubly diagonal (both start and end \
of a diagonal). Interestingly, the columns of value 2 seem to convey \
good-quality borders.\
\>", "Text",
 CellChangeTimes->{3.7191750908870993`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"DiagonalCandidatesV3", "[", 
   RowBox[{"ia_", ",", "otherias_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "listOfListsOfTuples", ",", "listOfListsOfValues", ",", 
      "listOfTallies"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"listOfListsOfTuples", "=", 
      RowBox[{"DiagonalCandidates", "[", 
       RowBox[{"ia", ",", "otherias"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"listOfListsOfValues", "=", 
      RowBox[{"Flatten", "/@", "listOfListsOfTuples"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"listOfTallies", "=", 
      RowBox[{"Tally", "/@", "listOfListsOfValues"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Table", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Normal", "@", 
        RowBox[{"SparseArray", "[", "\[IndentingNewLine]", 
         RowBox[{"Map", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"First", "@", "#"}], "\[Rule]", 
             RowBox[{"Last", "@", "#"}]}], "&"}], ",", "\[IndentingNewLine]", 
           
           RowBox[{"listOfTallies", "[", 
            RowBox[{"[", "j", "]"}], "]"}]}], "\[IndentingNewLine]", "]"}], 
         "\[IndentingNewLine]", "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"j", ",", "1", ",", 
         RowBox[{"Length", "[", "listOfTallies", "]"}]}], "}"}]}], 
      "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.719154846397709*^9, 3.719154894136714*^9}, {
   3.71915554991975*^9, 3.71915555826698*^9}, {3.7191557857304163`*^9, 
   3.719155841896862*^9}, {3.7191558874978724`*^9, 3.719156223199018*^9}, {
   3.719158439113161*^9, 3.719158446868123*^9}, {3.71915849409172*^9, 
   3.719158495398744*^9}, {3.7191585548669567`*^9, 3.719158555007805*^9}, {
   3.7191750475876617`*^9, 3.719175047651376*^9}, 3.7191756646653547`*^9, {
   3.719175818090288*^9, 3.719175919058608*^9}, {3.719176209159614*^9, 
   3.7191762525181217`*^9}, {3.7191762981782722`*^9, 3.719176306880735*^9}}],

Cell["\<\
PEND: I had to add Round in order to avoid k/2 indices. Double check that!
PEND: FindPeaks can be improved!\
\>", "Text",
 CellChangeTimes->{{3.719182133670138*^9, 3.7191821564396544`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ShowDiagonalCandidatesV3", "[", 
   RowBox[{"ia_", ",", "otherias_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"width", "=", "500"}], ",", "\[IndentingNewLine]", 
      RowBox[{"gaussianScale", "=", "1"}], ",", 
      RowBox[{"minSharpness", "=", "2"}], ",", "\[IndentingNewLine]", 
      "diagCands", ",", "choppingPointCands", ",", "choppingPointIndices", 
      ",", "choppingPoints"}], "\[IndentingNewLine]", "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"diagCands", "=", 
      RowBox[{"DiagonalCandidatesV3", "[", 
       RowBox[{"ia", ",", "otherias"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"choppingPointCands", "=", 
      RowBox[{"Total", "[", "diagCands", "]"}]}], ";", "\[IndentingNewLine]", 
     
     RowBox[{"choppingPointIndices", "=", 
      RowBox[{"Map", "[", 
       RowBox[{"First", ",", 
        RowBox[{"Round", "@", 
         RowBox[{"FindPeaks", "[", 
          RowBox[{
          "choppingPointCands", ",", "gaussianScale", ",", "minSharpness"}], 
          "]"}]}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"choppingPoints", "=", 
      RowBox[{
       RowBox[{"SparseArray", "[", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"#", "\[Rule]", "1"}], "&"}], ",", 
          "choppingPointIndices"}], "]"}], "]"}], "//", "Normal"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Column", "[", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"ArrayPlot", "[", "\[IndentingNewLine]", 
         RowBox[{"diagCands", ",", "\[IndentingNewLine]", 
          RowBox[{"Frame", "\[Rule]", "None"}], ",", 
          RowBox[{"Mesh", "->", "All"}], ",", 
          RowBox[{"ImageSize", "\[Rule]", "width"}]}], "\[IndentingNewLine]", 
         "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"ArrayPlot", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", "choppingPointCands", "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Frame", "\[Rule]", "None"}], ",", 
          RowBox[{"Mesh", "\[Rule]", "All"}], ",", 
          RowBox[{"ImageSize", "\[Rule]", "width"}]}], "\[IndentingNewLine]", 
         "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"ArrayPlot", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", "choppingPoints", "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Frame", "\[Rule]", "None"}], ",", 
          RowBox[{"Mesh", "\[Rule]", "All"}], ",", 
          RowBox[{"ImageSize", "\[Rule]", "width"}]}], "\[IndentingNewLine]", 
         "]"}], ",", "\[IndentingNewLine]", "choppingPointCands", ",", 
        "\[IndentingNewLine]", "choppingPointIndices"}], 
       "\[IndentingNewLine]", "}"}], "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.719176464178568*^9, 3.7191765784824533`*^9}, {
  3.7191767766308393`*^9, 3.719176789631736*^9}, {3.7191768590453377`*^9, 
  3.719176942150951*^9}, {3.719176990921026*^9, 3.71917708068705*^9}, {
  3.719177136955163*^9, 3.719177188391841*^9}, {3.719177303608107*^9, 
  3.719177360142322*^9}, {3.719177403227497*^9, 3.719177449030604*^9}, {
  3.71917749487466*^9, 3.7191775101601753`*^9}, {3.719177633091772*^9, 
  3.719177649708952*^9}, {3.719177789128026*^9, 3.719177790759055*^9}, {
  3.719178477296955*^9, 3.7191784916187963`*^9}, {3.719178607321824*^9, 
  3.7191786188471603`*^9}, {3.719182136409758*^9, 3.719182137677905*^9}, {
  3.719254972238552*^9, 3.7192549758394337`*^9}, {3.7192678880230417`*^9, 
  3.719267888086731*^9}, {3.7192679473473663`*^9, 3.719267947468789*^9}, {
  3.719268072789023*^9, 3.719268074487792*^9}}],

Cell["\<\
PEND: I had to add Round in order to avoid k/2 indices. Double check that!
PEND: FindPeaks can be improved!\
\>", "Text",
 CellChangeTimes->{{3.719182054075795*^9, 3.719182081674295*^9}, {
  3.719182161715715*^9, 3.719182161901084*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ChoppingPointsViaDiagonalCandidatesV3", "[", 
   RowBox[{"ia_", ",", "otherias_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"gaussianScale", "=", "1"}], ",", 
      RowBox[{"minSharpness", "=", "2"}]}], "\[IndentingNewLine]", "}"}], ",",
     "\[IndentingNewLine]", 
    RowBox[{"Flatten", "@", 
     RowBox[{"Position", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Normal", "@", 
        RowBox[{"SparseArray", "[", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"#", "\[Rule]", "1"}], "&"}], ",", "\[IndentingNewLine]", 
           
           RowBox[{"Map", "[", 
            RowBox[{"First", ",", 
             RowBox[{"Round", "@", 
              RowBox[{"FindPeaks", "[", 
               RowBox[{
                RowBox[{"Total", "[", 
                 RowBox[{"DiagonalCandidatesV3", "[", 
                  RowBox[{"ia", ",", "otherias"}], "]"}], "]"}], ",", 
                "gaussianScale", ",", "minSharpness"}], "]"}]}]}], "]"}]}], 
          "\[IndentingNewLine]", "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
       "1"}], "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.719177758591021*^9, 3.719177772235545*^9}, {
  3.719177822253708*^9, 3.7191778849370613`*^9}, {3.7191779393976603`*^9, 
  3.719177991454485*^9}, {3.71917862669145*^9, 3.719178635807016*^9}, {
  3.7191820506567783`*^9, 3.719182051548542*^9}, {3.719267900941897*^9, 
  3.719267900988585*^9}, {3.719267953916287*^9, 3.7192679539796257`*^9}, {
  3.7192680651238117`*^9, 3.7192680706787033`*^9}}],

Cell["Given {3, 5, 7, 20}, return {{3, 5}, {5, 7}, {7, 20}}.", "Text",
 CellChangeTimes->{{3.7192360883540154`*^9, 3.719236121971904*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ChoppingPointsToPairs", "[", "xs_", "]"}], ":=", 
  RowBox[{"Transpose", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Drop", "[", 
      RowBox[{"xs", ",", 
       RowBox[{"-", "1"}]}], "]"}], ",", 
     RowBox[{"Drop", "[", 
      RowBox[{"xs", ",", "1"}], "]"}]}], "}"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.719236001012401*^9, 3.719236026358467*^9}, {
  3.71923606615065*^9, 3.7192360759531527`*^9}, {3.719236155432948*^9, 
  3.719236156067544*^9}, {3.71923636658806*^9, 3.71923636704195*^9}}],

Cell["Given {{3,5},{7,10}}, return {{3, 4, 5}, {7, 8, 9, 10}}.", "Text",
 CellChangeTimes->{{3.719236381222611*^9, 3.719236410095687*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"PairsToRanges", "[", "fromToPairs_", "]"}], ":=", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{"Apply", "[", "Range", "]"}], ",", "fromToPairs"}], 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7192364137851477`*^9, 3.719236460200059*^9}}],

Cell["Composition of the two above.", "Text",
 CellChangeTimes->{{3.719236515499818*^9, 3.719236520214572*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ChoppingPointsToRanges", "[", "xs_", "]"}], ":=", 
  RowBox[{"PairsToRanges", "@", 
   RowBox[{"ChoppingPointsToPairs", "[", "xs", "]"}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.719236497219648*^9, 3.7192365315482397`*^9}}],

Cell["\<\
Ratio of verbatim appearance of a pattern within a list of sequences.\
\>", "Text",
 CellChangeTimes->{{3.71923893129268*^9, 3.719238949702424*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"VerbatimPrevalence", "[", 
   RowBox[{"patt_", ",", "seqs_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "howManyContainIt", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"howManyContainIt", "=", 
      RowBox[{"Count", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"IsSublistQ", "[", 
           RowBox[{"patt", ",", "#"}], "]"}], "&"}], "/@", "seqs"}], ",", 
        "True"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", 
      RowBox[{"N", "[", 
       RowBox[{"howManyContainIt", "/", 
        RowBox[{"Length", "[", "seqs", "]"}]}], "]"}], "]"}], ";"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.719237756813546*^9, 3.719237847342287*^9}, {
  3.719237985487609*^9, 3.7192380410986767`*^9}, {3.719238090551971*^9, 
  3.719238092501882*^9}, {3.7192408224993143`*^9, 3.71924082325242*^9}}],

Cell["\<\
Let\[CloseCurlyQuote]s do some pattern analysis based on the diagonal \
candidates.\
\>", "Text",
 CellChangeTimes->{{3.719238961280266*^9, 3.719238971346108*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"PatternsInSizeViaDiagonalCandidatesV3", "[", 
   RowBox[{"ia_", ",", "otherias_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"ranges", ",", "patterns"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"ranges", "=", 
      RowBox[{"ChoppingPointsToRanges", "@", "\[IndentingNewLine]", 
       RowBox[{"ChoppingPointsViaDiagonalCandidatesV3", "[", 
        RowBox[{"ia", ",", "otherias"}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"patterns", "=", 
      RowBox[{"Map", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"SizesIA", "[", "ia", "]"}], "[", 
          RowBox[{"[", "#", "]"}], "]"}], "&"}], ",", "\[IndentingNewLine]", 
        "ranges"}], "\[IndentingNewLine]", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Return", "[", 
      RowBox[{
       RowBox[{"Function", "[", 
        RowBox[{
         RowBox[{"{", "patt", "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"patt", ",", 
           RowBox[{"VerbatimPrevalence", "[", 
            RowBox[{"patt", ",", 
             RowBox[{"SizesIA", "/@", "otherias"}]}], "]"}]}], "}"}]}], "]"}],
        "/@", "patterns"}], "]"}], ";"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.719237214124238*^9, 3.719237330073601*^9}, {
   3.719237380966361*^9, 3.719237542341514*^9}, {3.719238802662486*^9, 
   3.7192388549442043`*^9}, {3.71923889978402*^9, 3.71923891265386*^9}, 
   3.719240827011012*^9}],

Cell["\<\
Given a sequence of values s1, a list of known indices into s1, and another \
sequence s2, use the DTW path to project the s1 indices onto s2. (Whenever \
the DTW path happens to map one s1 index to multiple s2 indices, we need to \
make a choice!)\
\>", "Text",
 CellChangeTimes->{{3.719254534365911*^9, 3.719254634994667*^9}, {
  3.7192547024378443`*^9, 3.719254718861847*^9}, {3.719254790341386*^9, 
  3.719254811241539*^9}, {3.7192681914741287`*^9, 3.7192681996599083`*^9}, {
  3.71933882651816*^9, 3.7193388273204403`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ProjectIndicesUsingWarpingCorrespondence", "[", 
   RowBox[{"s1_", ",", "s2_", ",", "indices1_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"path", ",", "ImageOf"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"path", "=", 
      RowBox[{"Transpose", "@", 
       RowBox[{"WarpingCorrespondence", "[", 
        RowBox[{"s1", ",", "s2"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"ImageOf", "=", 
      RowBox[{"Function", "[", 
       RowBox[{
        RowBox[{"{", "i", "}"}], ",", 
        RowBox[{"Map", "[", 
         RowBox[{"Last", ",", 
          RowBox[{"Select", "[", 
           RowBox[{"path", ",", 
            RowBox[{
             RowBox[{
              RowBox[{"First", "[", "#", "]"}], "\[Equal]", "i"}], "&"}]}], 
           "]"}]}], "]"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", 
      RowBox[{"Map", "[", 
       RowBox[{"ImageOf", ",", "indices1"}], "]"}], "]"}], ";"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.719255703095828*^9, 3.719255747329515*^9}, {
  3.719255806257091*^9, 3.719255889503355*^9}, {3.719255929977192*^9, 
  3.719255944459444*^9}, {3.719256823220326*^9, 3.7192569153399353`*^9}, {
  3.719338832208197*^9, 3.7193388549445047`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"PlotSequenceWithGridLines", "[", 
   RowBox[{"seq_", ",", "xs_"}], "]"}], ":=", 
  RowBox[{"ListPlot", "[", 
   RowBox[{"seq", ",", 
    RowBox[{"GridLines", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"xs", ",", "None"}], "}"}]}], ",", 
    RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.719257616075774*^9, 3.719257676536186*^9}, {
  3.71925770890816*^9, 3.719257709373453*^9}, {3.719257990662217*^9, 
  3.719257993988394*^9}, {3.71926303472328*^9, 3.719263038409011*^9}, {
  3.719263795345701*^9, 3.719263797112569*^9}, {3.719331381632153*^9, 
  3.719331382154002*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Study", "[", 
   RowBox[{"ia_", ",", "otherias_", ",", "allias_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"sia", ",", "sias", ",", "choppingPoints", ",", "testsias"}], 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"sia", "=", 
      RowBox[{"SizesIA", "@", "ia"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"sias", "=", 
      RowBox[{"SizesIA", "/@", "otherias"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"testsias", "=", 
      RowBox[{"SizesIA", "/@", 
       RowBox[{"RandomSample", "[", 
        RowBox[{"allias", ",", "20"}], "]"}]}]}], ";", 
     RowBox[{"choppingPoints", "=", 
      RowBox[{"ChoppingPointsViaDiagonalCandidatesV3", "[", 
       RowBox[{"ia", ",", "otherias"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Column", "[", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"SubwayCactus", "[", 
         RowBox[{"ia", ",", "otherias"}], "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"ShowDiagonalCandidatesV3", "[", 
         RowBox[{"ia", ",", "otherias"}], "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"Grid", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"ProjectIndicesUsingWarpingCorrespondence", "[", 
            RowBox[{"sia", ",", "#", ",", "choppingPoints"}], "]"}], "&"}], "/@",
           "testsias"}], "\[IndentingNewLine]", "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Column", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"PlotSequenceWithGridLines", "[", 
            RowBox[{"#", ",", 
             RowBox[{"Flatten", "[", 
              RowBox[{"ProjectIndicesUsingWarpingCorrespondence", "[", 
               RowBox[{"sia", ",", "#", ",", "choppingPoints"}], "]"}], 
              "]"}]}], "]"}], "&"}], "/@", "testsias"}], 
         "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "}"}], 
      "]"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.719257242120933*^9, 3.7192573529012547`*^9}, {
  3.71925738822193*^9, 3.719257417744179*^9}, {3.719257450116693*^9, 
  3.719257534288745*^9}, {3.719257777962886*^9, 3.719257840733389*^9}, {
  3.719257882705781*^9, 3.719257929101048*^9}, {3.719262940170734*^9, 
  3.71926295121954*^9}, {3.719266458459434*^9, 3.719266459563415*^9}, {
  3.719266494793665*^9, 3.719266536283677*^9}, {3.719338865913123*^9, 
  3.7193388732140913`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ShowSomeLeads", "[", 
   RowBox[{"ias_", ",", "howManyLeads_", ",", "howManyPerLead_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"leads", ",", "choplists"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"leads", "=", 
      RowBox[{"RandomSample", "[", 
       RowBox[{"ias", ",", "howManyLeads"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"choplists", "=", 
      RowBox[{"Map", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"ChoppingPointsViaDiagonalCandidatesV3", "[", 
          RowBox[{"#", ",", 
           RowBox[{"RandomSample", "[", 
            RowBox[{"ias", ",", "howManyPerLead"}], "]"}]}], "]"}], "&"}], 
        ",", "\[IndentingNewLine]", "leads"}], "\[IndentingNewLine]", "]"}]}],
      ";", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "\[IndentingNewLine]", 
      RowBox[{"Column", "@", 
       RowBox[{"Map", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Function", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"{", "tuple", "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{"Row", "[", 
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"ListPlot", "[", 
               RowBox[{
                RowBox[{"SizesIA", "[", 
                 RowBox[{"First", "[", "tuple", "]"}], "]"}], ",", 
                RowBox[{"ImageSize", "\[Rule]", "Small"}], ",", 
                RowBox[{"Ticks", "\[Rule]", "None"}], ",", 
                RowBox[{"GridLines", "\[Rule]", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"Last", "[", "tuple", "]"}], ",", "None"}], 
                  "}"}]}]}], "]"}], ",", "\[IndentingNewLine]", "\"\< \>\"", 
              ",", "\[IndentingNewLine]", 
              RowBox[{"Length", "[", 
               RowBox[{"Last", "[", "tuple", "]"}], "]"}]}], 
             "\[IndentingNewLine]", "}"}], "]"}]}], "\[IndentingNewLine]", 
          "]"}], ",", "\[IndentingNewLine]", 
         RowBox[{"Transpose", "[", 
          RowBox[{"{", 
           RowBox[{"leads", ",", "choplists"}], "}"}], "]"}]}], 
        "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], ";"}]}],
    "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.719266680496717*^9, 3.719266699805072*^9}, {
  3.7192667301841497`*^9, 3.719266969508872*^9}, {3.719267028983832*^9, 
  3.7192670814308577`*^9}, {3.7192671598514347`*^9, 3.7192672692831583`*^9}, {
  3.7192673150406847`*^9, 3.71926736617444*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ShowSomeLeadStats", "[", 
   RowBox[{"ias_", ",", "howManyLeads_", ",", "howManyPerLead_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "leads", ",", "choplists", ",", "tally", ",", "numchops", ",", "freqs"}],
      "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"leads", "=", 
      RowBox[{"RandomSample", "[", 
       RowBox[{"ias", ",", "howManyLeads"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"choplists", "=", 
      RowBox[{"Map", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"ChoppingPointsViaDiagonalCandidatesV3", "[", 
          RowBox[{"#", ",", 
           RowBox[{"RandomSample", "[", 
            RowBox[{"ias", ",", "howManyPerLead"}], "]"}]}], "]"}], "&"}], 
        ",", "\[IndentingNewLine]", "leads"}], "\[IndentingNewLine]", "]"}]}],
      ";", "\[IndentingNewLine]", 
     RowBox[{"tally", "=", 
      RowBox[{"Sort", "@", 
       RowBox[{"Tally", "[", 
        RowBox[{"Map", "[", 
         RowBox[{"Length", ",", "choplists"}], "]"}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"numchops", ",", "freqs"}], "}"}], "=", 
      RowBox[{"Transpose", "[", "tally", "]"}]}], ";", "\[IndentingNewLine]", 
     
     RowBox[{"Return", "[", "\[IndentingNewLine]", 
      RowBox[{"Column", "[", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"BarChart", "[", 
          RowBox[{"freqs", ",", 
           RowBox[{"ChartLabels", "\[Rule]", "numchops"}]}], "]"}], ",", 
         "\[IndentingNewLine]", "tally"}], "\[IndentingNewLine]", "}"}], 
       "]"}], "\[IndentingNewLine]", "]"}], ";"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.719267432050199*^9, 3.7192675061715517`*^9}, {
  3.7192675404906483`*^9, 3.719267555834626*^9}, {3.719267718842146*^9, 
  3.719267821843226*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"BigStudy", "[", 
   RowBox[{
   "ias_", ",", "numLeads_", ",", "numTrainPerLead_", ",", 
    "numTestPerLead_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
     "leadIndices", ",", "leads", ",", "leadSeqs", ",", "leadChoplists", ",", 
      "testSeqs", ",", "predictions", ",", "projectedChoplist"}], 
     "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"leadIndices", "=", 
      RowBox[{"RandomSample", "[", 
       RowBox[{
        RowBox[{"Range", "@", 
         RowBox[{"Length", "@", "ias"}]}], ",", "numLeads"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"leads", "=", 
      RowBox[{"ias", "[", 
       RowBox[{"[", "leadIndices", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"leadSeqs", "=", 
      RowBox[{"Map", "[", 
       RowBox[{"SizesIA", ",", "leads"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "Compute", " ", "chopping", " ", "points", " ", "for", " ", "each", " ",
        "lead", " ", "using", " ", "a", " ", "different", " ", "random", " ", 
       
       RowBox[{"sample", ".", " ", "Is"}], " ", "this", " ", 
       RowBox[{"reasonable", "?"}]}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"leadChoplists", "=", 
      RowBox[{"Map", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"ChoppingPointsViaDiagonalCandidatesV3", "[", 
          RowBox[{"#", ",", 
           RowBox[{"RandomSample", "[", 
            RowBox[{"ias", ",", "numTrainPerLead"}], "]"}]}], "]"}], "&"}], 
        ",", "\[IndentingNewLine]", "leads"}], "\[IndentingNewLine]", "]"}]}],
      ";", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "Use", " ", "the", " ", "same", " ", "test", " ", "set", " ", "for", 
       " ", "all", " ", 
       RowBox[{"leads", "."}]}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"testSeqs", "=", 
      RowBox[{"Map", "[", 
       RowBox[{"SizesIA", ",", 
        RowBox[{"RandomSample", "[", 
         RowBox[{"ias", ",", "numTestPerLead"}], "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"For", " ", "each", " ", "lead"}], ",", " ", 
       RowBox[{"project", " ", "the", " ", 
        RowBox[{"lead", "'"}], "s", " ", "chopping", " ", "points", " ", 
        "onto", " ", "all", " ", "test", " ", 
        RowBox[{"sequences", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"predictions", "=", 
      RowBox[{"MapThread", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Function", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"leadSeq", ",", "leadChoplist"}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Row", "[", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"ListPlot", "[", 
              RowBox[{"leadSeq", ",", 
               RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
               RowBox[{"Ticks", "\[Rule]", "None"}], ",", " ", 
               RowBox[{"GridLines", "\[Rule]", 
                RowBox[{"{", 
                 RowBox[{"leadChoplist", ",", "None"}], "}"}]}]}], "]"}], ",",
              "\[IndentingNewLine]", "\"\<  \[Rule]  \>\"", ",", 
             "\[IndentingNewLine]", 
             RowBox[{"Row", "@", 
              RowBox[{"Map", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"ListPlot", "[", 
                  RowBox[{"#", ",", 
                   RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", " ", 
                   RowBox[{"Ticks", "\[Rule]", "None"}], ",", 
                   RowBox[{"GridLines", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Flatten", "@", 
                    RowBox[{"ProjectIndicesUsingWarpingCorrespondence", "[", 
                    RowBox[{"leadSeq", ",", "#", ",", "leadChoplist"}], 
                    "]"}]}], ",", "None"}], "}"}]}]}], "]"}], "&"}], ",", 
                "testSeqs"}], "\[IndentingNewLine]", "]"}]}]}], 
            "\[IndentingNewLine]", "}"}], "]"}]}], "\[IndentingNewLine]", 
         "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"leadSeqs", ",", "leadChoplists"}], "}"}]}], 
       "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "predictions", "]"}], ";", "\[IndentingNewLine]", 
     
     RowBox[{"Print", "[", "leadSeqs", "]"}], ";"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGAQBmIQnfX1wXmhba8dT9hmXwfRK5Ztvg2i1T48eQqiTRS2
lAoD6YSXF+tBdHjsvIkges0J76Ug+pUezw8Q/e7+UwERIJ2m9KAcRLvw1teA
6IkfOZtB9Oa4nm4Q/ex+yRQQfUM6ciqINvj3bhaIniwjNhtERzzasgxEn594
dRuI7phzbBeInrHPczeI/vVJ6jSIPmc/8yKI9iuecxNEByXfBtPWO+TvgeiC
Ot4HIFoivfEViBa7GPUaRK+pLWEXBdJPXr0SBdFHHr2TBNGXZgSrguiM7Jua
IFqpz1oLRO9qy9cD0RK2ty1ANAC8cKAk
  "]],

Cell[BoxData[
 RowBox[{
  RowBox[{"BigStudy2", "[", 
   RowBox[{
   "ias_", ",", "numLeads_", ",", "numTrainPerLead_", ",", 
    "numTestPerLead_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
     "leadIndices", ",", "leads", ",", "leadSeqs", ",", "leadChoplists", ",", 
      "testSeqs", ",", "predictions", ",", "projectedChoplist"}], 
     "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"leadIndices", "=", 
      RowBox[{"RandomSample", "[", 
       RowBox[{
        RowBox[{"Range", "@", 
         RowBox[{"Length", "@", "ias"}]}], ",", "numLeads"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"leads", "=", 
      RowBox[{"ias", "[", 
       RowBox[{"[", "leadIndices", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"leadSeqs", "=", 
      RowBox[{"Map", "[", 
       RowBox[{"SizesIA", ",", "leads"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "Compute", " ", "chopping", " ", "points", " ", "for", " ", "each", " ",
        "lead", " ", "using", " ", "a", " ", "different", " ", "random", " ", 
       
       RowBox[{"sample", ".", " ", "Is"}], " ", "this", " ", 
       RowBox[{"reasonable", "?"}]}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"leadChoplists", "=", 
      RowBox[{"Map", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"ChoppingPointsViaDiagonalCandidatesV3", "[", 
          RowBox[{"#", ",", 
           RowBox[{"RandomSample", "[", 
            RowBox[{"ias", ",", "numTrainPerLead"}], "]"}]}], "]"}], "&"}], 
        ",", "\[IndentingNewLine]", "leads"}], "\[IndentingNewLine]", "]"}]}],
      ";", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
      "Use", " ", "the", " ", "same", " ", "test", " ", "set", " ", "for", 
       " ", "all", " ", 
       RowBox[{"leads", "."}]}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"testSeqs", "=", 
      RowBox[{"Map", "[", 
       RowBox[{"SizesIA", ",", 
        RowBox[{"RandomSample", "[", 
         RowBox[{"ias", ",", "numTestPerLead"}], "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{"For", " ", "each", " ", "lead"}], ",", " ", 
       RowBox[{"project", " ", "the", " ", 
        RowBox[{"lead", "'"}], "s", " ", "chopping", " ", "points", " ", 
        "onto", " ", "all", " ", "test", " ", 
        RowBox[{"sequences", "."}]}]}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"predictions", "=", 
      RowBox[{"MapThread", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Function", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{"leadSeq", ",", "leadChoplist"}], "}"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Row", "[", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"ListPlot", "[", 
              RowBox[{"leadSeq", ",", 
               RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
               RowBox[{"Ticks", "\[Rule]", "None"}], ",", " ", 
               RowBox[{"GridLines", "\[Rule]", 
                RowBox[{"{", 
                 RowBox[{"leadChoplist", ",", "None"}], "}"}]}]}], "]"}], ",",
              "\[IndentingNewLine]", "\"\<  \[Rule]  \>\"", ",", 
             "\[IndentingNewLine]", 
             RowBox[{"Row", "@", 
              RowBox[{"Map", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"ListPlot", "[", 
                  RowBox[{"#", ",", 
                   RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", " ", 
                   RowBox[{"Ticks", "\[Rule]", "None"}], ",", 
                   RowBox[{"GridLines", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Flatten", "@", 
                    RowBox[{"ProjectIndicesUsingWarpingCorrespondence", "[", 
                    RowBox[{"leadSeq", ",", "#", ",", "leadChoplist"}], 
                    "]"}]}], ",", "None"}], "}"}]}]}], "]"}], "&"}], ",", 
                "testSeqs"}], "\[IndentingNewLine]", "]"}]}]}], 
            "\[IndentingNewLine]", "}"}], "]"}]}], "\[IndentingNewLine]", 
         "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"leadSeqs", ",", "leadChoplists"}], "}"}]}], 
       "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "predictions", "]"}], ";", "\[IndentingNewLine]", 
     
     RowBox[{"Print", "[", "leadSeqs", "]"}], ";"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.719337599029958*^9, 3.7193376593512917`*^9}, {
   3.719337693614094*^9, 3.719337775154315*^9}, {3.719338925628931*^9, 
   3.719339006559738*^9}, {3.719339148948894*^9, 3.719339306368246*^9}, {
   3.719339968380727*^9, 3.719340167183585*^9}, {3.719340991004199*^9, 
   3.7193410279703693`*^9}, {3.719341080310738*^9, 3.71934114838656*^9}, {
   3.7193412196523314`*^9, 3.719341226784649*^9}, {3.7193412714685287`*^9, 
   3.719341272690988*^9}, {3.71934136565263*^9, 3.719341494674049*^9}, {
   3.719341526206608*^9, 3.719341530304516*^9}, {3.71934165684216*^9, 
   3.7193417087890387`*^9}, {3.7193417728890753`*^9, 3.719341774855874*^9}, {
   3.719341808991239*^9, 3.7193418244216843`*^9}, {3.7193419080438347`*^9, 
   3.719341914838023*^9}, {3.719342139640341*^9, 3.719342255341173*^9}, {
   3.7193422874651814`*^9, 3.719342378612405*^9}, {3.719342414794361*^9, 
   3.7193424178611*^9}, {3.719342451485196*^9, 3.7193425348512077`*^9}, 
   3.719346020183392*^9}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"LimitHi", "[", 
    RowBox[{"elems_", ",", "max_"}], "]"}], ":=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"#", ">", "max"}], ",", "max", ",", "#"}], "]"}], "&"}], ",", 
     "elems"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"LimitLo", "[", 
    RowBox[{"elems_", ",", "min_"}], "]"}], ":=", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"#", "<", "min"}], ",", "0", ",", "#"}], "]"}], "&"}], ",", 
     "elems"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"FindTransitionPoints", "[", 
   RowBox[{"elems_", ",", "loLimit_", ",", "hiLimit_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "filteredElems", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"filteredElems", "=", 
      RowBox[{"LimitHi", "[", 
       RowBox[{
        RowBox[{"LimitLo", "[", 
         RowBox[{"elems", ",", "loLimit"}], "]"}], ",", "hiLimit"}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"Map", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"MemberQ", "[", 
            RowBox[{"#", ",", "0"}], "]"}], "&&", 
           RowBox[{"#", "\[NotEqual]", 
            RowBox[{"{", 
             RowBox[{"0", ",", "0"}], "}"}]}]}], ",", "1", ",", "0"}], "]"}], 
        "&"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Transpose", "@", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Drop", "[", 
           RowBox[{"elems", ",", 
            RowBox[{"-", "1"}]}], "]"}], ",", 
          RowBox[{"Drop", "[", 
           RowBox[{"elems", ",", "1"}], "]"}]}], "}"}]}]}], 
      "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.719611266729788*^9, 3.719611277895423*^9}, {
  3.719611342077311*^9, 3.719611400660508*^9}, {3.7196116750810623`*^9, 
  3.719611694337551*^9}, {3.719611882845517*^9, 3.719611953757258*^9}, {
  3.719611987997169*^9, 3.719611990363205*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ShowDistances", "[", "seqs_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"distlist", ",", "distmatrix", ",", "header", ",", "matrix"}], 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"distlist", "=", 
      RowBox[{"Map", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"WarpingDistance", "[", 
          RowBox[{
           RowBox[{"First", "[", "#", "]"}], ",", 
           RowBox[{"Last", "[", "#", "]"}]}], "]"}], "&"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Tuples", "[", 
         RowBox[{"{", 
          RowBox[{"seqs", ",", "seqs"}], "}"}], "]"}]}], 
       "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"distmatrix", "=", 
      RowBox[{"Partition", "[", 
       RowBox[{"distlist", ",", 
        RowBox[{"Length", "[", "seqs", "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"header", "=", 
      RowBox[{"Map", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"ListPlot", "[", 
          RowBox[{"#", ",", 
           RowBox[{"ImageSize", "\[Rule]", "Tiny"}], ",", 
           RowBox[{"Ticks", "\[Rule]", "None"}]}], "]"}], "&"}], ",", 
        "\[IndentingNewLine]", "seqs"}], "\[IndentingNewLine]", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "add", " ", "header", " ", "column", " ", "on", " ", "left", " ", 
       "side"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"matrix", "=", 
      RowBox[{"Join", "[", 
       RowBox[{
        RowBox[{"List", "/@", "header"}], ",", "distmatrix", ",", "2"}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "now", " ", "add", " ", "blank", " ", "cell", " ", "and", " ", "header",
        " ", "row", " ", "to", " ", "the", " ", "top"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"matrix", "=", 
      RowBox[{"Join", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"Join", "[", 
          RowBox[{
           RowBox[{"{", "\"\<\>\"", "}"}], ",", "header"}], "]"}], "}"}], ",",
         "matrix"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", 
      RowBox[{"Grid", "[", "matrix", "]"}], "]"}], ";"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.719615102594791*^9, 3.719615331055792*^9}, {
  3.7196153929197693`*^9, 3.719615528517831*^9}, {3.719615569123982*^9, 
  3.719615585948763*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ShowAlignmentUsingCenterSeq", "[", 
   RowBox[{"seqs_", ",", "centralSeq_", ",", "centralSeqChoppingPoints_"}], 
   "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{"seqPaths", ",", "seqChoppingPointLists"}], 
     "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"seqPaths", "=", 
      RowBox[{"Map", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"Transpose", "[", 
          RowBox[{"WarpingCorrespondence", "[", 
           RowBox[{"centralSeq", ",", "#"}], "]"}], "]"}], "&"}], ",", 
        "\[IndentingNewLine]", "seqs"}], "\[IndentingNewLine]", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"seqChoppingPointLists", "=", 
      RowBox[{"Map", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"ProjectIndicesUsingWarpingCorrespondence", "[", 
          RowBox[{"centralSeq", ",", "#", ",", "centralSeqChoppingPoints"}], 
          "]"}], "&"}], ",", "\[IndentingNewLine]", "seqs"}], 
       "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Column", "[", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"ListPlot", "[", 
           RowBox[{
            RowBox[{"seqs", "[", 
             RowBox[{"[", "i", "]"}], "]"}], ",", "\[IndentingNewLine]", 
            RowBox[{"ImageSize", "\[Rule]", "Medium"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"Ticks", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{"Automatic", ",", "None"}], "}"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"GridLines", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Flatten", "@", 
                RowBox[{"seqChoppingPointLists", "[", 
                 RowBox[{"[", "i", "]"}], "]"}]}], ",", "None"}], "}"}]}]}], 
           "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"seqChoppingPointLists", "[", 
           RowBox[{"[", "i", "]"}], "]"}]}], "\[IndentingNewLine]", "}"}], 
        "]"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", 
         RowBox[{"Length", "@", "seqs"}], ",", "1"}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"ContinuousAction", "\[Rule]", "False"}]}], 
      "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.719690756372197*^9, 3.7196907625394907`*^9}, {
  3.719690795009204*^9, 3.719690854035152*^9}, {3.7196908990994577`*^9, 
  3.719690931189966*^9}, {3.7196909782005444`*^9, 3.7196910029652433`*^9}, {
  3.719691062802712*^9, 3.71969106474149*^9}, {3.7196911138963118`*^9, 
  3.7196911185160923`*^9}, {3.7196919200071487`*^9, 3.7196919632118387`*^9}, {
  3.71969223695105*^9, 3.719692373977112*^9}, {3.719692410799542*^9, 
  3.7196924909731493`*^9}, {3.719692603470743*^9, 3.719692604628927*^9}, {
  3.719692636121256*^9, 3.719692694909438*^9}, {3.7196927866779118`*^9, 
  3.719692813976404*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"OldShowColoredByCentral", "[", 
   RowBox[{"s1_", ",", "s2_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "p1", ",", "p2", ",", "colors", ",", "tuples", ",", "styledpoints"}], 
     "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"p1", ",", "p2"}], "}"}], "=", 
      RowBox[{"WarpingCorrespondence", "[", 
       RowBox[{"s1", ",", "s2"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Print", "[", 
      RowBox[{"{", 
       RowBox[{"p1", ",", "p2"}], "}"}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"colors", "=", 
      RowBox[{"Map", "[", 
       RowBox[{"Hue", ",", 
        RowBox[{"Rescale", "[", "p2", "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"tuples", "=", 
      RowBox[{"Transpose", "[", 
       RowBox[{"{", 
        RowBox[{"s1", ",", "colors"}], "}"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"styledpoints", "=", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Style", "@@", "#"}], "&"}], ",", "tuples"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"ListPlot", "[", 
      RowBox[{"styledpoints", ",", 
       RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7198596032098217`*^9, 3.719859699321404*^9}, {
  3.719859808759993*^9, 3.719859882963325*^9}, {3.719859954834326*^9, 
  3.71985997419557*^9}, {3.719862872524259*^9, 3.71986288543934*^9}, {
  3.719872673349066*^9, 3.7198726790665894`*^9}, {3.719875891344157*^9, 
  3.7198758916272097`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ShowColoredByCentral", "[", 
   RowBox[{"s1_", ",", "s2_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "p1", ",", "p2", ",", "colors", ",", "tuples", ",", "styledpoints", ",", 
      "p1toColors", ",", "runsWithSamep1", ",", "newRuns", ",", "newColors"}],
      "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"p1", ",", "p2"}], "}"}], "=", 
      RowBox[{"WarpingCorrespondence", "[", 
       RowBox[{"s1", ",", "s2"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"colors", "=", 
        RowBox[{"Map", "[", 
         RowBox[{"Hue", ",", 
          RowBox[{"Rescale", "[", "p2", "]"}]}], "]"}]}], ";"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"colors", "=", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{"ColorData", "[", "54", "]"}], ",", "p2"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"p1toColors", "=", 
      RowBox[{"Transpose", "[", 
       RowBox[{"{", 
        RowBox[{"p1", ",", "colors"}], "}"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"List", " ", "of", " ", "lists", " ", "of", " ", "tuples"}], 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{"runsWithSamep1", "=", 
      RowBox[{"SplitBy", "[", 
       RowBox[{"p1toColors", ",", "First"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"newRuns", "=", 
      RowBox[{"Map", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Function", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", "tupleList", "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "@", "tupleList"}], ">", "1"}], ",", 
            RowBox[{"{", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"First", "@", 
                RowBox[{"First", "@", "tupleList"}]}], ",", "Black"}], "}"}], 
             "}"}], ",", "tupleList"}], "]"}]}], "\[IndentingNewLine]", "]"}],
         ",", "\[IndentingNewLine]", "runsWithSamep1"}], 
       "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"newColors", "=", 
      RowBox[{
       RowBox[{"Flatten", "[", 
        RowBox[{"newRuns", ",", "1"}], "]"}], "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "2"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"tuples", "=", 
      RowBox[{"Transpose", "[", 
       RowBox[{"{", 
        RowBox[{"s1", ",", "newColors"}], "}"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"styledpoints", "=", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Style", "@@", "#"}], "&"}], ",", "tuples"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"ListPlot", "[", 
      RowBox[{"styledpoints", ",", 
       RowBox[{"ImageSize", "\[Rule]", "Full"}], ",", 
       RowBox[{"Filling", "\[Rule]", "Axis"}], ",", 
       RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7198596032098217`*^9, 3.719859699321404*^9}, {
   3.719859808759993*^9, 3.719859882963325*^9}, {3.719859954834326*^9, 
   3.71985997419557*^9}, {3.719862872524259*^9, 3.71986288543934*^9}, {
   3.719872673349066*^9, 3.7198726790665894`*^9}, {3.7198751477901363`*^9, 
   3.719875209277121*^9}, {3.7198752508229218`*^9, 3.719875257072361*^9}, {
   3.719875348692553*^9, 3.719875539580553*^9}, 3.719875629670248*^9, {
   3.7198756726500196`*^9, 3.7198757556188993`*^9}, 3.719875875546218*^9, {
   3.719876073554174*^9, 3.719876083164777*^9}, {3.719882474958755*^9, 
   3.719882504058531*^9}, {3.719942989009151*^9, 3.719942992658443*^9}, {
   3.719963249085846*^9, 3.719963275160619*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"RunDBA", "[", 
   RowBox[{
   "sequences_", ",", "desiredLength_", ",", "numIters_", ",", "tolerance_", 
    ",", "numStarts_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
      "envsetup", "=", 
       "\"\<export \
PYTHONPATH=/Users/nrosner/Library/Python/2.7/lib/python/site-packages\>\""}], 
      ",", "\[IndentingNewLine]", 
      RowBox[{"pythonbin", "=", "\"\</usr/bin/python\>\""}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"scriptpath", "=", "\"\</Users/nrosner/dba/mathdba.py\>\""}], 
      ",", "\[IndentingNewLine]", "pytolerance", ",", "pycontent", ",", 
      "tempfile", ",", "tempfiledat", ",", "command", ",", "resultString", 
      ",", "result"}], "\[IndentingNewLine]", "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{
      "This", " ", "now", " ", "assumes", " ", "that", " ", "sequences", " ", 
       "is", " ", "a", " ", "list", " ", "of", " ", "lists", " ", "of", " ", 
       "lists"}], ",", "\[IndentingNewLine]", "   ", 
      RowBox[{
      "as", " ", "each", " ", "datapoint", " ", "is", " ", "now", " ", "a", 
       " ", 
       RowBox[{"vector", "."}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{"We", " ", "translate", " ", "it", " ", "to", " ", "Python", " ", 
      RowBox[{"syntax", "."}]}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"pycontent", "=", 
      RowBox[{"StringReplace", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"ToString", "[", "\[IndentingNewLine]", 
         RowBox[{"NumberForm", "[", 
          RowBox[{"sequences", ",", 
           RowBox[{"NumberFormat", "\[Rule]", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"Row", "[", 
               RowBox[{"{", 
                RowBox[{"#1", ",", 
                 RowBox[{"If", "[", 
                  RowBox[{
                   RowBox[{"#3", "\[NotEqual]", "\"\<\>\""}], ",", 
                   "\"\<E\>\"", ",", "\"\<\>\""}], "]"}], ",", "#3"}], "}"}], 
               "]"}], "&"}], ")"}]}]}], "]"}], "\[IndentingNewLine]", "]"}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"\"\<{\>\"", "\[Rule]", "\"\<[\>\""}], ",", 
          RowBox[{"\"\<}\>\"", "\[Rule]", "\"\<]\>\""}]}], "}"}]}], 
       "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"pytolerance", "=", 
      RowBox[{"ToString", "[", 
       RowBox[{"NumberForm", "[", 
        RowBox[{"tolerance", ",", 
         RowBox[{"NumberFormat", "\[Rule]", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"Row", "[", 
             RowBox[{"{", 
              RowBox[{"#1", ",", 
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"#3", "\[NotEqual]", "\"\<\>\""}], ",", "\"\<E\>\"", 
                 ",", "\"\<\>\""}], "]"}], ",", "#3"}], "}"}], "]"}], "&"}], 
           ")"}]}]}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"tempfile", "=", 
      RowBox[{"CreateFile", "[", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"tempfiledat", "=", 
      RowBox[{"tempfile", "<>", "\"\<.txt\>\""}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Export", "[", 
      RowBox[{"tempfiledat", ",", "pycontent"}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"command", "=", 
      RowBox[{
      "envsetup", "<>", "\"\< ; \>\"", "<>", "pythonbin", "<>", "\"\< \>\"", 
       "\[IndentingNewLine]", "<>", "scriptpath", "<>", "\"\< \>\"", 
       "\[IndentingNewLine]", "<>", "tempfiledat", "<>", "\"\< \>\"", 
       "\[IndentingNewLine]", "<>", 
       RowBox[{"ToString", "[", "numIters", "]"}], "<>", "\"\< \>\"", 
       "\[IndentingNewLine]", "<>", "pytolerance", "<>", "\"\< \>\"", 
       "\[IndentingNewLine]", "<>", 
       RowBox[{"ToString", "[", "numStarts", "]"}], "<>", "\"\< \>\"", 
       "\[IndentingNewLine]", "<>", 
       RowBox[{"ToString", "[", "desiredLength", "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"Print", "[", 
        RowBox[{"\"\<Command: \>\"", "<>", "command"}], "]"}], ";"}], " ", 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{"resultString", "=", 
      RowBox[{"RunProcess", "[", 
       RowBox[{
       "$SystemShell", ",", "\"\<StandardOutput\>\"", ",", "command"}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Print", "[", 
      RowBox[{"\"\<Result as string: \>\"", "<>", "resultString"}], "]"}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"result", "=", 
      RowBox[{"First", "@", 
       RowBox[{"ImportString", "[", 
        RowBox[{"resultString", ",", "\"\<TSV\>\""}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Print", "[", 
      RowBox[{"\"\<Central: \>\"", "<>", 
       RowBox[{"ToString", "[", "result", "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"DeleteFile", "[", "tempfile", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"DeleteFile", "[", "tempfiledat", "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "result", "]"}], ";"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7198706974459667`*^9, 3.719870741911626*^9}, {
   3.7198711864974413`*^9, 3.719871225622251*^9}, {3.7198712589806433`*^9, 
   3.719871273736635*^9}, {3.719871333690139*^9, 3.719871545348707*^9}, {
   3.719871579223404*^9, 3.7198716229717417`*^9}, {3.719871677798099*^9, 
   3.719871699485221*^9}, {3.7198719389399023`*^9, 3.719871960660776*^9}, {
   3.719872013482592*^9, 3.7198720632547693`*^9}, {3.719872103701589*^9, 
   3.719872106061157*^9}, {3.719872159453998*^9, 3.719872214351907*^9}, {
   3.71987226343227*^9, 3.7198722651774*^9}, {3.719872299674304*^9, 
   3.719872344642992*^9}, {3.719872432245557*^9, 3.7198724376913433`*^9}, 
   3.7198817725913153`*^9, {3.720011108665193*^9, 3.7200111138302317`*^9}, {
   3.720011152969035*^9, 3.7200111813596*^9}, {3.7200113126963043`*^9, 
   3.720011455844285*^9}, {3.720011493527258*^9, 3.720011495588235*^9}, {
   3.720012045108431*^9, 3.720012049079484*^9}, {3.7200121286680403`*^9, 
   3.72001215123929*^9}, {3.720012181514328*^9, 3.7200121941377563`*^9}, {
   3.7200122309321747`*^9, 3.720012231051529*^9}, {3.720012320318058*^9, 
   3.7200123574166594`*^9}, {3.720188099911751*^9, 3.7201882036627483`*^9}, {
   3.720203054832752*^9, 3.7202030627400227`*^9}, {3.720228002161336*^9, 
   3.720228059448732*^9}, {3.720228125337358*^9, 3.7202281952022057`*^9}, {
   3.72022822710289*^9, 3.720228228503776*^9}, {3.720299250691728*^9, 
   3.720299263340399*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"SplitSeqByCentral", "[", 
   RowBox[{"seq_", ",", "centralSeq_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
     "p1", ",", "p2", ",", "tuples", ",", "styledpoints", ",", "path", ",", 
      "runsWithSameFirst", ",", "\[IndentingNewLine]", 
      "seqpointToLabelsetTuples", ",", "labelsetToSeqpointTuples", ",", 
      "almostDone"}], "\[IndentingNewLine]", "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"p1", ",", "p2"}], "}"}], "=", 
      RowBox[{"WarpingCorrespondence", "[", 
       RowBox[{"seq", ",", "centralSeq"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"path", "=", 
      RowBox[{"Transpose", "[", 
       RowBox[{"{", 
        RowBox[{"p1", ",", "p2"}], "}"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"List", " ", "of", " ", "lists", " ", "of", " ", "tuples"}], 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{"runsWithSameFirst", "=", 
      RowBox[{"SplitBy", "[", 
       RowBox[{"path", ",", "First"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"List", " ", "of", " ", 
       RowBox[{"{", 
        RowBox[{"seqpoint", ",", "labelset"}], "}"}], " ", "tuples"}], "*)"}],
      "\[IndentingNewLine]", 
     RowBox[{"seqpointToLabelsetTuples", "=", 
      RowBox[{"Map", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Function", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"{", "tupleList", "}"}], ",", "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "tupleList", "]"}], "==", "1"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"First", "[", 
               RowBox[{"First", "[", "tupleList", "]"}], "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"Last", "[", 
                RowBox[{"First", "[", "tupleList", "]"}], "]"}], "}"}]}], 
             "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"First", "[", 
               RowBox[{"First", "[", "tupleList", "]"}], "]"}], ",", 
              RowBox[{"Last", "[", 
               RowBox[{"Transpose", "[", "tupleList", "]"}], "]"}]}], "}"}]}],
            "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}], ",",
         "\[IndentingNewLine]", "runsWithSameFirst"}], "\[IndentingNewLine]", 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"List", " ", "of", " ", 
       RowBox[{"{", 
        RowBox[{"labelset", ",", "seqpoint"}], "}"}], " ", "tuples"}], "*)"}],
      "\[IndentingNewLine]", 
     RowBox[{"labelsetToSeqpointTuples", "=", 
      RowBox[{"Map", "[", 
       RowBox[{"Reverse", ",", "seqpointToLabelsetTuples"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"List", " ", "of", " ", "lists", " ", "of", " ", 
       RowBox[{"{", 
        RowBox[{"labelset", ",", "seqpoint"}], "}"}], " ", "tuples"}], "*)"}],
      "\[IndentingNewLine]", 
     RowBox[{"almostDone", "=", 
      RowBox[{"SplitBy", "[", 
       RowBox[{"labelsetToSeqpointTuples", ",", "First"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"List", " ", "of", " ", 
       RowBox[{"{", 
        RowBox[{"labelset", ",", "seqpointlist"}], "}"}], " ", "tuples"}], 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{"Return", "[", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"First", "[", 
            RowBox[{"First", "[", "#", "]"}], "]"}], ",", 
           RowBox[{"Last", "[", "#", "]"}]}], "}"}], "&"}], ",", 
        RowBox[{"Map", "[", 
         RowBox[{"Transpose", ",", "almostDone"}], "]"}]}], "]"}], "]"}], 
     ";"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7198596032098217`*^9, 3.719859699321404*^9}, {
   3.719859808759993*^9, 3.719859882963325*^9}, {3.719859954834326*^9, 
   3.71985997419557*^9}, {3.719862872524259*^9, 3.71986288543934*^9}, {
   3.719872673349066*^9, 3.7198726790665894`*^9}, {3.7198751477901363`*^9, 
   3.719875209277121*^9}, {3.7198752508229218`*^9, 3.719875257072361*^9}, {
   3.719875348692553*^9, 3.719875539580553*^9}, 3.719875629670248*^9, {
   3.7198756726500196`*^9, 3.7198757556188993`*^9}, 3.719875875546218*^9, {
   3.719876073554174*^9, 3.719876083164777*^9}, {3.719882474958755*^9, 
   3.719882504058531*^9}, {3.719942989009151*^9, 3.719942992658443*^9}, {
   3.719949574354855*^9, 3.7199496172010593`*^9}, {3.7199506156969767`*^9, 
   3.71995071140376*^9}, {3.719950770575008*^9, 3.7199508064135227`*^9}, {
   3.7199509798141336`*^9, 3.719950998326685*^9}, {3.719958600866179*^9, 
   3.719958642414781*^9}, {3.7199586962504473`*^9, 3.719958699790921*^9}, {
   3.719958790741869*^9, 3.719958836691702*^9}, {3.719958932108489*^9, 
   3.719958960770907*^9}, {3.719959162862631*^9, 3.719959175990801*^9}, 
   3.719959306155512*^9, {3.719959353160173*^9, 3.719959490697551*^9}, 
   3.719959521651814*^9, {3.719959559776988*^9, 3.7199596246304817`*^9}, {
   3.719959673976315*^9, 3.7199597751635933`*^9}, {3.7199598399839582`*^9, 
   3.719959854415986*^9}, {3.719960160963993*^9, 3.71996028285175*^9}, {
   3.719960334076827*^9, 3.719960338508868*^9}, {3.7199605528472424`*^9, 
   3.719960561659749*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"CountSplitSeqByCentral", "[", 
   RowBox[{"seq_", ",", "centralSeq_"}], "]"}], ":=", 
  RowBox[{"Association", "[", "\[IndentingNewLine]", 
   RowBox[{"Map", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"First", "[", "#", "]"}], "\[Rule]", 
        RowBox[{"Length", "[", 
         RowBox[{"Last", "[", "#", "]"}], "]"}]}], "}"}], "&"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"SplitSeqByCentral", "[", 
      RowBox[{"seq", ",", "centralSeq"}], "]"}]}], "\[IndentingNewLine]", 
    "]"}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.719960418503139*^9, 3.7199604448926287`*^9}, {
  3.71996057489781*^9, 3.7199605885495768`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"TimeScalingFunction", "[", 
   RowBox[{"ias_", ",", "timeWeight_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
     "sizelists", ",", "timelists", ",", "gaplists", ",", "maxiSize", ",", 
      "miniTimeGap", ",", "maxiTimeGap", ",", "sizeRange", ",", "gapRange", 
      ",", "scalingFactor"}], "\[IndentingNewLine]", "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"sizelists", "=", 
      RowBox[{"SizesIA", "/@", "ias"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"timelists", "=", 
      RowBox[{"TimesIA", "/@", "ias"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"gaplists", "=", 
      RowBox[{"Map", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Function", "[", 
         RowBox[{
          RowBox[{"{", "timelist", "}"}], ",", 
          RowBox[{
           RowBox[{"Drop", "[", 
            RowBox[{"timelist", ",", "1"}], "]"}], "-", 
           RowBox[{"Drop", "[", 
            RowBox[{"timelist", ",", 
             RowBox[{"-", "1"}]}], "]"}]}]}], "]"}], ",", 
        "\[IndentingNewLine]", "timelists"}], "\[IndentingNewLine]", "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"Biggest", " ", "packet", " ", "size"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"maxiSize", "=", 
      RowBox[{"Max", "[", 
       RowBox[{"Map", "[", 
        RowBox[{"Max", ",", "sizelists"}], "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Print", "[", 
      RowBox[{"\"\<Max size: \>\"", "<>", 
       RowBox[{"ToString", "[", "maxiSize", "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "Smallest", " ", "and", " ", "biggest", " ", "gap", " ", "between", " ",
        "packets"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"miniTimeGap", "=", 
      RowBox[{"Min", "[", 
       RowBox[{"Map", "[", 
        RowBox[{"Min", ",", "gaplists"}], "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"maxiTimeGap", "=", 
      RowBox[{"Max", "[", 
       RowBox[{"Map", "[", 
        RowBox[{"Max", ",", "gaplists"}], "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Print", "[", 
      RowBox[{"\"\<Min,max time gap: \>\"", "<>", 
       RowBox[{"ToString", "[", 
        RowBox[{"{", 
         RowBox[{"miniTimeGap", ",", "maxiTimeGap"}], "}"}], "]"}]}], "]"}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"Current", " ", 
       RowBox[{"heuristic", ":"}]}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"sizeRange", "=", 
      RowBox[{"{", 
       RowBox[{"1", ",", "maxiSize"}], "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"gapRange", "=", 
      RowBox[{"{", 
       RowBox[{"miniTimeGap", ",", "maxiTimeGap"}], "}"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"scalingFactor", "=", 
      FractionBox[
       RowBox[{
        RowBox[{"gapRange", "[", 
         RowBox[{"[", "2", "]"}], "]"}], "-", 
        RowBox[{"gapRange", "[", 
         RowBox[{"[", "1", "]"}], "]"}]}], 
       RowBox[{
        RowBox[{"sizeRange", "[", 
         RowBox[{"[", "2", "]"}], "]"}], "-", 
        RowBox[{"sizeRange", "[", 
         RowBox[{"[", "1", "]"}], "]"}]}]]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Print", "[", 
      RowBox[{"\"\<Scaling factor: \>\"", "<>", 
       RowBox[{"ToString", "[", "scalingFactor", "]"}]}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Return", "[", 
      RowBox[{"Function", "[", 
       RowBox[{
        RowBox[{"{", "t", "}"}], ",", 
        RowBox[{"t", "*", "scalingFactor", "*", "timeWeight"}]}], "]"}], 
      "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7199653573619537`*^9, 3.719965373285655*^9}, {
  3.719965429189241*^9, 3.719965530762409*^9}, {3.719965565209392*^9, 
  3.719965882578761*^9}, {3.719965933404251*^9, 3.719965943648303*^9}, {
  3.719966028843643*^9, 3.719966105065275*^9}, {3.719979812008493*^9, 
  3.719979849406473*^9}, {3.719979899524283*^9, 3.71997999478242*^9}, {
  3.719980025399692*^9, 3.7199801083363247`*^9}, {3.7199801788519506`*^9, 
  3.719980182979357*^9}, {3.7199809867133427`*^9, 3.719981047501623*^9}, {
  3.719981103859501*^9, 3.719981106504902*^9}, {3.71998113983178*^9, 
  3.719981273104733*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["TSS files menu", "Section",
 CellChangeTimes->{{3.720376288211605*^9, 3.720376291906342*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"controlTssPathname", "=", 
   RowBox[{"PopupMenu", "[", 
    RowBox[{
     RowBox[{"Dynamic", "[", "dynTssPathname", "]"}], ",", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
       "\"\<~/phab/toolbox/bbp/phaser/tss/strongconnectedness-e4q02-airplan_3-\
100x010-002-016-000-SkipGetMatrix.tss.txt\>\"", "\[Rule]", 
        "\"\<E4Q02: airplan_3 strong connectivity (skip mtx)\>\""}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
       "\"\<~/phab/toolbox/bbp/phaser/tss/strongconnectedness-e4q55-airplan_4-\
100x010-002-016-000-SkipGetMatrix.tss.txt\>\"", "\[Rule]", 
        "\"\<E4Q55: airplan_4 strong connectivity (skip mtx)\>\""}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
       "\"\<~/phab/toolbox/bbp/phaser/tss/strongconnectedness-e4q02-airplan_3-\
200x005-004-016-000-WithGetMatrix.tss.txt\>\"", "\[Rule]", 
        "\"\<E4Q02: airplan_3 strong connectivity (with mtx)\>\""}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
       "\"\<~/phab/toolbox/bbp/phaser/tss/strongconnectedness-e4q55-airplan_4-\
200x005-004-016-000-WithGetMatrix.tss.txt\>\"", "\[Rule]", 
        "\"\<E4Q55: airplan_4 strong connectivity (with mtx)\>\""}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
       "\"\<~/phab/toolbox/bbp/phaser/tss/numberofcities-e4q38-airplan_2-\
100x010-002-016-000-SkipGetProps.tss.txt\>\"", "\[Rule]", 
        "\"\<E4Q38: airplan_2 number of cities\>\""}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
       "\"\<~/phab/toolbox/bbp/phaser/tss/changelocationrebootingevery10times-\
e2q31-snapbuddy_1-294x010.tss.txt\>\"", "\[Rule]", 
        "\"\<E2Q31: SnapBuddy change location\>\""}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
       "\"\<~/phab/toolbox/bbp/phaser/tss/fivecities-e4q45+e4q11-tour_planner-\
250x020.tss.txt\>\"", "\[Rule]", 
        "\"\<E4Q45+E4Q11: TourPlanner city set\>\""}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"\"\<~/numpacks2.tss\>\"", "\[Rule]", "\"\<NumPack2\>\""}], 
       ",", "\[IndentingNewLine]", 
       RowBox[{
       "\"\<~/phab/toolbox/bbp/phaser/tss/term_search_gabfeed.tss\>\"", 
        "\[Rule]", "\"\<Gabfeed term search sp/nonsp (test)\>\""}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
       "\"\</Users/nrosner/phab/toolbox/bbp/data/tss_nodup/file_transfer-\
e4q10-withmi_4-010x003_extra2-6.tss\>\"", "\[Rule]", 
        "\"\<E4Q10: withmi_4 file transfer with extra 2-6 (vuln)\>\""}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
       "\"\</Users/nrosner/phab/toolbox/bbp/data/tss_nodup/file_transfer-\
e4q12-withmi_2-010x003_extra2-6.tss\>\"", "\[Rule]", 
        "\"\<E4Q12: withmi_2 file transfer with extra 2-6 (nonv)\>\""}]}], 
      "\[IndentingNewLine]", "}"}]}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.720204021580225*^9, 3.7202040580242558`*^9}, {
   3.720204525152629*^9, 3.720204541406592*^9}, {3.7202049453915577`*^9, 
   3.720204948367773*^9}, 3.720209158328162*^9, {3.7203671158820953`*^9, 
   3.7203671611073427`*^9}, {3.720367241256472*^9, 3.720367277028599*^9}, {
   3.720376305665586*^9, 3.7203763087947702`*^9}, {3.720376354592575*^9, 
   3.72037646397753*^9}, {3.720376538204863*^9, 3.7203765399334106`*^9}, {
   3.721070824290207*^9, 3.721070845895509*^9}, {3.721070894789648*^9, 
   3.7210709253558903`*^9}, {3.721168313014471*^9, 3.721168353650468*^9}, {
   3.721506159288878*^9, 3.721506198342133*^9}, {3.721506238031851*^9, 
   3.7215062544126043`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"controlLoadDataset", "=", 
   RowBox[{"Button", "[", 
    RowBox[{"\"\<Load dataset\>\"", ",", 
     RowBox[{"DoLoadDataset", "[", "dynTssPathname", "]"}], ",", 
     RowBox[{"Method", "->", "\"\<Queued\>\""}]}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7202045582329407`*^9, 3.7202046103839006`*^9}, {
  3.720205699136689*^9, 3.720205702868751*^9}, {3.720218367352371*^9, 
  3.720218373976782*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"controlSubDatasetSize", "=", 
   RowBox[{"Labeled", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"InputField", "[", 
      RowBox[{
       RowBox[{"Dynamic", "[", "dynSubDatasetSize", "]"}], ",", "Number", ",", 
       RowBox[{"FieldSize", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"3", ",", "1"}], "}"}]}]}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Style", "[", 
      RowBox[{"\"\<Elems\>\"", ",", "11"}], "]"}], ",", "Top"}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.720205350725759*^9, 3.72020545004535*^9}, {
  3.72020556028321*^9, 3.720205580657606*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"controlDoSubDataset", "=", 
   RowBox[{"Button", "[", 
    RowBox[{"\"\<Take subset\>\"", ",", 
     RowBox[{"DoSubDataset", "[", "dynSubDatasetSize", "]"}], ",", 
     RowBox[{"Method", "->", "\"\<Queued\>\""}]}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7202045582329407`*^9, 3.7202046103839006`*^9}, {
   3.72020551823309*^9, 3.720205545048152*^9}, {3.7202055868648252`*^9, 
   3.7202055883506536`*^9}, {3.720205622738096*^9, 3.720205622872302*^9}, {
   3.720205687480095*^9, 3.720205694000793*^9}, 3.720218432619403*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"controlPhaseDetectUsing", "=", "\[IndentingNewLine]", 
   RowBox[{"Labeled", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"SetterBar", "[", 
      RowBox[{
       RowBox[{"Dynamic", "[", "dynPhaseDetectUsing", "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"\"\<Both\>\"", ",", "\"\<Size\>\"", ",", "\"\<Time\>\""}], 
        "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{"Style", "[", 
      RowBox[{"\"\<Detect phases using\>\"", ",", "11"}], "]"}], ",", "Top"}],
     "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.720131647965323*^9, 3.720131677482102*^9}, {
   3.720131830865612*^9, 3.7201318965731363`*^9}, {3.720131952637245*^9, 
   3.72013198291455*^9}, {3.7201320766464043`*^9, 3.720132120062791*^9}, {
   3.720132313467725*^9, 3.720132313924244*^9}, {3.720133644787528*^9, 
   3.720133657560787*^9}, {3.72018719540556*^9, 3.720187279972808*^9}, {
   3.720187757519603*^9, 3.720187764783928*^9}, 3.7202029178796062`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"controlTimeImportance", "=", 
   RowBox[{"Labeled", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"InputField", "[", 
      RowBox[{
       RowBox[{"Dynamic", "[", "dynTimeImportance", "]"}], ",", "Number", ",", 
       RowBox[{"FieldSize", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"3", ",", "1"}], "}"}]}]}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Style", "[", 
      RowBox[{"\"\<Time%\>\"", ",", "11"}], "]"}], ",", "Top"}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7201888552023973`*^9, 3.720188920709813*^9}, 
   3.720202920413679*^9, {3.720205475449106*^9, 3.7202054755456247`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"controlNumPoints", "=", 
   RowBox[{"Labeled", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"InputField", "[", 
      RowBox[{
       RowBox[{"Dynamic", "[", "dynNumPoints", "]"}], ",", "Number", ",", 
       RowBox[{"FieldSize", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"2", ",", "1"}], "}"}]}]}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Style", "[", 
      RowBox[{"\"\<Points\>\"", ",", "11"}], "]"}], ",", "Top"}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7201872586046658`*^9, 3.7201872848667583`*^9}, {
   3.720188378970757*^9, 3.720188382026039*^9}, 3.720202930116015*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"controlNumIterations", "=", 
   RowBox[{"Labeled", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"InputField", "[", 
      RowBox[{
       RowBox[{"Dynamic", "[", "dynNumIterations", "]"}], ",", "Number", ",", 
       
       RowBox[{"FieldSize", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"2", ",", "1"}], "}"}]}]}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Style", "[", 
      RowBox[{"\"\<Iters\>\"", ",", "11"}], "]"}], ",", "Top"}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.720132347779008*^9, 3.7201323490656853`*^9}, {
   3.720133454105172*^9, 3.720133507795307*^9}, {3.720133557581984*^9, 
   3.720133558623541*^9}, {3.720133613096765*^9, 3.720133614232902*^9}, {
   3.720187288758676*^9, 3.720187299622477*^9}, {3.720187787391004*^9, 
   3.720187788165064*^9}, 3.720187828922916*^9, {3.7201883907733192`*^9, 
   3.720188396996896*^9}, 3.7202030390016727`*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"controlTolerance", "=", 
   RowBox[{"Labeled", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"InputField", "[", 
      RowBox[{
       RowBox[{"Dynamic", "[", "dynTolerance", "]"}], ",", "Number", ",", 
       RowBox[{"FieldSize", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"6", ",", "1"}], "}"}]}]}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Style", "[", 
      RowBox[{"\"\<Tolerance\>\"", ",", "11"}], "]"}], ",", "Top"}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.720132347779008*^9, 3.7201323490656853`*^9}, {
   3.720133454105172*^9, 3.720133507795307*^9}, {3.720133557581984*^9, 
   3.720133603007505*^9}, {3.720187309936432*^9, 3.720187322691082*^9}, {
   3.720187409112337*^9, 3.720187410260518*^9}, 3.720202936266817*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"controlNumStarts", "=", 
   RowBox[{"Labeled", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"InputField", "[", 
      RowBox[{
       RowBox[{"Dynamic", "[", "dynNumStarts", "]"}], ",", "Number", ",", 
       RowBox[{"FieldSize", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"2", ",", "1"}], "}"}]}]}], "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"Style", "[", 
      RowBox[{"\"\<Starts\>\"", ",", "11"}], "]"}], ",", "Top"}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.720132347779008*^9, 3.7201323490656853`*^9}, {
   3.720133454105172*^9, 3.720133507795307*^9}, {3.720133557581984*^9, 
   3.720133558623541*^9}, {3.720133613096765*^9, 3.720133614232902*^9}, {
   3.720187288758676*^9, 3.720187299622477*^9}, {3.720187787391004*^9, 
   3.720187788165064*^9}, 3.720187828922916*^9, {3.7201883907733192`*^9, 
   3.720188396996896*^9}, {3.7201884295752573`*^9, 3.720188438599234*^9}, 
   3.720202944798094*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{"controlDoPhaseDetect", "=", 
   RowBox[{"Button", "[", 
    RowBox[{"\"\<Detect phases\>\"", ",", "\[IndentingNewLine]", 
     RowBox[{"DoPhaseDetect", "[", 
      RowBox[{
      "ias", ",", "\[IndentingNewLine]", "dynPhaseDetectUsing", ",", 
       "\[IndentingNewLine]", "dynTimeImportance", ",", "\[IndentingNewLine]",
        "dynNumPoints", ",", "\[IndentingNewLine]", "dynNumIterations", ",", 
       "\[IndentingNewLine]", "dynTolerance", ",", "\[IndentingNewLine]", 
       "dynNumStarts"}], "\[IndentingNewLine]", "]"}], ",", 
     RowBox[{"Method", "->", "\"\<Queued\>\""}]}], "\[IndentingNewLine]", 
    "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7201876562490053`*^9, 3.720187730552582*^9}, {
   3.720187865139255*^9, 3.720187904637341*^9}, {3.720188082862031*^9, 
   3.720188084365376*^9}, {3.720188359069324*^9, 3.720188373392557*^9}, {
   3.720188405109182*^9, 3.720188405475265*^9}, {3.7201912162780123`*^9, 
   3.720191247186208*^9}, 3.720202948478395*^9, {3.720218455693467*^9, 
   3.720218458140297*^9}, {3.720227964873796*^9, 3.720227981003755*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ControlPanel", "[", "]"}], ":=", 
  RowBox[{"DynamicModule", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Deploy", "@", 
     RowBox[{"Panel", "[", "\[IndentingNewLine]", 
      RowBox[{"Column", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Row", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
             "controlTssPathname", ",", "\[IndentingNewLine]", 
              "controlLoadDataset", ",", "\[IndentingNewLine]", 
              "controlSubDatasetSize", ",", "\[IndentingNewLine]", 
              "controlDoSubDataset"}], "\[IndentingNewLine]", "}"}], ",", 
            RowBox[{"Spacer", "[", "10", "]"}]}], "\[IndentingNewLine]", 
           "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Row", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"{", "\[IndentingNewLine]", 
             RowBox[{
             "controlPhaseDetectUsing", ",", "\[IndentingNewLine]", 
              "controlTimeImportance", ",", "\[IndentingNewLine]", 
              "controlNumStarts", ",", "\[IndentingNewLine]", 
              "controlNumIterations", ",", "\[IndentingNewLine]", 
              "controlTolerance", ",", "\[IndentingNewLine]", 
              "controlNumPoints", ",", "\[IndentingNewLine]", 
              "controlDoPhaseDetect"}], "\[IndentingNewLine]", "}"}], ",", 
            RowBox[{"Spacer", "[", "12", "]"}], ",", 
            RowBox[{"Alignment", "\[Rule]", "Center"}]}], 
           "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "}"}], ",", 
        
        RowBox[{"Alignment", "\[Rule]", "Center"}], ",", 
        RowBox[{"Spacings", "\[Rule]", "2"}]}], " ", 
       RowBox[{"(*", 
        RowBox[{"between", " ", "rows"}], "*)"}], "\[IndentingNewLine]", 
       "]"}], "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.720132161663763*^9, 3.720132164688035*^9}, {
   3.720132196229886*^9, 3.720132208743683*^9}, {3.720132385124384*^9, 
   3.720132399466551*^9}, {3.720132435526021*^9, 3.72013254141402*^9}, {
   3.720187335155398*^9, 3.7201873888374577`*^9}, {3.7201875772961817`*^9, 
   3.720187578856498*^9}, {3.7201876255610857`*^9, 3.720187628432994*^9}, {
   3.7201876944344482`*^9, 3.7201876949777727`*^9}, {3.720188468067788*^9, 
   3.720188477323604*^9}, {3.7201885598278847`*^9, 3.720188560373169*^9}, {
   3.720188942140745*^9, 3.7201889448748503`*^9}, 3.720202963618308*^9, {
   3.7202046177763567`*^9, 3.720204742648279*^9}, {3.720204781285129*^9, 
   3.720204829628756*^9}, {3.7202048820403423`*^9, 3.720204903133233*^9}, {
   3.7202056004971857`*^9, 3.720205635546883*^9}, {3.720224763935444*^9, 
   3.720224781913392*^9}, {3.720225991459627*^9, 3.720225996463415*^9}, {
   3.720227658032048*^9, 3.7202276660354757`*^9}, {3.720228079546116*^9, 
   3.720228080648571*^9}, {3.7202282585746527`*^9, 3.720228259620041*^9}, 
   3.721097657515285*^9}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DoPhaseDetect", "[", 
     RowBox[{
     "ias_", ",", "using_", ",", "timeImportance_", ",", "numPoints_", ",", 
      "numIters_", ",", "tolerance_", ",", "numStarts_"}], "]"}], ":=", 
    RowBox[{"Module", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "scalingFactor", ",", "padded", ",", "tuples", ",", 
        "measureBreadthUsing"}], "}"}], ",", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Print", "[", "\"\<Starting phase detection\>\"", "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"sdDeltas", "=", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"Drop", "[", 
             RowBox[{"#", ",", "1"}], "]"}], "-", 
            RowBox[{"Drop", "[", 
             RowBox[{"#", ",", 
              RowBox[{"-", "1"}]}], "]"}]}], "&"}], ",", "sdTimes"}], "]"}]}],
        ";", "\[IndentingNewLine]", 
       RowBox[{"scalingFactor", "=", 
        RowBox[{"1500", "*", "timeImportance"}]}], ";", " ", 
       RowBox[{"(*", " ", 
        RowBox[{"PEND", ":", " ", 
         RowBox[{"generalize", " ", "this"}]}], " ", "*)"}], 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"measureBreadthUsing", "=", "\"\<Left\>\""}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"sdBreadths", "=", 
        RowBox[{"Table", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"padded", "=", 
            RowBox[{
             RowBox[{"Join", "[", 
              RowBox[{
               RowBox[{"{", "0", "}"}], ",", 
               RowBox[{"sdDeltas", "[", 
                RowBox[{"[", "i", "]"}], "]"}], ",", 
               RowBox[{"{", "0", "}"}]}], "]"}], "*", "scalingFactor"}]}], 
           ";", "\[IndentingNewLine]", 
           RowBox[{"tuples", "=", 
            RowBox[{"Transpose", "[", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"Drop", "[", 
                RowBox[{"padded", ",", 
                 RowBox[{"-", "1"}]}], "]"}], ",", 
               RowBox[{"Drop", "[", 
                RowBox[{"padded", ",", "1"}], "]"}]}], "}"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{"measureBreadthUsing", "\[Equal]", "\"\<Both\>\""}], ",",
              "\[IndentingNewLine]", 
             RowBox[{"Map", "[", 
              RowBox[{"Total", ",", "tuples"}], "]"}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"(*", "else", "*)"}], "\[IndentingNewLine]", 
             RowBox[{"If", "[", 
              RowBox[{
               RowBox[{"measureBreadthUsing", "\[Equal]", "\"\<Left\>\""}], 
               ",", "\[IndentingNewLine]", 
               RowBox[{"Map", "[", 
                RowBox[{"First", ",", "tuples"}], "]"}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{"(*", 
                RowBox[{"else", " ", "\"\<Right\>\""}], "*)"}], 
               "\[IndentingNewLine]", 
               RowBox[{"Map", "[", 
                RowBox[{"Last", ",", "tuples"}], "]"}]}], 
              "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}], 
          ",", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"i", ",", "1", ",", 
            RowBox[{"Length", "[", "sdDeltas", "]"}]}], "}"}]}], 
         "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"sdSeqs", "=", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"using", "\[Equal]", "\"\<Both\>\""}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Map", "[", 
           RowBox[{"Transpose", ",", 
            RowBox[{"Transpose", "[", 
             RowBox[{"{", 
              RowBox[{"sdSizes", ",", "sdBreadths"}], "}"}], "]"}]}], "]"}], 
          ",", "\[IndentingNewLine]", 
          RowBox[{"(*", "else", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"If", "[", 
           RowBox[{
            RowBox[{"using", "\[Equal]", "\"\<Size\>\""}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"Map", "[", 
             RowBox[{"List", ",", "sdSizes", ",", 
              RowBox[{"{", "2", "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
            RowBox[{"(*", 
             RowBox[{"else", " ", "\"\<Time\>\""}], "*)"}], 
            "\[IndentingNewLine]", 
            RowBox[{"Map", "[", 
             RowBox[{"List", ",", "sdTimes", ",", 
              RowBox[{"{", "2", "}"}]}], "]"}]}], "\[IndentingNewLine]", 
           "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", 
       "\[IndentingNewLine]", "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{"sdSeqs", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "]"}], ";", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"sdCentral", "=", 
        RowBox[{"RunDBA", "[", 
         RowBox[{
         "sdSeqs", ",", "numPoints", ",", "numIters", ",", "tolerance", ",", 
          "numStarts"}], "]"}]}], ";"}]}], "\[IndentingNewLine]", 
     RowBox[{"(*", "\[IndentingNewLine]", 
      RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"ShowColoredByCentral", "[", 
         RowBox[{
          RowBox[{"sdSizes", "[", 
           RowBox[{"[", "i", "]"}], "]"}], ",", "sdCentral"}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"i", ",", "1", ",", 
          RowBox[{"Length", "@", "sdSizes"}], ",", "1"}], "}"}]}], 
       "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", "*)"}], 
     "\[IndentingNewLine]", "\[IndentingNewLine]", "]"}]}], ";"}], 
  "\[IndentingNewLine]"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGAQBWIQbSFawbhp+2vHB+lvOED0pTXv1UC0XH2gDojOW2Rg
DKJfbJ5qCqI3Xf3SBqIvLsjvAMtzJE0H0TaLI2eA6C0Lr4RtBtJVmznDQXRB
bWY0iHbqnBEPotU+laSC6FPKsRkgekfHhWoQrRCnWwOiJVQTJoHoG1rpYHqn
+c3PO4D0jK1cP0D03HkaUjuBdPS9lbIgesXcPNHdQLp23wVVEC3295sRiDax
CzQG0VwMHOXHgPSy+PgqEP3plXUPiJ7CfX0piJb0YF8NosVElLeD6F9O1rtB
9D6dlKMg+oRUzA0QzfSx/SWIruAJZzwOpGMPyzCB6PMbPNRAdAR3CJgGAKoI
u1M=
  "]],

Cell["\<\
WARNING:  I just changed ParseTssFile to ParseTssFileCaching here!\
\>", "Text",
 CellChangeTimes->{{3.729190438282118*^9, 3.729190450769001*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"DoLoadDataset", "[", "tssPathname_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Print", "[", "\"\<Parsing TSS file\>\"", "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"secs", ",", "ias"}], "}"}], "=", 
      RowBox[{"ParseTssFileCaching", "[", "tssPathname", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Print", "[", "\"\<Removing markers\>\"", "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"ias", "=", 
      RowBox[{"Map", "[", 
       RowBox[{"RemoveMarkersIA", ",", "ias"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Print", "[", "\"\<Removing zero-byte packets\>\"", "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"ias", "=", 
      RowBox[{"Map", "[", 
       RowBox[{"RemoveZeroBytePacketsIA", ",", "ias"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"firstSrc", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"ias", "[", 
         RowBox[{"[", "1", "]"}], "]"}], "[", 
        RowBox[{"[", "1", "]"}], "]"}], "[", "\"\<src\>\"", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Print", "[", 
      RowBox[{
      "\"\<PosNeg-ing size using src=\>\"", " ", "<>", " ", "firstSrc"}], 
      "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"ias", "=", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"PosNegIA", "[", 
          RowBox[{"#", ",", "firstSrc"}], "]"}], "&"}], ",", "ias"}], "]"}]}],
      ";", "\[IndentingNewLine]", 
     RowBox[{"Print", "[", "\"\<Done!\>\"", "]"}], ";"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.720205666170528*^9, 3.72020566824288*^9}, {
   3.720205712399508*^9, 3.720205784167226*^9}, {3.720205866936975*^9, 
   3.720205871559091*^9}, {3.7202061336788273`*^9, 3.7202062077573423`*^9}, {
   3.720206405354898*^9, 3.72020640590252*^9}, {3.720206960513658*^9, 
   3.72020696434405*^9}, {3.720207188210073*^9, 3.720207199129525*^9}, {
   3.7202090214802017`*^9, 3.7202090359968977`*^9}, {3.720209288277006*^9, 
   3.72020929458915*^9}, {3.7202094090200777`*^9, 3.720209448003026*^9}, {
   3.720210308595557*^9, 3.720210390659967*^9}, {3.720211228211997*^9, 
   3.720211243039722*^9}, {3.720211299876799*^9, 3.720211373579782*^9}, 
   3.720211408559211*^9, {3.720211587501751*^9, 3.720211613162901*^9}, {
   3.7202292748002653`*^9, 3.72022940414699*^9}, {3.729190431664353*^9, 
   3.729190432663856*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"DoSubDataset", "[", "desiredSampleSize_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "sampleSize", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"sampleSize", "=", 
      RowBox[{"Min", "[", 
       RowBox[{"desiredSampleSize", ",", 
        RowBox[{"Length", "@", "ias"}]}], "]"}]}], ";", " ", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"if", " ", "not", " ", "enough"}], ",", " ", 
       RowBox[{"use", " ", "all"}]}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"sdIndices", "=", 
      RowBox[{"RandomSample", "[", 
       RowBox[{
        RowBox[{"Range", "[", 
         RowBox[{"Length", "[", "ias", "]"}], "]"}], ",", "sampleSize"}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"sdIas", "=", 
      RowBox[{"ias", "[", 
       RowBox[{"[", "sdIndices", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"sdSecs", "=", 
      RowBox[{"secs", "[", 
       RowBox[{"[", "sdIndices", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"sdSizes", "=", 
      RowBox[{"SizesIA", "/@", "sdIas"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"sdTimes", "=", 
      RowBox[{"TimesIA", "/@", "sdIas"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Print", "[", 
      RowBox[{
       RowBox[{"ToString", "[", "sampleSize", "]"}], "<>", "\"\< of \>\"", 
       " ", "<>", 
       RowBox[{"ToString", "[", 
        RowBox[{"Length", "[", "ias", "]"}], "]"}], "<>", 
       "\"\< traces copied to sdIas/sdSecs/sdSizes/sdTimes\>\""}], "]"}], 
     ";"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7202056608043957`*^9, 3.720205664751256*^9}, {
  3.7202062207754927`*^9, 3.720206222632476*^9}, {3.720206259556903*^9, 
  3.7202063961252127`*^9}, {3.720206434454749*^9, 3.720206502919586*^9}, {
  3.720228345344144*^9, 3.720228535682375*^9}, {3.7202294448689137`*^9, 
  3.720229464141542*^9}, {3.720229499328332*^9, 3.720229564240945*^9}, {
  3.72022964363729*^9, 3.7202297313704653`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"DoSubDatasetInOrder", "[", 
   RowBox[{"from_", ",", "to_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"sdIndices", "=", 
      RowBox[{"Range", "[", 
       RowBox[{"from", ",", "to"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"sdIas", "=", 
      RowBox[{"ias", "[", 
       RowBox[{"[", "sdIndices", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"sdSecs", "=", 
      RowBox[{"secs", "[", 
       RowBox[{"[", "sdIndices", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"sdSizes", "=", 
      RowBox[{"SizesIA", "/@", "sdIas"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"sdTimes", "=", 
      RowBox[{"TimesIA", "/@", "sdIas"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Print", "[", 
      RowBox[{
       RowBox[{"ToString", "[", 
        RowBox[{"Length", "[", "sdIndices", "]"}], "]"}], "<>", 
       "\"\< of \>\"", " ", "<>", 
       RowBox[{"ToString", "[", 
        RowBox[{"Length", "[", "ias", "]"}], "]"}], "<>", 
       "\"\< traces copied to sdIas/sdSecs/sdSizes/sdTimes\>\""}], "]"}], 
     ";"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7202056608043957`*^9, 3.720205664751256*^9}, {
  3.7202062207754927`*^9, 3.720206222632476*^9}, {3.720206259556903*^9, 
  3.7202063961252127`*^9}, {3.720206434454749*^9, 3.720206502919586*^9}, {
  3.720228345344144*^9, 3.720228535682375*^9}, {3.7202294448689137`*^9, 
  3.720229464141542*^9}, {3.720229499328332*^9, 3.720229564240945*^9}, {
  3.72022964363729*^9, 3.7202297313704653`*^9}, {3.72541742458365*^9, 
  3.725417474110024*^9}, {3.725417530856928*^9, 3.725417536078782*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Using the MAFFT tool for multiple sequence alignment (MSA)", "Section",
 CellChangeTimes->{{3.721759937500288*^9, 3.721759960222941*^9}}],

Cell["\<\
The mafft tool provides a --text mode that can handle up to 248 characters \
with no special (bio-specific) meaning. As of 2017 it\[CloseCurlyQuote]s also \
a pretty robust and well-maintained tool, and the authors have been very \
responsive. We encode numeric values into characters and run the tool to \
obtain an alignment.
\
\>", "Text",
 CellChangeTimes->{{3.721759972549074*^9, 3.721760064742782*^9}}],

Cell["\<\
Given all the distinct values used, and an alphabet, return a tuple {v2a, \
a2vs} of associations. Each symbol in the alphabet is associated with as many \
values as needed to cover all values. If there are more symbols than distinct \
values, a bijection is created (and only the first N symbols of the alphabet \
are used).\
\>", "Text",
 CellChangeTimes->{{3.721342398869483*^9, 3.721342496444965*^9}, {
  3.7213442622014723`*^9, 3.721344366633315*^9}, {3.7213453301576567`*^9, 
  3.721345390808146*^9}, {3.721345692897895*^9, 3.721345697582151*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"MakeEncoding", "[", 
   RowBox[{"values_", ",", "alphabet_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
     "partition", ",", "uniqueValues", ",", "nValuesPerChar", ",", "v2a", ",",
       "a2vs"}], "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"uniqueValues", "=", 
      RowBox[{"DeleteDuplicates", "[", "values", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"Length", "@", "uniqueValues"}], ">", 
        RowBox[{"Length", "@", "alphabet"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{
         "not", " ", "enough", " ", "symbols", " ", "in", " ", "alphabet"}], 
         ",", " ", 
         RowBox[{"need", " ", "to", " ", "quantize"}]}], "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"nValuesPerChar", "=", 
         RowBox[{"Ceiling", "[", 
          FractionBox[
           RowBox[{"Length", "@", "uniqueValues"}], 
           RowBox[{"Length", "@", "alphabet"}]], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Print", "[", 
         RowBox[{"\"\<Using \>\"", "<>", 
          RowBox[{"ToString", "[", "nValuesPerChar", "]"}], "<>", 
          "\"\< values per symbol\>\""}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"partition", "=", 
         RowBox[{"Partition", "[", 
          RowBox[{"uniqueValues", ",", 
           RowBox[{"UpTo", "[", "nValuesPerChar", "]"}]}], "]"}]}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"enough", " ", "symbols"}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Print", "[", "\"\<Using 1 value per symbol\>\"", "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"make", " ", "singleton", " ", "lists"}], "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"partition", "=", 
         RowBox[{"Map", "[", 
          RowBox[{"List", ",", "uniqueValues"}], "]"}]}], ";"}]}], " ", 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"Print", "[", 
        RowBox[{"\"\<Partition: \>\"", " ", "<>", " ", 
         RowBox[{"ToString", "@", "partition"}]}], "]"}], ";"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"a2vs", "=", 
      RowBox[{"Association", "@", 
       RowBox[{"Table", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"alphabet", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "\[Rule]", 
          RowBox[{"partition", "[", 
           RowBox[{"[", "i", "]"}], "]"}]}], ",", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{"i", ",", 
           RowBox[{"Length", "@", "partition"}]}], "}"}]}], 
        "\[IndentingNewLine]", "]"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"v2a", "=", 
      RowBox[{"Association", "[", "\[IndentingNewLine]", 
       RowBox[{"Rule", "@@@", 
        RowBox[{"Flatten", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Tuples", "/@", 
           RowBox[{"Transpose", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Values", "[", "a2vs", "]"}], ",", 
              RowBox[{"Map", "[", 
               RowBox[{"List", ",", 
                RowBox[{"Keys", "[", "a2vs", "]"}]}], "]"}]}], "}"}], "]"}]}],
           ",", "\[IndentingNewLine]", "1"}], "\[IndentingNewLine]", "]"}]}], 
       "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", 
      RowBox[{"{", 
       RowBox[{"v2a", ",", "a2vs"}], "}"}], "]"}], ";"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.721342475969409*^9, 3.721342521759449*^9}, {
   3.721342584906994*^9, 3.721342682770409*^9}, {3.72134309379235*^9, 
   3.721343161557489*^9}, {3.7213432166934757`*^9, 3.721343326298334*^9}, {
   3.721343399841243*^9, 3.721343417871942*^9}, {3.7213434495833607`*^9, 
   3.721343479379156*^9}, {3.7213435474460583`*^9, 3.721343548974949*^9}, {
   3.721344182319193*^9, 3.721344199707995*^9}, {3.721344234764962*^9, 
   3.7213442581613283`*^9}, 3.721344335098827*^9, {3.7213444281815166`*^9, 
   3.721344448936968*^9}, {3.7213446504678926`*^9, 3.721344703428413*^9}, {
   3.721344760717574*^9, 3.721344763774075*^9}, {3.72134480736594*^9, 
   3.721344807869358*^9}, {3.721344840759988*^9, 3.721344846849008*^9}, {
   3.721344880360585*^9, 3.721344883970614*^9}, {3.7213451589764442`*^9, 
   3.721345212887982*^9}, {3.72134526186169*^9, 3.721345319558288*^9}, {
   3.7213454245744553`*^9, 3.721345493908044*^9}, {3.7213455290609827`*^9, 
   3.7213455455154037`*^9}, {3.7213456416496696`*^9, 
   3.7213456485005836`*^9}, {3.7213456817466*^9, 3.721345690635593*^9}, {
   3.721345818809141*^9, 3.7213458206495247`*^9}, {3.721347108739274*^9, 
   3.721347112982586*^9}, {3.721408026934927*^9, 3.721408051735462*^9}}],

Cell["\<\
The 248 values that mafft can supposedly handle (255 ASCII except a few ones \
that are illegal to use.)\
\>", "Text",
 CellChangeTimes->{{3.721348238966467*^9, 3.721348309652523*^9}, {
  3.721352107014264*^9, 3.721352110759015*^9}, {3.7214080696234818`*^9, 
  3.7214080711880217`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"MafftaChars", "[", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"forbiddenCharCodes", ",", "validCharCodes", ",", "validChars"}],
      "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
     "Perhaps", " ", "these", " ", "should", " ", "be", " ", "global", " ", 
      RowBox[{"constants", "?"}]}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"forbiddenCharCodes", "=", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{"0", " ", 
        RowBox[{"(*", " ", 
         RowBox[{"NULL", " ", 
          RowBox[{"(", 
           RowBox[{"0", "x00"}], ")"}]}], " ", "*)"}], ",", 
        "\[IndentingNewLine]", "10", " ", 
        RowBox[{"(*", " ", 
         RowBox[{"Line", " ", "Feed", " ", 
          RowBox[{"(", 
           RowBox[{"0", "x0a"}], ")"}]}], " ", "*)"}], ",", 
        "\[IndentingNewLine]", "13", " ", 
        RowBox[{"(*", " ", 
         RowBox[{"Carriage", " ", "Return", " ", 
          RowBox[{"(", 
           RowBox[{"0", "x0d"}], ")"}]}], " ", "*)"}], ",", 
        "\[IndentingNewLine]", "32", " ", 
        RowBox[{"(*", " ", 
         RowBox[{"Space", " ", 
          RowBox[{"(", 
           RowBox[{"0", "x20"}], ")"}]}], " ", "*)"}], ",", 
        "\[IndentingNewLine]", "45", " ", 
        RowBox[{"(*", " ", 
         RowBox[{"-", 
          RowBox[{"(", 
           RowBox[{"0", "x2D"}], ")"}]}], " ", "*)"}], ",", 
        "\[IndentingNewLine]", "60", " ", 
        RowBox[{"(*", " ", 
         RowBox[{"<", 
          RowBox[{"(", 
           RowBox[{"0", "x3C"}], ")"}]}], " ", "*)"}], ",", 
        "\[IndentingNewLine]", "61", " ", 
        RowBox[{"(*", " ", 
         RowBox[{"=", 
          RowBox[{"(", 
           RowBox[{"0", "x3D"}], ")"}]}], " ", "*)"}], ",", 
        "\[IndentingNewLine]", "62"}], " ", 
       RowBox[{"(*", " ", 
        RowBox[{">", 
         RowBox[{"(", 
          RowBox[{"0", "x3E"}], ")"}]}], " ", "*)"}], "\[IndentingNewLine]", 
       "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"validCharCodes", "=", 
      RowBox[{"Complement", "[", 
       RowBox[{
        RowBox[{"Range", "[", 
         RowBox[{"0", ",", "255"}], "]"}], ",", "forbiddenCharCodes"}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"validChars", "=", 
      RowBox[{"Map", "[", 
       RowBox[{"FromCharacterCode", ",", "validCharCodes"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "validChars", "]"}], ";"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.721352131042707*^9, 3.721352167374403*^9}, {
  3.721352202257057*^9, 3.721352221776766*^9}}],

Cell["\<\
A subset of 187 characters that mafft should be able to handle and are \
printable, sorted so that regular letters appear first.\
\>", "Text",
 CellChangeTimes->{{3.721352448758512*^9, 3.721352463265127*^9}, {
  3.7213525943740273`*^9, 3.721352617049056*^9}, {3.721353008881687*^9, 
  3.721353009201771*^9}, {3.72140768636058*^9, 3.721407702771306*^9}, {
  3.721420227408839*^9, 3.72142022771947*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"MafftaPrintableChars", "[", "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"Join", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"CharacterRange", "[", 
     RowBox[{"\"\<A\>\"", ",", "\"\<~\>\""}], "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"CharacterRange", "[", 
     RowBox[{"\"\<!\>\"", ",", "\"\<,\>\""}], "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"CharacterRange", "[", 
     RowBox[{"\"\<.\>\"", ",", "\"\<;\>\""}], "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"CharacterRange", "[", 
     RowBox[{"\"\<?\>\"", ",", "\"\<@\>\""}], "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"{", "\"\<\.9e\>\"", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"CharacterRange", "[", 
     RowBox[{"\"\<\[DownExclamation]\>\"", ",", "\"\<\[YDoubleDot]\>\""}], 
     "]"}], ",", "\[IndentingNewLine]", 
    RowBox[{"{", "\"\<\.8e\>\"", "}"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7213522285185413`*^9, 3.7213522593254766`*^9}, {
  3.72135241667649*^9, 3.721352438559677*^9}, {3.721352566051299*^9, 
  3.7213525818246202`*^9}, {3.72135295111938*^9, 3.7213529516553097`*^9}, {
  3.721352989072957*^9, 3.721352998571722*^9}, {3.721420233182289*^9, 
  3.7214202374681797`*^9}}],

Cell["\<\
A subset of 89 characters that should almost certainly be completely safe \
(using this while debugging a potential encoding quirk).\
\>", "Text",
 CellChangeTimes->{{3.721407712298985*^9, 3.7214077590458403`*^9}, {
  3.721407965847337*^9, 3.721407970113246*^9}, {3.721408262977935*^9, 
  3.721408283125112*^9}, {3.721420166007514*^9, 3.721420166460236*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"MafftaTotallySafeChars", "[", "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"Join", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"CharacterRange", "[", 
     RowBox[{"\"\<!\>\"", ",", "\"\<,\>\""}], "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"CharacterRange", "[", 
     RowBox[{"\"\<.\>\"", ",", "\"\<;\>\""}], "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"CharacterRange", "[", 
     RowBox[{"\"\<@\>\"", ",", "\"\<~\>\""}], "]"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7214077619395313`*^9, 3.7214077771783237`*^9}, {
  3.721407894659697*^9, 3.721407954903029*^9}, {3.721408340525182*^9, 
  3.721408344382847*^9}, {3.721408433301115*^9, 3.7214084492017*^9}, {
  3.721420139459847*^9, 3.721420156681356*^9}, {3.721420259395461*^9, 
  3.72142026184002*^9}}],

Cell["\<\
A subset of characters that apparently are safe? (using this while debugging \
a potential encoding quirk).\
\>", "Text",
 CellChangeTimes->{{3.721407712298985*^9, 3.7214077590458403`*^9}, {
  3.721407965847337*^9, 3.721407970113246*^9}, {3.7214082569228983`*^9, 
  3.7214082906152773`*^9}, {3.721408454985602*^9, 3.721408457077734*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"MafftaApparentlySafeChars", "[", "]"}], ":=", 
  "\[IndentingNewLine]", 
  RowBox[{"Join", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"CharacterRange", "[", 
     RowBox[{"\"\<!\>\"", ",", "\"\<,\>\""}], "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"CharacterRange", "[", 
     RowBox[{"\"\<.\>\"", ",", "\"\<;\>\""}], "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"CharacterRange", "[", 
     RowBox[{"\"\<@\>\"", ",", "\"\<~\>\""}], "]"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"CharacterRange", "[", 
     RowBox[{"\"\<\[RegisteredTrademark]\>\"", ",", "\"\<\[ODoubleDot]\>\""}],
      "]"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7214077619395313`*^9, 3.7214077771783237`*^9}, {
   3.721407894659697*^9, 3.721407954903029*^9}, {3.721408305872581*^9, 
   3.721408317417034*^9}, 3.721408451501816*^9, {3.721422311082697*^9, 
   3.7214223169245*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"MakeEncoding248", "[", "seqs_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"validChars", ",", "uniqueValues"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"validChars", "=", 
      RowBox[{"Chars248", "[", "]"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"uniqueValues", "=", 
      RowBox[{"DeleteDuplicates", "@", 
       RowBox[{"Flatten", "@", "seqs"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"v2a", ",", "a2vs"}], "}"}], "=", 
      RowBox[{"MakeEncoding", "[", 
       RowBox[{
        RowBox[{"Sort", "[", "uniqueValues", "]"}], ",", "validChars"}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", 
      RowBox[{"{", 
       RowBox[{"v2a", ",", "a2vs"}], "}"}], "]"}], ";"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7213474207021933`*^9, 3.7213475151900263`*^9}, {
  3.721352176485468*^9, 3.721352197775001*^9}}],

Cell["Return list of encoded strings.", "Text",
 CellChangeTimes->{{3.7213462310414743`*^9, 3.721346276381748*^9}, {
  3.7213477553882523`*^9, 3.721347757899887*^9}, {3.721348314246244*^9, 
  3.721348315945071*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"SeqsToStrings", "[", 
   RowBox[{"seqs_", ",", "v2a_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "strings", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"strings", "=", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"StringJoin", "[", 
          RowBox[{"Map", "[", 
           RowBox[{"v2a", ",", "#"}], "]"}], "]"}], "&"}], ",", "seqs"}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "strings", "]"}], ";"}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGAQBWIQ/W7Bu/YjO187ntkq1weiLyudmwqize/3LgHRWvUM
d0F0T3jqHxB96MUrpqNA+liuBCeIjg9skADRUrO9lED0qp5bWiD6jXiYNoj+
1FVrAKIPSu9yBtFRiTtjrwLpuqKzYJrt6bFkEL3coDwVRF+Z80fgGpD2K2IU
AdE1YnZsd4B04c6LXCDa5FWqNIj+ovhIHUSLCVXGPgXZNzG1FERHRQUzPAfS
V1mvsYDo5x/qs0D0CeHwChA9aaFaDYj21zMH09fbNraC6M4c/24Q3aV49RWI
dhKqeg2iJ6joWbwA0he2b7YE0du3sHuC6Kb/37xAdMIvmRAQXZAZAaYB2CXD
Zw==
  "]],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"StringsToFASTA", "[", "strings_", "]"}], ":=", 
   RowBox[{"StringJoin", "[", "\[IndentingNewLine]", 
    RowBox[{"Table", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"StringJoin", "[", 
       RowBox[{"\"\<>\>\"", "<>", 
        RowBox[{"ToString", "[", "i", "]"}], "<>", "\"\<\\n\>\"", "<>", 
        RowBox[{"strings", "[", 
         RowBox[{"[", "i", "]"}], "]"}], "<>", "\"\<\\n\\n\>\""}], "]"}], ",",
       "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"i", ",", "1", ",", 
        RowBox[{"Length", "@", "strings"}]}], "}"}]}], "\[IndentingNewLine]", 
     "]"}], "\[IndentingNewLine]", "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SeqsToFASTA", "[", "seqs_", "]"}], ":=", 
  RowBox[{"StringsToFASTA", "@", 
   RowBox[{"SeqsToStrings", "@", "seqs"}]}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.721308918669485*^9, 3.721308989238687*^9}, {
  3.721309025431532*^9, 3.721309043451029*^9}, {3.72131026393604*^9, 
  3.721310339649377*^9}, {3.721347685059741*^9, 3.721347694230146*^9}}],

Cell[TextData[{
 "Parse standard output from MAFFT and return {labels, strings}.\n\n",
 StyleBox["NOTE: ",
  FontWeight->"Bold"],
 "Both exporting the input and parsing the output need to use ISO Latin-1 for \
consistency. (No Unicode!)"
}], "Text",
 CellChangeTimes->{{3.721424486767557*^9, 3.7214245316187677`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ParseMafftOutput", "[", "pathname_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "chunks", ",", "labStrs", ",", "labStrPairs", ",", "labels", ",", 
      "strings"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"chunks", "=", 
      RowBox[{"Map", "[", 
       RowBox[{"StringTrim", ",", "\[IndentingNewLine]", 
        RowBox[{"StringSplit", "[", 
         RowBox[{
          RowBox[{"Import", "[", 
           RowBox[{"pathname", ",", "\"\<Text\>\"", ",", 
            RowBox[{"CharacterEncoding", "\[Rule]", "\"\<ISOLatin1\>\""}]}], 
           "]"}], ",", "\"\<>\>\""}], "]"}]}], "\[IndentingNewLine]", "]"}]}],
      ";", "\[IndentingNewLine]", 
     RowBox[{"labStrs", "=", 
      RowBox[{"Map", "[", 
       RowBox[{"StringSplit", ",", "chunks"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"labStrPairs", "=", 
      RowBox[{"Map", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"First", "[", 
            RowBox[{"Take", "[", 
             RowBox[{"#", ",", "1"}], "]"}], "]"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"StringJoin", "[", 
            RowBox[{"StringTrim", "/@", 
             RowBox[{"Drop", "[", 
              RowBox[{"#", ",", "1"}], "]"}]}], "]"}]}], "}"}], "&"}], ",", 
        "\[IndentingNewLine]", "labStrs"}], "\[IndentingNewLine]", "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"labels", ",", "strings"}], "}"}], "=", 
      RowBox[{"Transpose", "@", "labStrPairs"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", 
      RowBox[{"{", 
       RowBox[{"labels", ",", "strings"}], "}"}], "]"}], ";"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.721310723429764*^9, 3.721310758887377*^9}, {
  3.721310817251855*^9, 3.721310869591527*^9}, {3.721310909925926*^9, 
  3.721311041670854*^9}, {3.721311076076092*^9, 3.721311165738616*^9}, {
  3.7213112240718203`*^9, 3.7213113783793697`*^9}, {3.721311412062234*^9, 
  3.721311437064949*^9}, {3.7213114825724077`*^9, 3.721311526407879*^9}, {
  3.721319248218479*^9, 3.721319250372759*^9}, {3.721321373604146*^9, 
  3.721321423517996*^9}, {3.7214233646892557`*^9, 3.721423372538381*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"default", " ", "without", " ", "moreArgs"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"RunMafft", "[", 
     RowBox[{"seqs_", ",", "v2a_", ",", "op_", ",", "ep_"}], "]"}], ":=", 
    RowBox[{"RunMafft", "[", 
     RowBox[{"seqs", ",", "v2a", ",", "op", ",", "ep", ",", "\"\<\>\""}], 
     "]"}]}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{"more", " ", "general", " ", "version"}], " ", "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"RunMafft", "[", 
     RowBox[{"seqs_", ",", "v2a_", ",", "op_", ",", "ep_", ",", "moreArgs_"}],
      "]"}], ":=", 
    RowBox[{"Module", "[", 
     RowBox[{
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"exepath", "=", "\"\</usr/local/bin/mafft\>\""}], ",", 
        "\[IndentingNewLine]", "strings", ",", "fastaString", ",", 
        "\[IndentingNewLine]", "tempFileIn", ",", "tempFileOut", ",", 
        "command", ",", "logText", ",", "resultLabels", ",", "resultStrings", 
        ",", "resultMatrix"}], "\[IndentingNewLine]", "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"strings", "=", 
        RowBox[{"SeqsToStrings", "[", 
         RowBox[{"seqs", ",", "v2a"}], "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"fastaString", "=", 
        RowBox[{"StringsToFASTA", "[", "strings", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"tempFileIn", "=", 
        RowBox[{"CreateFile", "[", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"tempFileOut", "=", 
        RowBox[{"CreateFile", "[", "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"Export", "[", 
        RowBox[{"tempFileIn", ",", "fastaString", ",", "\"\<Text\>\"", ",", 
         RowBox[{"CharacterEncoding", "\[Rule]", "\"\<ISOLatin1\>\""}]}], 
        "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"command", "=", 
        RowBox[{
        "exepath", "<>", "\"\< \>\"", "\[IndentingNewLine]", "<>", 
         "\"\<--text\>\"", "<>", "\"\< \>\"", "\[IndentingNewLine]", "<>", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"op", "===", "None"}], ",", "\"\<\>\"", ",", 
           RowBox[{"\"\<--op \>\"", "<>", 
            RowBox[{"ToString", "[", "op", "]"}], "<>", "\"\< \>\""}]}], 
          "]"}], "\[IndentingNewLine]", "<>", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{"ep", "===", "None"}], ",", "\"\<\>\"", ",", 
           RowBox[{"\"\<--ep \>\"", "<>", 
            RowBox[{"ToString", "[", "ep", "]"}], "<>", "\"\< \>\""}]}], 
          "]"}], "\[IndentingNewLine]", "<>", "moreArgs", "<>", "\"\< \>\"", 
         "\[IndentingNewLine]", "<>", "tempFileIn", "<>", "\"\< \>\"", 
         "\[IndentingNewLine]", "<>", " ", "\"\<>\>\"", " ", "<>", 
         "tempFileOut"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{"\"\<Command: \>\"", "<>", "command"}], "]"}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"Print", "[", "tempFileIn", "]"}], ";", "\[IndentingNewLine]", 
       
       RowBox[{"logText", "=", 
        RowBox[{"RunProcess", "[", 
         RowBox[{
         "$SystemShell", ",", "\"\<StandardError\>\"", ",", "command"}], 
         "]"}]}], ";", "\[IndentingNewLine]", 
       RowBox[{"Print", "[", "tempFileOut", "]"}], ";", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"Print", "[", 
          RowBox[{"\"\<MAFFT log: \>\"", "<>", "logText"}], "]"}], ";"}], " ",
         "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"resultLabels", ",", "resultStrings"}], "}"}], "=", 
        RowBox[{"ParseMafftOutput", "[", "tempFileOut", "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"resultMatrix", "=", 
        RowBox[{"Map", "[", 
         RowBox[{"Characters", ",", "resultStrings"}], "]"}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{"DeleteFile", "[", "tempFileIn", "]"}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"DeleteFile", "[", "tempFileOut", "]"}], ";"}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{"Return", "[", 
        RowBox[{"{", 
         RowBox[{"resultLabels", ",", "resultMatrix"}], "}"}], "]"}], ";"}]}],
      "\[IndentingNewLine]", "]"}]}]}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7198706974459667`*^9, 3.719870741911626*^9}, {
   3.7198711864974413`*^9, 3.719871225622251*^9}, {3.7198712589806433`*^9, 
   3.719871273736635*^9}, {3.719871333690139*^9, 3.719871545348707*^9}, {
   3.719871579223404*^9, 3.7198716229717417`*^9}, {3.719871677798099*^9, 
   3.719871699485221*^9}, {3.7198719389399023`*^9, 3.719871960660776*^9}, {
   3.719872013482592*^9, 3.7198720632547693`*^9}, {3.719872103701589*^9, 
   3.719872106061157*^9}, {3.719872159453998*^9, 3.719872214351907*^9}, {
   3.71987226343227*^9, 3.7198722651774*^9}, {3.719872299674304*^9, 
   3.719872344642992*^9}, {3.719872432245557*^9, 3.7198724376913433`*^9}, 
   3.7198817725913153`*^9, {3.720011108665193*^9, 3.7200111138302317`*^9}, {
   3.720011152969035*^9, 3.7200111813596*^9}, {3.7200113126963043`*^9, 
   3.720011455844285*^9}, {3.720011493527258*^9, 3.720011495588235*^9}, {
   3.720012045108431*^9, 3.720012049079484*^9}, {3.7200121286680403`*^9, 
   3.72001215123929*^9}, {3.720012181514328*^9, 3.7200121941377563`*^9}, {
   3.7200122309321747`*^9, 3.720012231051529*^9}, {3.720012320318058*^9, 
   3.7200123574166594`*^9}, {3.720188099911751*^9, 3.7201882036627483`*^9}, {
   3.720203054832752*^9, 3.7202030627400227`*^9}, {3.720228002161336*^9, 
   3.720228059448732*^9}, {3.720228125337358*^9, 3.7202281952022057`*^9}, {
   3.72022822710289*^9, 3.720228228503776*^9}, {3.720299250691728*^9, 
   3.720299263340399*^9}, {3.721310014525587*^9, 3.721310105099558*^9}, 
   3.7213102064728537`*^9, {3.721310406858823*^9, 3.72131047033436*^9}, {
   3.721310549986569*^9, 3.721310579551423*^9}, {3.721316702338232*^9, 
   3.721316728319412*^9}, {3.7213168368394547`*^9, 3.721317083547614*^9}, {
   3.721317125901527*^9, 3.7213171786165123`*^9}, {3.721317216231392*^9, 
   3.721317279088729*^9}, {3.721317331662127*^9, 3.721317343688738*^9}, {
   3.721317664108839*^9, 3.7213176937218323`*^9}, {3.721319142081903*^9, 
   3.721319167315983*^9}, {3.7213192550385036`*^9, 3.7213192602195253`*^9}, {
   3.721319696611047*^9, 3.721319772666127*^9}, {3.721347984650372*^9, 
   3.721347990023534*^9}, {3.721348324039229*^9, 3.72134832916681*^9}, {
   3.7213483973909273`*^9, 3.7213484359826927`*^9}, {3.721352909721109*^9, 
   3.7213529120235023`*^9}, {3.721398570484406*^9, 3.721398572664178*^9}, {
   3.7214040746112633`*^9, 3.7214041052699633`*^9}, {3.72142260504289*^9, 
   3.721422610553185*^9}, {3.721423606565633*^9, 3.7214236178811617`*^9}, {
   3.7214917015760603`*^9, 3.721491849626799*^9}, {3.721491989514031*^9, 
   3.721491993962059*^9}, 3.721492024707333*^9, {3.722731254726941*^9, 
   3.722731287848583*^9}, {3.7227313936956997`*^9, 3.7227314233406467`*^9}}],

Cell["Given a matrix of chars, return a matrix of char codes.", "Text",
 CellChangeTimes->{{3.721346652496799*^9, 3.721346664412073*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"MtxToCharCodes", "[", "mtx_", "]"}], ":=", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Flatten", "@", 
      RowBox[{"Map", "[", 
       RowBox[{"ToCharacterCode", ",", "#"}], "]"}]}], "&"}], ",", "mtx"}], 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.721346639335534*^9, 3.721346645024034*^9}, {
   3.721346677526267*^9, 3.721346677756907*^9}, 3.721346777800815*^9, {
   3.721403497008109*^9, 3.721403500740067*^9}}],

Cell[TextData[{
 "Build a consensus vector based on an MSA matrix.\n\n",
 StyleBox["PEND: ",
  FontWeight->"Bold"],
 "This version still uses the Mtx of encoded CHARS. Should we be using the \
MSA with the actual values?"
}], "Text",
 CellChangeTimes->{{3.721424798961957*^9, 3.7214248514300737`*^9}, {
  3.721491676569524*^9, 3.7214916912898912`*^9}, {3.72157125978983*^9, 
  3.721571268678803*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"MtxConsensus", "[", "mtx_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"height", "=", 
       RowBox[{"Length", "@", "mtx"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"width", "=", 
       RowBox[{"Length", "@", 
        RowBox[{"First", "@", "mtx"}]}]}], ",", "\[IndentingNewLine]", 
      "column", ",", "freqs", ",", "normalizedFreqs", ",", 
      "largestNormalizedFreq"}], "\[IndentingNewLine]", "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"DeleteDuplicates", "[", 
         RowBox[{"Map", "[", 
          RowBox[{"Length", ",", "mtx"}], "]"}], "]"}], "\[NotEqual]", 
        RowBox[{"{", "width", "}"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"Ragged", " ", 
         RowBox[{"matrix", "?", " ", "Should"}], " ", "not", " ", 
         RowBox[{"happen", "!"}]}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"Print", "[", 
        RowBox[{"\"\<Aligned matrix is ragged! Row lengths: \>\"", "<>", 
         RowBox[{"ToString", "[", 
          RowBox[{"Map", "[", 
           RowBox[{"Length", ",", "mtx"}], "]"}], "]"}]}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
       "Print", "[", "\"\<Aligned matrix is nice and rectangular.\>\"", 
        "]"}]}], "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Table", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"column", "=", 
         RowBox[{"mtx", "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", "colIndex"}], "]"}], "]"}]}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"freqs", "=", 
         RowBox[{
          RowBox[{"Transpose", "[", 
           RowBox[{"Tally", "[", "column", "]"}], "]"}], "[", 
          RowBox[{"[", "2", "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"normalizedFreqs", "=", 
         FractionBox["freqs", "height"]}], ";", "\[IndentingNewLine]", 
        RowBox[{"largestNormalizedFreq", "=", 
         RowBox[{"Max", "[", "normalizedFreqs", "]"}]}], ";", 
        "\[IndentingNewLine]", "largestNormalizedFreq"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"colIndex", ",", "1", ",", "width"}], "}"}]}], 
      "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7213199217753563`*^9, 3.721320132313452*^9}, {
  3.721320339165666*^9, 3.721320370160511*^9}, {3.721320423162856*^9, 
  3.721320427506311*^9}, {3.721320482077523*^9, 3.72132070025629*^9}, {
  3.721320742910097*^9, 3.721320826557292*^9}, {3.721395480673805*^9, 
  3.721395632806123*^9}, {3.721395779881559*^9, 3.721395808781419*^9}, {
  3.7214037819828653`*^9, 3.721403807902001*^9}}],

Cell[TextData[{
 "Given a list of sequences of values and the corresponding alignment matrix \
OF CHARS, return a new matrix where successive non-gap values are replaced by \
the corresponding sequence values (and gaps are left untouched).\n\nThis \
allows to convert the MSA (of encoded chars) returned by MAFFT into an MSA \
with the original numeric values.\n\n",
 StyleBox["NOTE: ",
  FontWeight->"Bold"],
 "We will always get the exact original values because we remember them. But \
some precision may have been lost in transit (if multiple values had to be \
encoded as the same char). In other words, the values are correct but the MSA \
alignment could have been affected by the quantization of values. (Try using \
an extremely small alphabet and you should see the effect.)\n\n",
 StyleBox["NOTE:",
  FontWeight->"Bold"],
 " This assumes that gaps are the string \[OpenCurlyDoubleQuote]-\
\[OpenCurlyDoubleQuote] (dash char), and replaces them with Null."
}], "Text",
 CellChangeTimes->{{3.7214216561183863`*^9, 3.721421681702713*^9}, {
  3.721423876614181*^9, 3.721423886442853*^9}, {3.721424586901042*^9, 
  3.721424773063652*^9}, {3.7215709795370817`*^9, 3.7215709896585503`*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"SeqsUnderMtx", "[", 
    RowBox[{"seqs_", ",", "mtx_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "msaWithDashes", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"msaWithDashes", "=", 
       RowBox[{"MapThread", "[", 
        RowBox[{"SeqUnderMtxRow", ",", 
         RowBox[{"{", 
          RowBox[{"seqs", ",", "mtx"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"ReplaceAll", "[", 
        RowBox[{"msaWithDashes", ",", 
         RowBox[{"\"\<-\>\"", "\[Rule]", "Null"}]}], "]"}], "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"SeqUnderMtxRow", "[", 
    RowBox[{"seq_", ",", "mtxRow_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "rules", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"rules", "=", 
       RowBox[{"Rule", "@@@", 
        RowBox[{"Transpose", "[", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"PositionsThatAreNot", "[", 
            RowBox[{"mtxRow", ",", "\"\<-\>\""}], "]"}], ",", 
           "\[IndentingNewLine]", "seq"}], "\[IndentingNewLine]", "}"}], 
         "]"}]}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", 
       RowBox[{"ReplacePart", "[", 
        RowBox[{"mtxRow", ",", "rules"}], "]"}], "]"}], ";"}]}], 
    "\[IndentingNewLine]", "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"PositionsThatAreNot", "[", 
   RowBox[{"list_", ",", "elem_"}], "]"}], ":=", 
  RowBox[{"Complement", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Range", "[", 
     RowBox[{"Length", "[", "list", "]"}], "]"}], ",", 
    RowBox[{"Flatten", "@", 
     RowBox[{"Position", "[", 
      RowBox[{"list", ",", "elem"}], "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7214189459631643`*^9, 3.7214189978024473`*^9}, {
  3.721421437139098*^9, 3.721421481701736*^9}, {3.721421703520883*^9, 
  3.721421704135294*^9}, {3.7214217679982653`*^9, 3.721421772092938*^9}, {
  3.721421854054228*^9, 3.721421854690139*^9}, {3.721423889910499*^9, 
  3.721423932669139*^9}, {3.721571102682528*^9, 3.721571152766432*^9}}],

Cell[TextData[{
 "Given a set of values, return an association that can be applied as a \
function that maps values to colors.\n\n",
 StyleBox["NOTE: ",
  FontWeight->"Bold"],
 "The value Null is treated specially, and mapped to the color white."
}], "Text",
 CellChangeTimes->{{3.7213949159468718`*^9, 3.721394951135325*^9}, {
  3.7214250135465403`*^9, 3.721425014745638*^9}, {3.721425053097043*^9, 
  3.7214250699273157`*^9}, {3.72157092760749*^9, 3.721570928629442*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ValuesToColors", "[", "values_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"uniqueValues", ",", "colors", ",", "rules"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"uniqueValues", "=", 
      RowBox[{"DeleteDuplicates", "[", "values", "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"Special", " ", 
       RowBox[{"case", ":", " ", 
        RowBox[{"remove", " ", "\"\<-\>\"", " ", "if", " ", 
         RowBox[{"it", "'"}], "s", " ", "there"}]}]}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"uniqueValues", "=", 
      RowBox[{"DeleteCases", "[", 
       RowBox[{"values", ",", "Null"}], "]"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"colors", "=", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{"ColorData", "[", "54", "]"}], ",", 
        RowBox[{"Range", "[", 
         RowBox[{"Length", "[", "uniqueValues", "]"}], "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"rules", "=", 
      RowBox[{"Rule", "@@@", 
       RowBox[{"Transpose", "[", 
        RowBox[{"{", 
         RowBox[{"uniqueValues", ",", "colors"}], "}"}], "]"}]}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"Special", " ", 
       RowBox[{"case", ":", " ", 
        RowBox[{"map", " ", "\"\<-\>\"", " ", "to", " ", "White"}]}]}], " ", 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{"rules", "=", 
      RowBox[{"Append", "[", 
       RowBox[{"rules", ",", 
        RowBox[{"{", 
         RowBox[{"Null", "\[Rule]", "White"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", 
      RowBox[{"Association", "[", "rules", "]"}], "]"}], ";"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.721394609283574*^9, 3.721394772916481*^9}, {
  3.7213948057609797`*^9, 3.7213948867873173`*^9}, {3.721395255709*^9, 
  3.721395285909404*^9}, {3.721425092798332*^9, 3.721425188013196*^9}, {
  3.721570937102688*^9, 3.721570947473763*^9}}],

Cell["\<\
Given an MSA with original values and Nulls, compute a few additional rows of \
interesting stats that are relevant toward finding consensus / good splitting \
points.\
\>", "Text",
 CellChangeTimes->{{3.721571288810834*^9, 3.721571335358447*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"MsaConsensus", "[", "msa_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
     "rows", ",", "resultVecs", ",", "\[IndentingNewLine]", "rowWithoutGaps", 
      ",", "\[IndentingNewLine]", "densities", ",", "spreads"}], 
     "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{"Let", "'"}], "s", " ", "work", " ", "on", 
      "\[NonBreakingSpace]", "columns", " ", "as", " ", "if", " ", "they", 
      " ", "were", " ", "rows", " ", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"easier", " ", "to", " ", "index"}], ")"}], "."}]}], " ", 
     "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"rows", "=", 
      RowBox[{"Transpose", "[", "msa", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "Compute", " ", "a", " ", "vector", " ", "of", " ", "interesting", " ", 
       "aggregations", " ", "per", " ", 
       RowBox[{"row", "."}]}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"resultVecs", "=", 
      RowBox[{"Table", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"rowWithoutGaps", "=", 
          RowBox[{"DeleteCases", "[", 
           RowBox[{"row", ",", "Null"}], "]"}]}], ";", "\[IndentingNewLine]", 
         
         RowBox[{"dens", "=", 
          RowBox[{
           FractionBox[
            RowBox[{"Length", "[", "rowWithoutGaps", "]"}], 
            RowBox[{"Length", "[", "row", "]"}]], "//", "N"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"spread", "=", 
          RowBox[{"If", "[", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "[", "rowWithoutGaps", "]"}], ">", "2"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"StandardDeviation", "[", "rowWithoutGaps", "]"}], "//", 
             "N"}], ",", "\[IndentingNewLine]", "0"}], "\[IndentingNewLine]", 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"{", 
          RowBox[{"dens", ",", "spread"}], "}"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"row", ",", "rows"}], "}"}]}], "\[IndentingNewLine]", 
       "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"densities", ",", "spreads"}], "}"}], "=", 
      RowBox[{"Transpose", "[", "resultVecs", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Return", "[", 
      RowBox[{"{", 
       RowBox[{"densities", ",", 
        RowBox[{"Rescale", "@", "spreads"}]}], "}"}], "]"}], ";"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.721571337377181*^9, 3.721571704954567*^9}, {
  3.721571824206213*^9, 3.721571868373056*^9}}],

Cell[TextData[{
 "Try all-in-one!\n\n",
 StyleBox["NOTE: ",
  FontWeight->"Bold"],
 "This affects a number of global vars (intentionally, so we can play with \
them later)."
}], "Text",
 CellChangeTimes->{{3.7213949763674507`*^9, 3.721394981656478*^9}, {
  3.721424244609501*^9, 3.721424261080151*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Try", "[", 
    RowBox[{"seqs_", ",", "op_", ",", "ep_"}], "]"}], ":=", 
   RowBox[{"Try", "[", 
    RowBox[{"seqs", ",", "op", ",", "ep", ",", "\"\<\>\""}], "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Try", "[", 
   RowBox[{"seqs_", ",", "op_", ",", "ep_", ",", "moreArgs_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "uniqueValues", ",", "minVal", ",", "maxVal", ",", "colorFunction", ",", 
      "exampleSeqs", ",", "plotExampleSeqs", ",", "plotWithoutAlignment", ",",
       "plotWithAlignment", ",", "plotAlignmentConsensus", ",", 
      "interactivePlot"}], "}"}], ",", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
     "Distinct", " ", "values", " ", "used", " ", "anywhere", " ", "in", " ", 
      "the", " ", "seqs"}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"uniqueValues", "=", 
      RowBox[{"DeleteDuplicates", "@", 
       RowBox[{"Flatten", "[", "seqs", "]"}]}]}], ";", "\[IndentingNewLine]", 
     
     RowBox[{
      RowBox[{"{", 
       RowBox[{"minVal", ",", "maxVal"}], "}"}], "=", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Min", "[", "uniqueValues", "]"}], ",", 
        RowBox[{"Max", "[", "uniqueValues", "]"}]}], "}"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "Color", " ", "function", " ", "based", " ", "on", " ", "all", " ", 
       "values", " ", "used", " ", "by", " ", "seqs"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"colorFunction", "=", 
      RowBox[{"ValuesToColors", "[", "uniqueValues", "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"EXAMPLE", " ", "SEQS"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"exampleSeqs", "=", 
      RowBox[{"RandomSample", "[", 
       RowBox[{"seqs", ",", "3"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"plotExampleSeqs", "=", 
      RowBox[{"GraphicsRow", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Table", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"ListPlot", "[", "\[IndentingNewLine]", 
           RowBox[{"exampleSeq", ",", "\[IndentingNewLine]", 
            RowBox[{"Filling", "\[Rule]", "Axis"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"PlotRange", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"1", ",", 
                 RowBox[{"Max", "[", 
                  RowBox[{"Length", "/@", "exampleSeqs"}], "]"}]}], "}"}], 
               ",", 
               RowBox[{"{", 
                RowBox[{"minVal", ",", "maxVal"}], "}"}]}], "}"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"Ticks", "\[Rule]", "None"}]}], "\[IndentingNewLine]", 
           "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"exampleSeq", ",", "exampleSeqs"}], "}"}]}], 
         "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "\[IndentingNewLine]", 
       "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"BEFORE", " ", "ALIGNMENT"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"plotWithoutAlignment", "=", 
      RowBox[{"ArrayPlot", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Map", "[", 
         RowBox[{"colorFunction", ",", "seqs", ",", 
          RowBox[{"{", "2", "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "\[IndentingNewLine]", 
       "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"AFTER", " ", "ALIGNMENT"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"v2a", ",", "a2vs"}], "}"}], "=", 
      RowBox[{"MakeEncoding", "[", 
       RowBox[{
        RowBox[{"DeleteDuplicates", "@", 
         RowBox[{"Flatten", "@", "seqs"}]}], ",", 
        RowBox[{"MafftaApparentlySafeChars", "[", "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"lbs", ",", "mtx"}], "}"}], "=", 
      RowBox[{"RunMafft", "[", 
       RowBox[{"seqs", ",", "v2a", ",", "op", ",", "ep", ",", "moreArgs"}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"msa", "=", 
      RowBox[{"SeqsUnderMtx", "[", 
       RowBox[{"seqs", ",", "mtx"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"sqs", "=", "seqs"}], ";", "  ", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"HACK", "!"}], " ", "Store", " ", "in", " ", "global", " ", 
       "var", " ", "as", " ", "side", " ", "effect"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"plotWithAlignment", "=", 
      RowBox[{"ArrayPlot", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Map", "[", 
         RowBox[{"colorFunction", ",", "msa", ",", 
          RowBox[{"{", "2", "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "\[IndentingNewLine]", 
       "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"CONSENSUS", " ", "INFO"}], " ", "*)"}], "\[IndentingNewLine]", 
     
     RowBox[{"plotAlignmentConsensus", "=", 
      RowBox[{"ListPlot", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"MsaConsensus", "[", "msa", "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"ImageSize", "\[Rule]", "Large"}], ",", "\[IndentingNewLine]", 
        RowBox[{"Joined", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
       "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
        RowBox[{
        "INTERACTIVE", " ", "PLOT", " ", "\[IndentingNewLine]", 
         "interactivePlot"}], "=", 
        RowBox[{"Manipulate", "[", 
         RowBox[{
          RowBox[{"With", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"msa", "=", "msa"}], "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{"ListPlot", "[", 
             RowBox[{
              RowBox[{"msa", "[", 
               RowBox[{"[", "i", "]"}], "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{"PlotRange", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"1", ",", 
                   RowBox[{"Length", "[", 
                    RowBox[{"First", "[", "msa", "]"}], "]"}]}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"-", "1500"}], ",", "1500"}], "}"}]}], "}"}]}], 
              ",", "\[IndentingNewLine]", 
              RowBox[{"ImageSize", "\[Rule]", "Large"}]}], 
             "\[IndentingNewLine]", "]"}]}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"i", ",", "1", ",", 
            RowBox[{"Length", "@", "msa"}], ",", "1"}], "}"}]}], 
         "\[IndentingNewLine]", "]"}]}], ";"}], " ", "\[IndentingNewLine]", 
      "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", "OUTPUT", " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"Column", "[", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
       "plotExampleSeqs", ",", "\[IndentingNewLine]", "plotWithoutAlignment", 
        ",", "\[IndentingNewLine]", "plotWithAlignment", ",", 
        "\[IndentingNewLine]", "plotAlignmentConsensus", ","}], 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", "interactivePlot", " ", "*)"}], 
       "\[IndentingNewLine]", "}"}], "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.721353102788031*^9, 3.721353170176852*^9}, {
   3.721353217258891*^9, 3.7213532360408077`*^9}, {3.721353415899371*^9, 
   3.7213534236192923`*^9}, {3.7213537240477257`*^9, 3.721353791936448*^9}, {
   3.721354027576522*^9, 3.7213540444104433`*^9}, {3.721354120534904*^9, 
   3.721354211795328*^9}, {3.7213949671048317`*^9, 3.7213949676561193`*^9}, {
   3.721395077753879*^9, 3.721395131767913*^9}, 3.721395233895934*^9, {
   3.721398452301434*^9, 3.7213984709157267`*^9}, {3.721398504724104*^9, 
   3.721398506078309*^9}, {3.721398905103606*^9, 3.7213989083608522`*^9}, 
   3.721399117549711*^9, {3.721399149341807*^9, 3.721399152279787*^9}, {
   3.7214018342686577`*^9, 3.7214021093550797`*^9}, {3.72140219087576*^9, 
   3.721402194756914*^9}, {3.721402344416065*^9, 3.721402413940104*^9}, {
   3.721402448743319*^9, 3.721402548752799*^9}, {3.7214027800758533`*^9, 
   3.7214029049829693`*^9}, {3.721403629280101*^9, 3.721403657985539*^9}, {
   3.72140811499266*^9, 3.721408127401526*^9}, {3.721408470417754*^9, 
   3.721408472224655*^9}, {3.7214195761159983`*^9, 3.721419576572554*^9}, 
   3.721420315125842*^9, {3.721422242261672*^9, 3.721422245028385*^9}, {
   3.721423858919269*^9, 3.721423868012391*^9}, {3.721423998518608*^9, 
   3.7214241825477753`*^9}, {3.7214242218106737`*^9, 
   3.7214242427762747`*^9}, {3.7214281513098288`*^9, 3.721428480191552*^9}, {
   3.72142852878832*^9, 3.7214285609073*^9}, {3.721429045388917*^9, 
   3.721429047318825*^9}, {3.7214918945168333`*^9, 3.721491931166521*^9}, {
   3.721570823726761*^9, 3.721570824885582*^9}, {3.721571893987152*^9, 
   3.721571914725389*^9}, {3.7215919165109167`*^9, 3.721591928686108*^9}, {
   3.721657630050591*^9, 3.721657630320207*^9}, {3.7216577353804893`*^9, 
   3.721657790304614*^9}, {3.721657986905809*^9, 3.7216580199924307`*^9}, {
   3.722019351588254*^9, 3.7220193690122337`*^9}, {3.7292627231888533`*^9, 
   3.729262734739094*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Go", "[", 
   RowBox[{
   "tssPathname_", ",", "subsetSize_", ",", "mafftOP_", ",", "mafftEP_", ",", 
    "mafftOtherArgs_", ",", "maxSpreadStable_", ",", "minColsStable_"}], 
   "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"uniqueValues", ",", "minVal", ",", "maxVal", ",", 
      RowBox[{"(*", 
       RowBox[{"colorFunction", ","}], "*)"}], "exampleSeqs", ",", 
      "plotExampleSeqs", ",", 
      RowBox[{"(*", 
       RowBox[{"plotWithoutAlignment", ",", "plotWithAlignment", ","}], 
       "*)"}], "plotPhases", ",", "plotPhasesShuffled", ",", 
      "plotAlignmentConsensus"}], "}"}], ",", "\[IndentingNewLine]", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Print", "[", 
      RowBox[{"Style", "[", 
       RowBox[{"tssPathname", ",", "16", ",", "Bold"}], "]"}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Print", "[", "\"\<Loading\>\"", "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Print", "[", 
      RowBox[{"DateString", "[", "]"}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"DoLoadDataset", "[", "tssPathname", "]"}], ";", "  ", 
     RowBox[{"(*", " ", 
      RowBox[{"this", " ", "sets", " ", "ias"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"DoSubDataset", "[", 
      RowBox[{"Min", "[", 
       RowBox[{"{", 
        RowBox[{"subsetSize", ",", 
         RowBox[{"Length", "[", "ias", "]"}]}], "}"}], "]"}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"seqs", "=", "sdSizes"}], ";", "\[IndentingNewLine]", 
     RowBox[{"allseqs", "=", 
      RowBox[{"SizesIA", "/@", "ias"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "Distinct", " ", "values", " ", "used", " ", "anywhere", " ", "in", " ",
        "the", " ", "seqs"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"uniqueValues", "=", 
      RowBox[{"DeleteDuplicates", "@", 
       RowBox[{"Flatten", "[", "allseqs", "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"minVal", ",", "maxVal"}], "}"}], "=", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Min", "[", "uniqueValues", "]"}], ",", 
        RowBox[{"Max", "[", "uniqueValues", "]"}]}], "}"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "Color", " ", "function", " ", "based", " ", "on", " ", "all", " ", 
       "values", " ", "used", " ", "by", " ", "seqs"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"colorFunction", "=", 
      RowBox[{"ValuesToColors", "[", "uniqueValues", "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"EXAMPLE", " ", "SEQS"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"exampleSeqs", "=", 
      RowBox[{"RandomSample", "[", 
       RowBox[{"seqs", ",", "3"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"plotExampleSeqs", "=", 
      RowBox[{"GraphicsRow", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Table", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"ListPlot", "[", "\[IndentingNewLine]", 
           RowBox[{"exampleSeq", ",", "\[IndentingNewLine]", 
            RowBox[{"Filling", "\[Rule]", "Axis"}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"PlotRange", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"1", ",", 
                 RowBox[{"Max", "[", 
                  RowBox[{"Length", "/@", "exampleSeqs"}], "]"}]}], "}"}], 
               ",", 
               RowBox[{"{", 
                RowBox[{"minVal", ",", "maxVal"}], "}"}]}], "}"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{"Ticks", "\[Rule]", "None"}]}], "\[IndentingNewLine]", 
           "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"exampleSeq", ",", "exampleSeqs"}], "}"}]}], 
         "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "\[IndentingNewLine]", 
       "]"}]}], ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"BEFORE", " ", "ALIGNMENT"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"plotWithoutAlignment", "=", 
      RowBox[{"ArrayPlot", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Map", "[", 
         RowBox[{"colorFunction", ",", "seqs", ",", 
          RowBox[{"{", "2", "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"ImageSize", "\[Rule]", "Large"}], ",", 
        RowBox[{"Mesh", "\[Rule]", "All"}]}], "\[IndentingNewLine]", "]"}]}], 
     ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"AFTER", " ", "ALIGNMENT"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"Print", "[", "\"\<Aligning...\>\"", "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Print", "[", 
      RowBox[{"DateString", "[", "]"}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"v2a", ",", "a2vs"}], "}"}], "=", 
      RowBox[{"MakeEncoding", "[", 
       RowBox[{
        RowBox[{"DeleteDuplicates", "@", 
         RowBox[{"Flatten", "@", "seqs"}]}], ",", 
        RowBox[{"MafftaApparentlySafeChars", "[", "]"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"lbs", ",", "mtx"}], "}"}], "=", 
      RowBox[{"RunMafft", "[", 
       RowBox[{
       "seqs", ",", "v2a", ",", "mafftOP", ",", "mafftEP", ",", 
        "mafftOtherArgs"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"msa", "=", 
      RowBox[{"SeqsUnderMtx", "[", 
       RowBox[{"seqs", ",", "mtx"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"plotWithAlignment", "=", 
      RowBox[{"ArrayPlot", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Map", "[", 
         RowBox[{"colorFunction", ",", "msa", ",", 
          RowBox[{"{", "2", "}"}]}], "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"ImageSize", "\[Rule]", "Large"}], ",", 
        RowBox[{"Mesh", "\[Rule]", "All"}]}], "\[IndentingNewLine]", "]"}]}], 
     ";", "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"Print", "[", "\"\<Splitting into phases...\>\"", "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Print", "[", 
      RowBox[{"DateString", "[", "]"}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"phinds", ",", "phases"}], "}"}], "=", 
      RowBox[{"MsaSplitSeqsIntoPhases", "[", 
       RowBox[{
       "msa", ",", "allseqs", ",", "maxSpreadStable", ",", "minColsStable"}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"phases", "=", 
      RowBox[{"DeleteEmptyPhases", "[", "phases", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Print", "[", 
      RowBox[{"\"\<Splitting fun succeeded for \>\"", "<>", 
       RowBox[{"ToString", "[", 
        RowBox[{"Length", "@", "phinds"}], "]"}], "<>", "\"\< out of \>\"", "<>", 
       RowBox[{"ToString", "[", 
        RowBox[{"Length", "@", "allseqs"}], "]"}], "<>", 
       "\"\< sequences (\>\"", "<>", 
       RowBox[{"ToString", "[", 
        RowBox[{"N", "[", 
         RowBox[{"100", 
          FractionBox[
           RowBox[{"Length", "@", "phinds"}], 
           RowBox[{"Length", "@", "allseqs"}]]}], "]"}], "]"}], "<>", 
       "\"\<%)\>\""}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Print", "[", 
      RowBox[{
       RowBox[{"ToString", "[", 
        RowBox[{
         RowBox[{"Length", "@", "allseqs"}], "-", 
         RowBox[{"Length", "@", "phinds"}]}], "]"}], "<>", 
       "\"\< sequences were discarded.\>\""}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Print", "[", 
      RowBox[{"DateString", "[", "]"}], "]"}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"plotPhases", "=", 
      RowBox[{"ShowPhases", "[", 
       RowBox[{"phases", ",", "100"}], "]"}]}], ";", " ", 
     RowBox[{"(*", " ", 
      RowBox[{
      "show", " ", "up", " ", "to", " ", "300", " ", "initial", " ", "ones"}],
       " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"plotPhasesShuffled", "=", 
      RowBox[{"ShowPhases", "[", 
       RowBox[{
        RowBox[{"Shuffle", "@", "phases"}], ",", "100"}], "]"}]}], ";", " ", 
     RowBox[{"(*", " ", 
      RowBox[{
      "show", " ", "up", " ", "to", " ", "300", " ", "random", " ", "ones"}], 
      " ", "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"exportToJSON", "===", "True"}], ",", " ", 
        RowBox[{"(*", 
         RowBox[{"hack", ",", " ", 
          RowBox[{"global", " ", "var"}], ",", " ", 
          RowBox[{"improve", "!"}]}], "*)"}], "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"jsonPathname", "=", 
          RowBox[{"tssPathname", "<>", "\"\<.json\>\""}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Print", "[", 
          RowBox[{"\"\<Exporting JSON to \>\"", "<>", "jsonPathname"}], "]"}],
          ";", "\[IndentingNewLine]", 
         RowBox[{"fromToRanges", "=", 
          RowBox[{"PhasesToListsOfFromToRanges", "[", "phases", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"ExportIAsToJSON", "[", 
          RowBox[{
          "ias", ",", "phinds", ",", "fromToRanges", ",", "jsonPathname"}], 
          "]"}], ";"}]}], "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]",
       "\[IndentingNewLine]", 
      RowBox[{"Print", "[", "\"\<Done!\>\"", "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
        RowBox[{
        "CONSENSUS", " ", "INFO", " ", "\[IndentingNewLine]", 
         "plotAlignmentConsensus"}], "=", 
        RowBox[{"ListPlot", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"MsaConsensus", "[", "msa", "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"ImageSize", "\[Rule]", "Large"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Joined", "\[Rule]", "True"}]}], "\[IndentingNewLine]", 
         "]"}]}], ";"}], "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]",
      "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
        RowBox[{
        "INTERACTIVE", " ", "PLOT", " ", "\[IndentingNewLine]", 
         "interactivePlot"}], "=", 
        RowBox[{"Manipulate", "[", 
         RowBox[{
          RowBox[{"With", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"msa", "=", "msa"}], "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{"ListPlot", "[", 
             RowBox[{
              RowBox[{"msa", "[", 
               RowBox[{"[", "i", "]"}], "]"}], ",", "\[IndentingNewLine]", 
              RowBox[{"PlotRange", "\[Rule]", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"1", ",", 
                   RowBox[{"Length", "[", 
                    RowBox[{"First", "[", "msa", "]"}], "]"}]}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{
                   RowBox[{"-", "1500"}], ",", "1500"}], "}"}]}], "}"}]}], 
              ",", "\[IndentingNewLine]", 
              RowBox[{"ImageSize", "\[Rule]", "Large"}]}], 
             "\[IndentingNewLine]", "]"}]}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"i", ",", "1", ",", 
            RowBox[{"Length", "@", "msa"}], ",", "1"}], "}"}]}], 
         "\[IndentingNewLine]", "]"}]}], ";"}], " ", "\[IndentingNewLine]", 
      "*)"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", "OUTPUT", " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"Column", "[", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"plotExampleSeqs", ","}], "*)"}], "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Row", "[", 
         RowBox[{"{", 
          RowBox[{
          "plotWithoutAlignment", ",", "\[IndentingNewLine]", 
           "plotWithAlignment"}], "}"}], "]"}], ",", "\[IndentingNewLine]", 
        "plotPhases", ",", "\[IndentingNewLine]", "plotPhasesShuffled"}], 
       "\[IndentingNewLine]", 
       RowBox[{"(*", 
        RowBox[{"plotAlignmentConsensus", ","}], "*)"}], 
       "\[IndentingNewLine]", "}"}], "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.721353102788031*^9, 3.721353170176852*^9}, {
   3.721353217258891*^9, 3.7213532360408077`*^9}, {3.721353415899371*^9, 
   3.7213534236192923`*^9}, {3.7213537240477257`*^9, 3.721353791936448*^9}, {
   3.721354027576522*^9, 3.7213540444104433`*^9}, {3.721354120534904*^9, 
   3.721354211795328*^9}, {3.7213949671048317`*^9, 3.7213949676561193`*^9}, {
   3.721395077753879*^9, 3.721395131767913*^9}, 3.721395233895934*^9, {
   3.721398452301434*^9, 3.7213984709157267`*^9}, {3.721398504724104*^9, 
   3.721398506078309*^9}, {3.721398905103606*^9, 3.7213989083608522`*^9}, 
   3.721399117549711*^9, {3.721399149341807*^9, 3.721399152279787*^9}, {
   3.7214018342686577`*^9, 3.7214021093550797`*^9}, {3.72140219087576*^9, 
   3.721402194756914*^9}, {3.721402344416065*^9, 3.721402413940104*^9}, {
   3.721402448743319*^9, 3.721402548752799*^9}, {3.7214027800758533`*^9, 
   3.7214029049829693`*^9}, {3.721403629280101*^9, 3.721403657985539*^9}, {
   3.72140811499266*^9, 3.721408127401526*^9}, {3.721408470417754*^9, 
   3.721408472224655*^9}, {3.7214195761159983`*^9, 3.721419576572554*^9}, 
   3.721420315125842*^9, {3.721422242261672*^9, 3.721422245028385*^9}, {
   3.721423858919269*^9, 3.721423868012391*^9}, {3.721423998518608*^9, 
   3.7214241825477753`*^9}, {3.7214242218106737`*^9, 
   3.7214242427762747`*^9}, {3.7214281513098288`*^9, 3.721428480191552*^9}, {
   3.72142852878832*^9, 3.7214285609073*^9}, {3.721429045388917*^9, 
   3.721429047318825*^9}, {3.7214918945168333`*^9, 3.721491931166521*^9}, {
   3.721570823726761*^9, 3.721570824885582*^9}, {3.721571893987152*^9, 
   3.721571914725389*^9}, {3.7215919165109167`*^9, 3.721591928686108*^9}, {
   3.721657630050591*^9, 3.721657630320207*^9}, {3.7216577353804893`*^9, 
   3.721657790304614*^9}, {3.721657986905809*^9, 3.7216580199924307`*^9}, {
   3.722019351588254*^9, 3.7220193690122337`*^9}, {3.7292627231888533`*^9, 
   3.729262734739094*^9}, {3.729262953301662*^9, 3.729262965660935*^9}, {
   3.729263001371819*^9, 3.729263001494656*^9}, {3.729263048842499*^9, 
   3.729263128806266*^9}, {3.7292642795113792`*^9, 3.72926430873307*^9}, {
   3.7292649796991167`*^9, 3.729265100732019*^9}, 3.7292654419805326`*^9, {
   3.7292655327704153`*^9, 3.7292655535471277`*^9}, {3.729265668905282*^9, 
   3.729265673919406*^9}, {3.729266371114476*^9, 3.7292664238150682`*^9}, 
   3.729266653075976*^9, {3.729266740361024*^9, 3.729266804668453*^9}, {
   3.729266836916757*^9, 3.7292668735534077`*^9}, {3.729267027278411*^9, 
   3.729267155737546*^9}, {3.729267242484974*^9, 3.729267269494898*^9}, {
   3.729267428519752*^9, 3.729267468321128*^9}, {3.7292675567431393`*^9, 
   3.729267595438058*^9}, {3.729267629950417*^9, 3.7292677751053543`*^9}, {
   3.7292678116081333`*^9, 3.729267837300721*^9}, {3.729267907403181*^9, 
   3.729267969459054*^9}, {3.7292688452024317`*^9, 3.729268869037593*^9}, {
   3.7292699750551662`*^9, 3.7292700345189257`*^9}, {3.729271787266183*^9, 
   3.729271789946693*^9}, 3.729271856582803*^9, {3.7292719078790693`*^9, 
   3.729271910599247*^9}, {3.729272099366375*^9, 3.729272121463181*^9}, {
   3.729272518046764*^9, 3.7292725204385767`*^9}, {3.7292834608534307`*^9, 
   3.729283468116385*^9}, {3.7292841271956167`*^9, 3.729284152573757*^9}, {
   3.7292842914988194`*^9, 3.7292843115915318`*^9}, {3.729299164220353*^9, 
   3.7292991748412333`*^9}, {3.72937584737477*^9, 3.7293758490903378`*^9}, {
   3.7294593681197147`*^9, 3.729459370359482*^9}, {3.729464896418996*^9, 
   3.729464898011744*^9}, {3.729478853555561*^9, 3.7294788559507647`*^9}, {
   3.7294795652224913`*^9, 3.7294795870166063`*^9}, {3.729479622137127*^9, 
   3.729479629836172*^9}, {3.729523822016734*^9, 3.729523830256783*^9}, {
   3.729523962933158*^9, 3.729523964900222*^9}, {3.729524149975956*^9, 
   3.729524156395693*^9}, {3.729524523820841*^9, 3.729524524644363*^9}, {
   3.729524860790492*^9, 3.7295248612183743`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Batch experiments", "Section",
 CellChangeTimes->{{3.721760087316039*^9, 3.721760088893798*^9}}],

Cell["\<\
This runs a bunch of datasets, shows visualizations and collects data.
Sub-dataset data like sdSecs, sdIndices, sdSizes, etc, are saved in sdsSecs, \
sdsIndices, sdsSizes, etc.
Additionally, the MSA obtained for each alignment is saved in sdsMsa.\
\>", "Text",
 CellChangeTimes->{{3.72168414112709*^9, 3.721684161283399*^9}, {
  3.721744691849547*^9, 3.721744765371149*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Batchman", "[", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
     "lists", " ", "of", " ", "full", " ", "ias", " ", "and", " ", "secs"}], 
     " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"iass", "=", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"secss", "=", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"pathnames", "=", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"sdsIas", "=", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"sdsSecs", "=", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"sdsSizes", "=", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"sdsMsa", "=", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"sdsIndices", "=", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Do", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"Print", "[", 
         RowBox[{"Style", "[", 
          RowBox[{"pathname", ",", "14", ",", "Bold"}], "]"}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"Print", "[", 
         RowBox[{"DateString", "[", "]"}], "]"}], ";", "\[IndentingNewLine]", 
        
        RowBox[{"DoLoadDataset", "[", "pathname", "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"DoSubDataset", "[", 
         RowBox[{"Min", "[", 
          RowBox[{"{", 
           RowBox[{"1000", ",", 
            RowBox[{"Length", "[", "ias", "]"}]}], "}"}], "]"}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"plt", "=", 
         RowBox[{"Try", "[", 
          RowBox[{
          "sdSizes", ",", "1.5", ",", "0.0", ",", 
           "\"\<--genafpair --maxiterate 1000 --thread 2\>\""}], "]"}]}], ";",
         "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"Save", " ", "full"}], "-", 
          RowBox[{
          "dataset", " ", "info", " ", "into", " ", "global", " ", 
           "variables"}]}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"AppendTo", "[", 
         RowBox[{"iass", ",", "ias"}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"AppendTo", "[", 
         RowBox[{"secss", ",", "secs"}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"AppendTo", "[", 
         RowBox[{"pathnames", ",", "pathname"}], "]"}], ";", 
        "\[IndentingNewLine]", "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
          RowBox[{"Save", " ", "sub"}], "-", 
          RowBox[{
          "dataset", " ", "info", " ", "into", " ", "global", " ", 
           "variables"}]}], " ", "*)"}], "\[IndentingNewLine]", 
        RowBox[{"AppendTo", "[", 
         RowBox[{"sdsIas", ",", "sdIas"}], "]"}], ";", "\[IndentingNewLine]", 
        
        RowBox[{"AppendTo", "[", 
         RowBox[{"sdsIndices", ",", "sdIndices"}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"AppendTo", "[", 
         RowBox[{"sdsSecs", ",", "sdSecs"}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"AppendTo", "[", 
         RowBox[{"sdsSizes", ",", "sdSizes"}], "]"}], ";", 
        "\[IndentingNewLine]", 
        RowBox[{"AppendTo", "[", 
         RowBox[{"sdsMsa", ",", "msa"}], "]"}], ";", "\[IndentingNewLine]", 
        "\[IndentingNewLine]", 
        RowBox[{"(*", " ", 
         RowBox[{
         "show", " ", "the", " ", "column", " ", "of", " ", "output"}], " ", 
         "*)"}], "\[IndentingNewLine]", 
        RowBox[{"Print", "[", "plt", "]"}]}], ",", "\[IndentingNewLine]", 
       "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"for", " ", "the", " ", 
         RowBox[{"following", ":"}]}], " ", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{"pathname", ",", "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{"Current", " ", 
           RowBox[{"benchmark", "!"}]}], " ", "*)"}], "\[IndentingNewLine]", 
         RowBox[{"{", "\[IndentingNewLine]", "\[IndentingNewLine]", 
          RowBox[{
          "\"\<~/phab/toolbox/bbp/data/benchmark/artactualsize_givenset-e5q09-\
medpedia-SkipListAll-00400-025-1516706251.tss\>\"", ",", 
           "\"\<~/phab/toolbox/bbp/data/benchmark/artnamelength-e5q09-\
medpedia-SkipListAll-00050-020.tss\>\"", ",", 
           "\"\<~/phab/toolbox/bbp/data/benchmark/\
changelocationrebootingevery10times-e2q31-snapbuddy_1-294x010.tss\>\"", ",", 
           "\"\<~/phab/toolbox/bbp/data/benchmark/fivecities-e4q45+e4q11-tour_\
planner-250x020.tss\>\"", ",", 
           "\"\<~/phab/toolbox/bbp/data/benchmark/item_bidding-e4q57-bidpal_2-\
049x004.tss\>\"", ",", "\[IndentingNewLine]", 
           "\"\<~/phab/toolbox/bbp/data/benchmark/numberofcities-e4q38-\
airplan_2-100x010-002-016-000-SkipGetProps-WithDelete.tss\>\"", ",", 
           "\"\<~/phab/toolbox/bbp/data/benchmark/numberofcities-e4q16-\
airplan_3-100x010-002-016-000-SkipGetProps-WithDelete.tss\>\"", ",", 
           "\"\<~/phab/toolbox/bbp/data/benchmark/numberofcities-e4q05-\
airplan_5-100x010-002-016-000-SkipGetProps-WithDelete.tss\>\"", ",", 
           "\"\<~/phab/toolbox/bbp/data/benchmark/strongconnectedness-e4q02-\
airplan_3-200x005-004-016-000-WithGetMatrix-WithDelete.tss\>\"", ",", 
           "\"\<~/phab/toolbox/bbp/data/benchmark/strongconnectedness-e4q55-\
airplan_4-200x005-004-016-000-WithGetMatrix-WithDelete.tss\>\"", ",", 
           "\[IndentingNewLine]", 
           RowBox[{"(*", "\[IndentingNewLine]", 
            RowBox[{
            "\"\<~/phab/toolbox/bbp/data/benchmark/numberofcities-e4q05-\
airplan_5-100x010-002-016-000-SkipGetProps.tss\>\"", ",", 
             "\"\<~/phab/toolbox/bbp/data/benchmark/numberofcities-e4q16-\
airplan_3-100x010-002-016-000-SkipGetProps.tss\>\"", ",", 
             
             "\"\<~/phab/toolbox/bbp/data/benchmark/numberofcities-e4q38-\
airplan_2-100x010-002-016-000-SkipGetProps.tss\>\"", ",", 
             "\[IndentingNewLine]", 
             "\"\<~/phab/toolbox/bbp/data/benchmark/strongconnectedness-e4q02-\
airplan_3-200x005-004-016-000-WithGetMatrix.tss\>\"", ",", 
             "\"\<~/phab/toolbox/bbp/data/benchmark/strongconnectedness-e4q55-\
airplan_4-200x005-004-016-000-WithGetMatrix.tss\>\"", ","}], 
            "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
           "\"\<~/phab/toolbox/bbp/data/benchmark/numberofonesinprivkey-e2q04-\
gabfeed_5-005x005x005x005-256-1024.tss\>\"", ",", 
           "\"\<~/phab/toolbox/bbp/data/benchmark/numberofonesinprivkey-e2q10-\
gabfeed_1-005x005x005x005-256-1024.tss\>\"", ",", 
           "\"\<~/phab/toolbox/bbp/data/benchmark/numberofonesinprivkey-e2q32-\
gabfeed_2-005x005x005x005-256-1024.tss\>\"", ",", 
           "\"\<~/phab/toolbox/bbp/data/benchmark/power_bidding-e4q06-\
powerbroker_4-049x004.tss\>\"", ",", 
           "\"\<~/phab/toolbox/bbp/data/benchmark/power_bidding-e4q15-\
powerbroker_2-049x004.tss\>\"", ",", 
           "\"\<~/phab/toolbox/bbp/data/benchmark/power_bidding-e4q40-\
powerbroker_1-049x004.tss\>\""}], "\[IndentingNewLine]", 
          "\[IndentingNewLine]", 
          RowBox[{"(*", " ", 
           RowBox[{"These", " ", 
            RowBox[{"don", "'"}], "t", " ", "look", " ", "good", " ", "now"}],
            " ", "*)"}], "\[IndentingNewLine]", 
          RowBox[{"(*", "\[IndentingNewLine]", 
           RowBox[{
           "\"\<~/phab/toolbox/bbp/data/benchmark/chatroomsize-e4q32-withmi_1-\
003x100.tss\>\"", ",", "\[IndentingNewLine]", 
            "\"\<~/phab/toolbox/bbp/data/benchmark/chatroomsize-e4q46-withmi_\
4-003x100.tss\>\"", ",", "\[IndentingNewLine]", 
            "\"\<~/phab/toolbox/bbp/data/benchmark/connectreconnect_multiuser-\
e4q27-withmi_5-002x050.tss\>\"", ",", "\[IndentingNewLine]", 
            "\"\<~/phab/toolbox/bbp/data/benchmark/connectreconnect_multiuser-\
e4q31-withmi_4-002x050.tss\>\""}], "\[IndentingNewLine]", "*)"}], 
          "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", 
        RowBox[{"(*", 
         RowBox[{"{", "\[IndentingNewLine]", 
          RowBox[{
          "\"\<~/numpacks2.tss\>\"", ",", "\[IndentingNewLine]", 
           "\"\<~/phab/toolbox/bbp/phaser/tss/strongconnectedness-e4q02-\
airplan_3-200x005-004-016-000-WithGetMatrix.tss.txt\>\"", ",", 
           "\[IndentingNewLine]", 
           "\"\<~/phab/toolbox/bbp/phaser/tss/strongconnectedness-e4q55-\
airplan_4-200x005-004-016-000-WithGetMatrix.tss.txt\>\"", ",", 
           "\[IndentingNewLine]", 
           "\"\<~/phab/toolbox/bbp/phaser/tss/numberofcities-e4q38-airplan_2-\
100x010-002-016-000-SkipGetProps.tss.txt\>\"", ",", "\[IndentingNewLine]", 
           "\"\<~/phab/toolbox/bbp/phaser/tss/\
changelocationrebootingevery10times-e2q31-snapbuddy_1-294x010.tss.txt\>\"", 
           ",", "\[IndentingNewLine]", 
           "\"\<~/phab/toolbox/bbp/phaser/tss/fivecities-e4q45+e4q11-tour_\
planner-250x020.tss.txt\>\"", ",", "\[IndentingNewLine]", 
           "\"\<~/phab/toolbox/bbp/phaser/tss/term_search_gabfeed.tss\>\"", 
           ",", "\[IndentingNewLine]", 
           "\"\</Users/nrosner/phab/toolbox/bbp/data/tss_nodup/file_transfer-\
e4q10-withmi_4-010x003_extra2-6.tss\>\"", ",", "\[IndentingNewLine]", 
           "\"\</Users/nrosner/phab/toolbox/bbp/data/tss_nodup/file_transfer-\
e4q12-withmi_2-010x003_extra2-6.tss\>\""}], "\[IndentingNewLine]", "}"}], 
         "*)"}], "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", 
      "]"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7215908532360973`*^9, 3.7215908673659487`*^9}, {
   3.721590926340363*^9, 3.721591084586205*^9}, {3.721591217957349*^9, 
   3.7215912198422318`*^9}, {3.7215915437155743`*^9, 3.721591552287552*^9}, {
   3.7215916280568857`*^9, 3.7215916380738697`*^9}, 3.721591670751924*^9, {
   3.7215917478807917`*^9, 3.7215917674354153`*^9}, {3.721591858635005*^9, 
   3.721591871568852*^9}, {3.721591973329751*^9, 3.721592039463932*^9}, {
   3.721593936047426*^9, 3.72159395240928*^9}, {3.721593991511942*^9, 
   3.721594050962738*^9}, {3.7215941425643787`*^9, 3.721594199855192*^9}, {
   3.721658979734586*^9, 3.721659048421918*^9}, {3.721744511991288*^9, 
   3.721744525436754*^9}, {3.721744570964095*^9, 3.721744670257779*^9}, {
   3.721745634206588*^9, 3.721745637672271*^9}, {3.72174567879629*^9, 
   3.721745986324481*^9}, {3.722019100559784*^9, 3.722019119206758*^9}, {
   3.722019772516622*^9, 3.722019803589159*^9}, {3.722020332870576*^9, 
   3.722020333416794*^9}, {3.722020922906048*^9, 3.7220209232215157`*^9}, {
   3.722368214892342*^9, 3.722368221118078*^9}, {3.722479394702324*^9, 
   3.722479395662261*^9}, {3.728854117610958*^9, 3.728854117812992*^9}, {
   3.728855168179378*^9, 3.728855168366023*^9}, {3.7290253063514643`*^9, 
   3.729025356002734*^9}, {3.7290271322274837`*^9, 3.729027164593912*^9}, {
   3.729027254025517*^9, 3.72902727608766*^9}, {3.7290327433785667`*^9, 
   3.729032746911006*^9}, {3.7290328049818783`*^9, 3.729032831863695*^9}, {
   3.729033093169045*^9, 3.72903311820971*^9}, {3.729111741627365*^9, 
   3.7291117417156277`*^9}, {3.729175774570277*^9, 3.729175779430386*^9}, {
   3.7291800802709417`*^9, 3.7291800816482143`*^9}, {3.72918043956418*^9, 
   3.729180440008872*^9}, {3.7291841031529083`*^9, 3.729184110589966*^9}, {
   3.7291843029671993`*^9, 3.7291843040306063`*^9}, {3.729184458281377*^9, 
   3.729184458340905*^9}, {3.729262049022388*^9, 3.729262106177891*^9}, {
   3.72926214922425*^9, 3.729262152234761*^9}, {3.729272208109133*^9, 
   3.7292722117925873`*^9}}],

Cell["Interactively show many sequences on a common plot range.", "Text",
 CellChangeTimes->{{3.721660584875863*^9, 3.721660608477963*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ShowSeqs", "[", "seqs_", "]"}], ":=", 
  RowBox[{"Manipulate", "[", 
   RowBox[{
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"maxLen", "=", 
        RowBox[{"Max", "[", 
         RowBox[{"Length", "/@", "seqs"}], "]"}]}], 
       RowBox[{"(*", 
        RowBox[{",", " ", 
         RowBox[{"maxVal", "=", 
          RowBox[{"Max", "[", 
           RowBox[{"Flatten", "@", "seqs"}], "]"}]}], ",", " ", 
         RowBox[{"minVal", "=", 
          RowBox[{"Min", "[", 
           RowBox[{"Flatten", "@", "seqs"}], "]"}]}]}], "*)"}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"ListPlot", "[", 
       RowBox[{
        RowBox[{"seqs", "[", 
         RowBox[{"[", "i", "]"}], "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"PlotRange", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "maxLen"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1500"}], ",", "1500"}], "}"}]}], "}"}]}], ",", " ", 
        RowBox[{"(*", " ", 
         RowBox[{"generalize", " ", "this"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"ImageSize", "\[Rule]", "Large"}], ",", "\[IndentingNewLine]", 
        RowBox[{"Filling", "\[Rule]", "Axis"}]}], "\[IndentingNewLine]", 
       "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{"i", ",", "1", ",", 
      RowBox[{"Length", "[", "seqs", "]"}], ",", "1"}], "}"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7216580265748672`*^9, 3.721658069804226*^9}, {
  3.7216586909501*^9, 3.72165877638207*^9}, {3.721658817658983*^9, 
  3.721658823056423*^9}, {3.72166061371382*^9, 3.721660617351734*^9}, {
  3.725416703593337*^9, 3.725416705394099*^9}, {3.725417579950797*^9, 
  3.725417667828918*^9}, {3.7254177514449577`*^9, 3.725417772634182*^9}}],

Cell["\<\
Given an MSA with numeric values and Nulls, return a matrix of the same size \
where all non-Null values have been replaced by indices starting at 1 on each \
line. For example: {{8, Null, 9, 74}, {Null, 7, 7, Null}} becomes {{1, Null, \
2, 3}, {Null, 1, 2, Null}}.\
\>", "Text",
 CellChangeTimes->{{3.721659325421973*^9, 3.721659413654339*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"MsaToPositions", "[", "msa_", "]"}], ":=", 
    RowBox[{"Map", "[", 
     RowBox[{"MsaRowToPositions", ",", "msa"}], "]"}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MsaRowToPositions", "[", "msaRow_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"copyOfRow", "=", "msaRow"}], ",", 
      RowBox[{"nonNullPositions", "=", 
       RowBox[{"PositionsThatAreNot", "[", 
        RowBox[{"msaRow", ",", "Null"}], "]"}]}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"copyOfRow", "[", 
       RowBox[{"[", "nonNullPositions", "]"}], "]"}], "=", 
      RowBox[{"Range", "[", 
       RowBox[{"Length", "[", "nonNullPositions", "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "copyOfRow", "]"}], ";"}]}], 
   "\[IndentingNewLine]", "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7216592818078327`*^9, 3.721659320176227*^9}, {
  3.7216594709693193`*^9, 3.721659498362455*^9}, {3.721659542616908*^9, 
  3.721659602179801*^9}, {3.7216598184265127`*^9, 3.7216599221289377`*^9}, {
  3.721660247444085*^9, 3.7216602942517014`*^9}, {3.7216604805997677`*^9, 
  3.72166054647082*^9}, {3.721661002628282*^9, 3.7216610031330557`*^9}}],

Cell["\<\
Given an MSA with numeric values and Nulls, and a list of {from, to} index \
pairs within the aligned MSA, return a list of lists of positions in the \
non-aligned sequences within those endpoints (inclusive).

In other words, for each row of the MSA and the given ranges, we get a list \
of lists of indices, each representing the pre-alignment points located \
within the given post-alignment endpoints. (Note that some lists could be \
empty.)\
\>", "Text",
 CellChangeTimes->{{3.7216610559600353`*^9, 3.7216612485514603`*^9}, {
  3.721664404960627*^9, 3.721664405492199*^9}, {3.7216721178307543`*^9, 
  3.721672124504755*^9}, {3.721677351519074*^9, 3.721677395899139*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"MsaRangesToPreAlignmentPositions", "[", 
     RowBox[{"msa_", ",", "fromTos_"}], "]"}], ":=", 
    RowBox[{"Transpose", "[", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"MsaRangeToPreAlignmentPositions", "[", 
         RowBox[{"msa", ",", " ", "#"}], "]"}], "&"}], ",", " ", "fromTos"}], 
      "]"}], "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"MsaRangeToPreAlignmentPositions", "[", 
     RowBox[{"msa_", ",", 
      RowBox[{"{", 
       RowBox[{"from_", ",", "to_"}], "}"}]}], "]"}], ":=", 
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"MsaRowRangeToPreAlignmentPositions", "[", 
        RowBox[{"#", ",", 
         RowBox[{"{", 
          RowBox[{"from", ",", "to"}], "}"}]}], "]"}], "&"}], ",", "msa"}], 
     "]"}]}], ";"}], "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"MsaRowRangeToPreAlignmentPositions", "[", 
   RowBox[{"row_", ",", 
    RowBox[{"{", 
     RowBox[{"from_", ",", "to_"}], "}"}]}], "]"}], ":=", 
  RowBox[{"DeleteCases", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"MsaRowToPositions", "[", "row", "]"}], "[", 
     RowBox[{"[", 
      RowBox[{"from", ";;", "to"}], "]"}], "]"}], ",", "Null"}], 
   "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7216612520555763`*^9, 3.7216612979038353`*^9}, {
  3.721663591445381*^9, 3.721663657053282*^9}, {3.721664455987269*^9, 
  3.7216644603700123`*^9}, {3.721671904537156*^9, 3.721671932601657*^9}, {
  3.721677401949183*^9, 3.72167740333644*^9}, {3.7216774413459578`*^9, 
  3.721677455881958*^9}, {3.721766726383497*^9, 3.7217667717033463`*^9}}],

Cell["\<\
Given a list of lists of positions into the original (pre-alignment) \
sequences, return a list of {from, to} tuples. Empty position lists are \
represented in the result by {-1, 1}.\
\>", "Text",
 CellChangeTimes->{{3.721744069623949*^9, 3.721744145933588*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"PreAlignmentPositionsToRanges", "[", "positionLists_", "]"}], ":=",
    "\[IndentingNewLine]", 
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"Length", "[", "#", "]"}], ">", "0"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"First", "@", "#"}], ",", 
          RowBox[{"Last", "@", "#"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "]"}], "&"}], ",", 
     "positionLists", ",", 
     RowBox[{"{", "2", "}"}]}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7217416691485653`*^9, 3.721741672759609*^9}, {
  3.721742914796431*^9, 3.721742946776931*^9}, {3.721744183328463*^9, 
  3.721744223880294*^9}, {3.7217443274521933`*^9, 3.7217444011667223`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Visualization of size-sequences colorized by MSA ranges", "Section",
 CellChangeTimes->{{3.721744784453583*^9, 3.721744800108457*^9}}],

Cell["\<\
Given n sequences, an MSA with n lines, and a list of {from, to} ranges \
(inclusive), show a colorized plot where we can see the effect of the \
alignment, chopped according to the given ranges, projected on the original \
sequences.\
\>", "Text",
 CellChangeTimes->{{3.721671946425915*^9, 3.721671946777936*^9}, {
  3.721679720285763*^9, 3.72167977944881*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"ShowSeqsColoredByMsaRanges", "[", 
    RowBox[{"seqs_", ",", "msa_", ",", "fromTos_"}], "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"preAlignmentPositions", ",", "coloredSeqs"}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"preAlignmentPositions", "=", 
       RowBox[{"MsaRangesToPreAlignmentPositions", "[", 
        RowBox[{"msa", ",", "fromTos"}], "]"}]}], ";", "\[IndentingNewLine]", 
      
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{
        "warn", " ", "user", " ", "if", " ", "there", " ", "is", " ", 
         "overlap"}], ",", " ", 
        RowBox[{
        "which", " ", "would", " ", "go", " ", "unnoticed", " ", "in", " ", 
         "the", " ", "plot"}]}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"AnyTrue", "[", 
         RowBox[{"preAlignmentPositions", ",", " ", 
          RowBox[{
           RowBox[{
            RowBox[{"Length", "[", 
             RowBox[{"Flatten", "[", "#", "]"}], "]"}], "\[NotEqual]", 
            RowBox[{"Length", "[", 
             RowBox[{"DeleteDuplicates", "[", 
              RowBox[{"Flatten", "[", "#", "]"}], "]"}], "]"}]}], "&"}]}], 
         "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{
        "Print", "[", 
         "\"\<WARNING: Overlap found in preAlignmentPositions!\>\"", "]"}]}], 
       "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
      RowBox[{"coloredSeqs", "=", 
       RowBox[{"MapThread", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"ColorizeSeqUsingMultiplePositionLists", "[", 
           RowBox[{"#1", ",", "#2", ",", 
            RowBox[{"ColorData", "[", "54", "]"}]}], "]"}], "&"}], ",", 
         RowBox[{"{", 
          RowBox[{"seqs", ",", "preAlignmentPositions"}], "}"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"colSeqs", "=", "coloredSeqs"}], ",", 
          RowBox[{"maxSeqLen", "=", 
           RowBox[{"Max", "[", 
            RowBox[{"Length", "/@", "seqs"}], "]"}]}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"ListPlot", "[", 
           RowBox[{
            RowBox[{"colSeqs", "[", 
             RowBox[{"[", "i", "]"}], "]"}], ",", "\[IndentingNewLine]", 
            RowBox[{"Filling", "\[Rule]", "Axis"}], ",", 
            RowBox[{"ImageSize", "\[Rule]", "Large"}], ",", 
            RowBox[{"PlotRange", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"1", ",", "maxSeqLen"}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"-", "1500"}], ",", "1500"}], "}"}]}], "}"}]}]}], 
           "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"{", 
           RowBox[{"i", ",", "1", ",", 
            RowBox[{"Length", "[", "colSeqs", "]"}], ",", "1"}], "}"}]}], 
         "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ColorizeSeqUsingMultiplePositionLists", "[", 
   RowBox[{"seq_", ",", "positionLists_", ",", "colorFunction_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"coloredSeq", "=", "seq"}], "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Do", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"coloredSeq", "[", 
         RowBox[{"[", 
          RowBox[{"positionLists", "[", 
           RowBox[{"[", "i", "]"}], "]"}], "]"}], "]"}], "=", 
        RowBox[{"Map", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"Style", "[", 
            RowBox[{"#", ",", 
             RowBox[{"colorFunction", "[", "i", "]"}]}], "]"}], "&"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"coloredSeq", "[", 
           RowBox[{"[", 
            RowBox[{"positionLists", "[", 
             RowBox[{"[", "i", "]"}], "]"}], "]"}], "]"}]}], 
         "\[IndentingNewLine]", "]"}]}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"i", ",", "1", ",", 
         RowBox[{"Length", "[", "positionLists", "]"}]}], "}"}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "coloredSeq", "]"}], ";"}]}], 
   "\[IndentingNewLine]", "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.721677564937373*^9, 3.721677657073742*^9}, 
   3.721677743352818*^9, {3.7216781518946037`*^9, 3.7216782739317923`*^9}, {
   3.721678522717269*^9, 3.721678563068028*^9}, {3.7216786753309097`*^9, 
   3.721678995177004*^9}, {3.721679085208507*^9, 3.7216791472186832`*^9}, {
   3.721679194198421*^9, 3.7216792195619307`*^9}, {3.7216792592281923`*^9, 
   3.721679266499919*^9}, {3.721679310855349*^9, 3.721679501998204*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["JSON export (new, based on {from, to} index pairs)", "Section",
 CellChangeTimes->{{3.7126053675301228`*^9, 3.7126053735852203`*^9}, {
  3.712605900801735*^9, 3.712605922211985*^9}, {3.7210972450309677`*^9, 
  3.721097251365184*^9}, {3.721684238896153*^9, 3.721684249675961*^9}, {
  3.721684453166348*^9, 3.7216844582455463`*^9}}],

Cell["\<\
Given a list of interaction numbers and a list of lists of {idxFrom, idxTo} \
pairs (one list of pairs per interaction), return a JSON string in the format \
expected by the Python side.\
\>", "Text",
 CellChangeTimes->{{3.721694690683415*^9, 3.72169472425014*^9}, {
  3.721694761530414*^9, 3.7216947771410303`*^9}, {3.7216949191842957`*^9, 
  3.7216949315595827`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"MakeJSONString", "[", 
   RowBox[{"iaNumbers_", ",", "idxFromToLists_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "iaNumberIdxFromToListPairs", "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
      RowBox[{
      "we", " ", "subtract", " ", "1", " ", "from", " ", "all", " ", 
       "iaNumbers", " ", "because", " ", "the", " ", "Python", " ", "side", 
       " ", "expects", " ", "0"}], "-", 
      RowBox[{"based", " ", "indices"}]}], " ", "*)"}], "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"iaNumberIdxFromToListPairs", "=", 
      RowBox[{"Transpose", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"iaNumbers", "-", "1"}], ",", "idxFromToLists"}], "}"}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"ExportString", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Map", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"<|", 
           RowBox[{
            RowBox[{"\"\<interaction_num\>\"", "\[Rule]", 
             RowBox[{"First", "[", "#", "]"}]}], ",", 
            RowBox[{"\"\<interval_list\>\"", "\[Rule]", 
             RowBox[{"Last", "[", "#", "]"}]}]}], "|>"}], "&"}], ",", 
         "\[IndentingNewLine]", "iaNumberIdxFromToListPairs"}], 
        "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
       "\"\<RawJSON\>\"", ",", 
       RowBox[{"\"\<Compact\>\"", "\[Rule]", "2"}]}], "\[IndentingNewLine]", 
      "]"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.721694351552446*^9, 3.721694433999433*^9}, {
  3.721694494123888*^9, 3.721694540456366*^9}, {3.721694570486021*^9, 
  3.721694622006353*^9}, {3.721745079029406*^9, 3.721745079442932*^9}}],

Cell[TextData[{
 "Given an interaction and a {from, to} range, return a list of ",
 StyleBox["idxs",
  IgnoreSpellCheck->True],
 " (original-",
 StyleBox["pcap",
  IgnoreSpellCheck->True],
 " indices) of the events within the given indices."
}], "Text",
 CellChangeTimes->{{3.7125843247957973`*^9, 3.7125844118695183`*^9}, {
  3.7125852010003147`*^9, 3.7125852250608788`*^9}, {3.712585787700667*^9, 
  3.712585793346568*^9}, {3.712603333606732*^9, 3.712603344049699*^9}, {
  3.721684298375152*^9, 3.721684435068047*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"SelectIdxsIA", "[", 
   RowBox[{"ia_", ",", 
    RowBox[{"{", 
     RowBox[{"from_", ",", "to_"}], "}"}]}], "]"}], ":=", 
  RowBox[{
   RowBox[{"ia", "[", 
    RowBox[{"[", 
     RowBox[{
      RowBox[{"from", ";;", "to"}], ",", "\"\<idx\>\""}], "]"}], "]"}], "//", 
   "Normal"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7125846380158367`*^9, 3.712584644481406*^9}, {
   3.712584758969145*^9, 3.712584799319174*^9}, {3.712585056644165*^9, 
   3.7125851853986807`*^9}, 3.712585245425474*^9, {3.7125857629319887`*^9, 
   3.712585769240281*^9}, {3.712585808582735*^9, 3.712585834072791*^9}, {
   3.712593037054443*^9, 3.7125930582532787`*^9}, {3.712603294468358*^9, 
   3.712603326714847*^9}, {3.7126033575472*^9, 3.7126033607820873`*^9}, {
   3.721684478790413*^9, 3.721684481004591*^9}, {3.721684570582573*^9, 
   3.721684585382882*^9}, {3.721684622340214*^9, 3.721684692783143*^9}}],

Cell["\<\
Given a list (assumed to be sorted), return {first, last} if nonempty, and \
{-1, 1} if empty.\
\>", "Text",
 CellChangeTimes->{{3.721747781881125*^9, 3.7217478252088833`*^9}, {
  3.7217478810912313`*^9, 3.721747901657649*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"FirstLastOrMinusOneOne", "[", "elems_", "]"}], ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Length", "[", "elems", "]"}], ">", "0"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"First", "@", "elems"}], ",", 
      RowBox[{"Last", "@", "elems"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7217416691485653`*^9, 3.721741672759609*^9}, {
  3.721742914796431*^9, 3.721742946776931*^9}, {3.721744183328463*^9, 
  3.721744223880294*^9}, {3.7217443274521933`*^9, 3.7217444011667223`*^9}, {
  3.7217477145176153`*^9, 3.721747780233753*^9}, {3.721747832274234*^9, 
  3.721747868452573*^9}, {3.721747907692896*^9, 3.7217479461925383`*^9}}],

Cell["\<\
Given:
- a list of interactions
- a list of the relevant interaction indices in some order (1-based)
- a list of lists of {from, to} tuples indicating the chosen ranges for each \
relevant interaction (1-based)
  (must have same number of tuples for all interactions)

return a JSON string in the format expected by the Python side, with 0-based \
interaction numbers and the ranges expressed using idxs (original \
pcap-indices) instead of normal indices.\
\>", "Text",
 CellChangeTimes->{{3.721744835751742*^9, 3.721745188560431*^9}, {
  3.721757828051545*^9, 3.721757877653022*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"IAsToJSONString", "[", 
   RowBox[{"allIas_", ",", "relevantIaNumbers_", ",", "rangesForEach_"}], 
   "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"listOfListsOfIdxTuples", ",", "relevantIa"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"listOfListsOfIdxTuples", "=", 
      RowBox[{"Table", "[", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{"double", " ", 
         RowBox[{"indirection", ":", " ", 
          RowBox[{
          "we", " ", "use", " ", "the", " ", "relevant", " ", "IA", " ", 
           "index", " ", "to", " ", "look", " ", "up", " ", "the", " ", 
           "right", " ", "ia", " ", "from", " ", "ias"}]}]}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"relevantIa", "=", 
          RowBox[{"allIas", "[", 
           RowBox[{"[", 
            RowBox[{"relevantIaNumbers", "[", 
             RowBox[{"[", "i", "]"}], "]"}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"Map", "[", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"FirstLastOrMinusOneOne", "[", 
             RowBox[{"SelectIdxsIA", "[", 
              RowBox[{"relevantIa", ",", "#"}], "]"}], "]"}], "&"}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"rangesForEach", "[", 
            RowBox[{"[", "i", "]"}], "]"}]}], "\[IndentingNewLine]", "]"}]}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"i", ",", "1", ",", 
          RowBox[{"Length", "[", "relevantIaNumbers", "]"}]}], "}"}]}], 
       "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", 
      RowBox[{"MakeJSONString", "[", 
       RowBox[{"relevantIaNumbers", ",", "listOfListsOfIdxTuples"}], "]"}], 
      "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.721745194866014*^9, 3.7217452429216623`*^9}, {
  3.721745274528369*^9, 3.721745357525097*^9}, {3.721745398849494*^9, 
  3.7217455010899754`*^9}, {3.721745533434394*^9, 3.7217456104043007`*^9}, {
  3.72174795795971*^9, 3.7217480279088182`*^9}, {3.7217572244948587`*^9, 
  3.7217572807205133`*^9}, {3.721757321298871*^9, 3.721757322835986*^9}, {
  3.721757765988316*^9, 3.721757798847115*^9}}],

Cell["Same as above, exporting the JSON to a file.", "Text",
 CellChangeTimes->{{3.72175792889636*^9, 3.721757940700786*^9}, {
  3.7217592818998737`*^9, 3.721759286326357*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ExportIAsToJSON", "[", 
    RowBox[{
    "allIas_", ",", "relevantIaNumbers_", ",", "rangesForEach_", ",", 
     "pathname_"}], "]"}], ":=", 
   RowBox[{"Export", "[", 
    RowBox[{"pathname", ",", 
     RowBox[{"IAsToJSONString", "[", 
      RowBox[{"allIas", ",", "relevantIaNumbers", ",", "rangesForEach"}], 
      "]"}], ",", "\"\<Text\>\""}], "]"}]}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.721757698170577*^9, 3.721757732186442*^9}, {
  3.7217578114830523`*^9, 3.721757816897029*^9}, {3.721757898323801*^9, 
  3.7217579198454733`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Interactive chopping of an MSA", "Section",
 CellChangeTimes->{{3.72176412117272*^9, 3.7217641246630573`*^9}}],

Cell["\<\
Given a full list of interactions, a list of indices and an MSA over those \
indices, this lets you interactively pick chopping points and export the \
result to JSON.\
\>", "Text",
 CellChangeTimes->{{3.7217643506289473`*^9, 3.72176439482185*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"InteractiveChop", "[", 
   RowBox[{"ias_", ",", "sdIndices_", ",", "sdMsa_"}], "]"}], ":=", 
  RowBox[{"DynamicModule", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"choppingPointVector", "=", 
       RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"choppingPoints", "=", 
       RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"ranges", "=", 
       RowBox[{"{", "}"}]}], ",", "\[IndentingNewLine]", 
      RowBox[{"(*", "preAlignmentRanges", "*)"}], ",", "\[IndentingNewLine]", 
      
      RowBox[{"(*", " ", 
       RowBox[{
        RowBox[{"hack", ":", " ", 
         RowBox[{
          RowBox[{"don", "'"}], "t", " ", "show", " ", "the", " ", "whole", 
          " ", "subset", " ", "if", " ", "too", " ", "long"}]}], ",", " ", 
        RowBox[{"or", " ", "it", " ", "becomes", " ", "too", " ", 
         RowBox[{"thin", "!"}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"howManyToActuallyShow", "=", 
       RowBox[{"Min", "[", 
        RowBox[{
         RowBox[{"Length", "[", "sdMsa", "]"}], ",", "100"}], "]"}]}]}], 
     "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"choppingPointVector", "=", 
      RowBox[{"ConstantArray", "[", 
       RowBox[{"0", ",", 
        RowBox[{
         RowBox[{"Length", "[", 
          RowBox[{"First", "[", "sdMsa", "]"}], "]"}], "+", "1"}]}], "]"}]}], 
     ";", "\[IndentingNewLine]", 
     RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"Column", "[", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"ArrayPlot", "[", 
           RowBox[{
            RowBox[{"sdMsa", "[", 
             RowBox[{"[", 
              RowBox[{"1", ";;", "howManyToActuallyShow"}], "]"}], "]"}], ",", 
            RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"ArrayPlot", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"Drop", "[", 
              RowBox[{"choppingPointVector", ",", 
               RowBox[{"-", "1"}]}], "]"}], "}"}], ",", 
            RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Row", "[", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"Ceiling", "[", "uu", "]"}], "[", 
              RowBox[{"[", "1", "]"}], "]"}], ",", "\[IndentingNewLine]", 
             "\"\<  pts: \>\"", ",", "\[IndentingNewLine]", "choppingPoints", 
             ",", "\[IndentingNewLine]", "\"\<  ranges: \>\"", ",", 
             "\[IndentingNewLine]", "ranges"}], "\[IndentingNewLine]", "}"}], 
           "]"}]}], "\[IndentingNewLine]", "}"}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"uu", ",", "Locator"}], "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Button", "[", 
        RowBox[{"\"\<Add chopping point\>\"", ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{"choppingPointVector", "[", 
            RowBox[{"[", 
             RowBox[{
              RowBox[{"Ceiling", "[", "uu", "]"}], "[", 
              RowBox[{"[", "1", "]"}], "]"}], "]"}], "]"}], "=", "1"}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"choppingPoints", "=", 
           RowBox[{"Flatten", "@", 
            RowBox[{"Position", "[", 
             RowBox[{"choppingPointVector", ",", "1"}], "]"}]}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"ranges", "=", 
           RowBox[{"Transpose", "[", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Drop", "[", 
               RowBox[{"choppingPoints", ",", 
                RowBox[{"-", "1"}]}], "]"}], ",", 
              RowBox[{
               RowBox[{"Drop", "[", 
                RowBox[{"choppingPoints", ",", "1"}], "]"}], "-", "1"}]}], 
             "}"}], "]"}]}]}]}], "\[IndentingNewLine]", "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"Button", "[", 
        RowBox[{"\"\<Export to JSON\>\"", ",", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"preAlignmentRanges", "=", 
           RowBox[{"PreAlignmentPositionsToRanges", "[", 
            RowBox[{"MsaRangesToPreAlignmentPositions", "[", 
             RowBox[{"sdMsa", ",", "ranges"}], "]"}], "]"}]}], ";", 
          "\[IndentingNewLine]", 
          RowBox[{"ExportIAsToJSON", "[", 
           RowBox[{
           "ias", ",", "sdIndices", ",", "preAlignmentRanges", ",", 
            "jsonPathname"}], "]"}]}]}], "\[IndentingNewLine]", "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"jsonPathname", ",", "\"\</tmp/foo.json\>\""}], "}"}]}], 
      "\[IndentingNewLine]", "]"}]}]}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7217618498087*^9, 3.7217619831177683`*^9}, {
   3.721762075403942*^9, 3.721762182734638*^9}, {3.721762533184142*^9, 
   3.721762547841278*^9}, {3.7217625818390102`*^9, 3.721762593544211*^9}, {
   3.7217626663478327`*^9, 3.72176268300301*^9}, {3.721762733929254*^9, 
   3.721763041570261*^9}, 3.721763085965362*^9, {3.721763268163938*^9, 
   3.721763416513142*^9}, {3.7217634520283737`*^9, 3.7217634554131536`*^9}, {
   3.721763724357299*^9, 3.721763777802966*^9}, {3.7217638489011517`*^9, 
   3.721763856635345*^9}, {3.721763901190506*^9, 3.721763918690546*^9}, {
   3.7217639602972183`*^9, 3.7217639664238377`*^9}, {3.7217641301678753`*^9, 
   3.721764138372621*^9}, {3.7217642186781693`*^9, 3.7217642321239347`*^9}, {
   3.7217642736442947`*^9, 3.72176427382654*^9}, {3.7217643419350653`*^9, 
   3.7217643691591988`*^9}, {3.7217645152937117`*^9, 3.721764534770755*^9}, {
   3.721764629361105*^9, 3.721764861997713*^9}, {3.721766803942566*^9, 
   3.7217668624060173`*^9}, {3.721766932143059*^9, 3.7217669341519737`*^9}, {
   3.721767323021212*^9, 3.721767331640481*^9}, {3.722030229577351*^9, 
   3.7220303071019707`*^9}, {3.722030350545175*^9, 3.722030396139021*^9}, {
   3.726602319765607*^9, 3.726602320798699*^9}, {3.726608103184458*^9, 
   3.726608103673683*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Scoring matrix attempt", "Section",
 CellChangeTimes->{{3.722019248247477*^9, 3.7220192503287983`*^9}, {
  3.722089747628379*^9, 3.72208974916978*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Skore", "[", "msa_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "eachElemToTallyOfColNumbers", ",", "elems", ",", "scoreRowsOfTuples", 
      ",", "scoreMtx", ",", "scoreMtxNormalizedByColumn"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"eachElemToTallyOfColNumbers", "=", 
      RowBox[{"KeyValueMap", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{"#1", ",", 
           RowBox[{"Tally", "[", "#2", "]"}]}], "}"}], "&"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"Merge", "[", 
         RowBox[{
          RowBox[{"PositionIndex", "/@", "msa"}], ",", "Catenate"}], "]"}]}], 
       "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"Remove", " ", "Null"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"eachElemToTallyOfColNumbers", "=", 
      RowBox[{"DeleteCases", "[", 
       RowBox[{"eachElemToTallyOfColNumbers", ",", 
        RowBox[{"{", 
         RowBox[{"Null", ",", "_"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{
       RowBox[{
       "Sort", " ", "all", " ", "rows", " ", "by", " ", "the", " ", "first", 
        " ", "component"}], ",", " ", 
       RowBox[{"i", ".", "e", "."}], ",", " ", 
       RowBox[{"by", " ", "elem", " ", "value"}]}], "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"eachElemToTallyOfColNumbers", "=", 
      RowBox[{"Sort", "[", 
       RowBox[{"eachElemToTallyOfColNumbers", ",", 
        RowBox[{
         RowBox[{
          RowBox[{"#1", "[", 
           RowBox[{"[", "1", "]"}], "]"}], "<", 
          RowBox[{"#2", "[", 
           RowBox[{"[", "1", "]"}], "]"}]}], "&"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", 
      RowBox[{"Separate", " ", "the", " ", "elems", " ", 
       RowBox[{"(", 
        RowBox[{"row", " ", "labels"}], ")"}], " ", "from", " ", "the", " ", 
       "matrix", " ", "itself"}], "*)"}], "\[IndentingNewLine]", 
     RowBox[{"elems", "=", 
      RowBox[{"eachElemToTallyOfColNumbers", "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "1"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"scoreRowsOfTuples", "=", 
      RowBox[{"eachElemToTallyOfColNumbers", "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "2"}], "]"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"scoreMtx", "=", 
      RowBox[{"SparseArray", "@", 
       RowBox[{"Flatten", "@", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{"Function", "[", 
           RowBox[{
            RowBox[{"{", "i", "}"}], ",", "\[IndentingNewLine]", 
            RowBox[{"(*", " ", 
             RowBox[{
              RowBox[{"for", " ", "each", " ", "row", " ", "of", " ", 
               RowBox[{"{", 
                RowBox[{"colIndex", ",", "nTimes"}], "}"}], " ", "tuples"}], 
              ",", " ", 
              RowBox[{
               RowBox[{"make", " ", "a", " ", "row", " ", "of", " ", 
                RowBox[{"{", 
                 RowBox[{"rowIndex", ",", "colIndex"}], "}"}]}], "\[Rule]", 
               RowBox[{"nTimes", " ", 
                RowBox[{"rules", "."}]}]}]}], " ", "*)"}], 
            "\[IndentingNewLine]", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"i", ",", 
                   RowBox[{"First", "[", "#", "]"}]}], "}"}], "\[Rule]", 
                 RowBox[{"Last", "[", "#", "]"}]}], ")"}], "&"}], ",", 
              RowBox[{"scoreRowsOfTuples", "[", 
               RowBox[{"[", "i", "]"}], "]"}]}], "]"}]}], 
           "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
          RowBox[{"Range", "[", 
           RowBox[{"Length", "@", "scoreRowsOfTuples"}], "]"}]}], 
         "\[IndentingNewLine]", "]"}]}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"scoreMtxNormalizedByColumn", "=", 
      RowBox[{"Transpose", "@", 
       RowBox[{"Map", "[", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"Rescale", "[", 
           RowBox[{"#", ",", 
            RowBox[{"{", 
             RowBox[{"0", ",", 
              RowBox[{"Total", "[", "#", "]"}]}], "}"}]}], "]"}], "&"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"Normal", "@", 
          RowBox[{"Transpose", "@", "scoreMtx"}]}]}], "\[IndentingNewLine]", 
        "]"}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", 
      RowBox[{"{", 
       RowBox[{"elems", ",", "scoreMtxNormalizedByColumn"}], "}"}], "]"}], 
     ";"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.721840725564831*^9, 3.7218408159569883`*^9}, {
  3.721840850257147*^9, 3.7218408638853693`*^9}, {3.7218412171276197`*^9, 
  3.7218412699223557`*^9}, {3.7220180545209017`*^9, 3.7220180549210663`*^9}, {
  3.722087846052794*^9, 3.722087910418117*^9}, {3.722088317947747*^9, 
  3.7220883790983877`*^9}, {3.722088416482437*^9, 3.722088499891881*^9}, {
  3.722088706178183*^9, 3.7220887698306923`*^9}, {3.7220888462077923`*^9, 
  3.722088886791415*^9}, {3.722088921335141*^9, 3.7220889450081253`*^9}, {
  3.722089732509034*^9, 3.722089742588036*^9}, {3.7220906783539743`*^9, 
  3.722090724469791*^9}, {3.7220907808871*^9, 3.722090811636973*^9}, {
  3.722091617878598*^9, 3.722091691745409*^9}, {3.722094408527803*^9, 
  3.722094484583943*^9}, {3.722095822497778*^9, 3.722095912137097*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Get stable parts of an MSA", "Section",
 CellChangeTimes->{{3.72228693538647*^9, 3.7222869502296963`*^9}}],

Cell["\<\
Given an MSA, a maximum value (between 0 and 1) for the spread (stddev) of a \
stable column to be considered \[OpenCurlyDoubleQuote]not too diverse\
\[CloseCurlyDoubleQuote], and a minimum length for a run of stable columns to \
be considered a phase, return a list of lists of contiguous indices \
corresponding to stable phases over the MSA. For instance, something like \
{{4,5,6}, {10,11}, {21,22,23,24}}.\
\>", "Text",
 CellChangeTimes->{{3.722353318890662*^9, 3.722353440881014*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"MsaStableParts", "[", 
   RowBox[{
   "msa_", ",", "maxStableColumnSpread_", ",", "minStablePhaseLength_"}], 
   "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
     "densities", ",", "spreads", ",", "listOfPairs", ",", "listsOfPairs", 
      ",", "listsOfTruePairs", ",", "listsOfContiguousIndices"}], 
     "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"densities", ",", "spreads"}], "}"}], "=", 
      RowBox[{"MsaConsensus", "[", "msa", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"listOfPairs", "=", 
      RowBox[{"Table", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"i", ",", 
          RowBox[{
           RowBox[{
            RowBox[{"densities", "[", 
             RowBox[{"[", "i", "]"}], "]"}], "\[Equal]", "1.0"}], " ", "&&", 
           " ", 
           RowBox[{
            RowBox[{"spreads", "[", 
             RowBox[{"[", "i", "]"}], "]"}], "<=", 
            "maxStableColumnSpread"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
        
        RowBox[{"{", 
         RowBox[{"i", ",", 
          RowBox[{"Range", "@", 
           RowBox[{"Length", "@", "densities"}]}]}], "}"}]}], 
       "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"listsOfPairs", "=", 
      RowBox[{"SplitBy", "[", 
       RowBox[{"listOfPairs", ",", "Last"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"listsOfTruePairs", "=", 
      RowBox[{"DeleteCases", "[", 
       RowBox[{"listsOfPairs", ",", 
        RowBox[{"{", 
         RowBox[{"Repeated", "@", 
          RowBox[{"{", 
           RowBox[{"_", ",", "False"}], "}"}]}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"listsOfContiguousIndices", "=", 
      RowBox[{"Map", "[", 
       RowBox[{"First", ",", "listsOfTruePairs", ",", 
        RowBox[{"{", "2", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", 
      RowBox[{"Select", "[", 
       RowBox[{"listsOfContiguousIndices", ",", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "#", "]"}], "\[GreaterEqual]", 
          "minStablePhaseLength"}], "&"}]}], "]"}], "]"}], ";"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7222860451995373`*^9, 3.7222860980625563`*^9}, {
  3.722286187645444*^9, 3.7222862253305798`*^9}, {3.722286269892562*^9, 
  3.722286312164983*^9}, {3.7222865485870113`*^9, 3.7222865913320312`*^9}, {
  3.722286664641838*^9, 3.7222868166818333`*^9}, {3.7222868539187193`*^9, 
  3.722286878724557*^9}, {3.7222869632114067`*^9, 3.722286966715858*^9}}],

Cell["\<\
Given the MSA and one list of contiguous column indices corresponding to a \
stable phase, return a pattern that will match it. When the column contains \
more than one value (assuming the spread tolerance was high enough to allow \
this), an Alternatives pattern object is used for that column.\
\>", "Text",
 CellChangeTimes->{{3.722353466477456*^9, 3.722353566455237*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"MsaColumnsToPattern", "[", 
   RowBox[{"msa_", ",", "contiguousColIndices_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "possibleValues", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"Table", "[", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "We", " ", "assume", " ", "there", " ", "can", " ", "be", " ", "no", 
       " ", "Nulls", " ", "in", " ", "these", " ", "columns"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"possibleValues", "=", 
        RowBox[{"DeleteDuplicates", "@", 
         RowBox[{"msa", "[", 
          RowBox[{"[", 
           RowBox[{"All", ",", "i"}], "]"}], "]"}]}]}], ";", 
       "\[IndentingNewLine]", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Length", "[", "possibleValues", "]"}], ">", "1"}], ",", 
         RowBox[{"Alternatives", "@@", "possibleValues"}], ",", 
         RowBox[{"First", "@", "possibleValues"}]}], "]"}]}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"i", ",", "contiguousColIndices"}], "}"}]}], 
     "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",\

 InitializationCell->True,
 CellChangeTimes->{{3.722287254832947*^9, 3.722287280075798*^9}, {
  3.722287870508914*^9, 3.722287916198373*^9}, {3.722287973717984*^9, 
  3.722288099755227*^9}}],

Cell["This is old code; delete.", "Text",
 CellChangeTimes->{{3.722353569493801*^9, 3.7223535902237473`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ExMsaStablePartsPattern", "[", 
   RowBox[{
   "msa_", ",", "maxStableColumnSpread_", ",", "minStablePhaseLength_"}], 
   "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{"patterns", ",", "nInternalHoles", ",", "wildcardList"}], 
     "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"patterns", "=", 
      RowBox[{"Map", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"MsaColumnsToPattern", "[", 
          RowBox[{"msa", ",", "#"}], "]"}], "&"}], ",", "\[IndentingNewLine]", 
        RowBox[{"MsaStableParts", "[", 
         RowBox[{
         "msa", ",", "maxStableColumnSpread", ",", "minStablePhaseLength"}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     
     RowBox[{"nInternalHoles", "=", 
      RowBox[{
       RowBox[{"Length", "[", "patterns", "]"}], "-", "1"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
       "apparently", " ", "internal", " ", "wildcards", " ", "also", " ", 
        "need", " ", "to", " ", "be", " ", "zero"}], "-", "or", "-", "more"}],
       " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"wildcardList", "=", 
      RowBox[{"Join", "[", 
       RowBox[{
        RowBox[{"{", "___", "}"}], ",", 
        RowBox[{"ConstantArray", "[", 
         RowBox[{"___", ",", "nInternalHoles"}], "]"}], ",", 
        RowBox[{"{", "___", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", 
      RowBox[{"Flatten", "[", 
       RowBox[{"Riffle", "[", 
        RowBox[{"wildcardList", ",", "patterns"}], "]"}], "]"}], "]"}], 
     ";"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.722288214425631*^9, 3.722288274235724*^9}, {
  3.722288313054079*^9, 3.722288344491501*^9}, {3.722288696596786*^9, 
  3.722288698191577*^9}, {3.722288930269987*^9, 3.722289058595607*^9}, {
  3.722289520474779*^9, 3.722289538363996*^9}, {3.722311847604905*^9, 
  3.7223118516768227`*^9}, {3.722311901015764*^9, 3.722311901184812*^9}}],

Cell["\<\
Given an MSA, a maximum value (between 0 and 1) for the spread (stddev) of a \
stable column to be considered \[OpenCurlyDoubleQuote]not too diverse\
\[CloseCurlyDoubleQuote], and a minimum length for a run of stable columns to \
be considered a phase, return one big pattern that can match a sequence \
similar to the ones that were aligned, where the subpatterns for stable and \
variable parts are named v1, s1, v2, s2, v3, etc.

This assumes that the subset of traces used in the alignment was \
representative and diverse enough to cover most stable phenomena (which \
should be pretty easy if the stable phenomena are fairly stable), and that \
the variable parts in non-aligned traces won\[CloseCurlyQuote]t cause too \
many accidental or ambiguous matches (this could become problematic if the \
variable parts are hugely diverse, the stable parts are very small, and thus \
the odds of the latter occurring accidentally within the former become too \
high). We should have a retry criterion for this (e.g., if it\
\[CloseCurlyQuote]s just a few traces, ignore them, and if it\
\[CloseCurlyQuote]s a lot of them, realign with the problematic traces \
included in the alignment).\
\>", "Text",
 CellChangeTimes->{{3.7223535937410917`*^9, 3.7223539070677767`*^9}, {
  3.7223644541050167`*^9, 3.722364457359354*^9}, {3.7223659061890583`*^9, 
  3.722365939805903*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"MsaToPattern", "[", 
   RowBox[{
   "msa_", ",", "maxStableColumnSpread_", ",", "minStablePhaseLength_"}], 
   "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
     "stablePatterns", ",", "\[IndentingNewLine]", "numStable", ",", 
      "stableNames", ",", "namedStablePatterns", ",", "\[IndentingNewLine]", 
      "numWildcards", ",", "wildcardNames", ",", "namedWildcardPatterns", ",",
       "\[IndentingNewLine]", "fullPattern"}], "\[IndentingNewLine]", "}"}], 
    ",", "\[IndentingNewLine]", 
    RowBox[{"(*", " ", 
     RowBox[{
     "obtain", " ", "an", " ", "unnamed", " ", "pattern", " ", "for", " ", 
      "each", " ", "stable", " ", "part"}], " ", "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"stablePatterns", "=", 
      RowBox[{"Map", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"MsaColumnsToPattern", "[", 
          RowBox[{"msa", ",", "#"}], "]"}], "&"}], ",", "\[IndentingNewLine]", 
        RowBox[{"MsaStableParts", "[", 
         RowBox[{
         "msa", ",", "maxStableColumnSpread", ",", "minStablePhaseLength"}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
        RowBox[{"create", " ", "stable"}], "-", 
        RowBox[{
        "part", " ", "patterns", " ", "with", " ", "names", " ", "like", " ", 
         "s1"}]}], ",", " ", "s2", ",", " ", "etc"}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"caution", ":", " ", 
       RowBox[{
       "this", " ", "clears", " ", "any", " ", "global", " ", "definitions", 
        " ", "to", " ", "ensure", " ", "these", " ", "names", " ", "are", " ", 
        RowBox[{"fresh", "!"}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"numStable", "=", 
      RowBox[{"Length", "[", "stablePatterns", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"stableNames", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"\"\<s\>\"", "<>", 
         RowBox[{"ToString", "[", "i", "]"}]}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "numStable"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Apply", "[", 
      RowBox[{"ClearAll", ",", "stableNames"}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"stableNames", "=", 
      RowBox[{"Symbol", "/@", "stableNames"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"namedStablePatterns", "=", 
      RowBox[{"MapThread", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"Pattern", "[", 
          RowBox[{"#1", ",", 
           RowBox[{"Apply", "[", 
            RowBox[{"PatternSequence", ",", "#2"}], "]"}]}], "]"}], "&"}], 
        ",", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"stableNames", ",", "stablePatterns"}], "}"}]}], 
       "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{
       "create", " ", "wildcard", " ", "patterns", " ", "with", " ", "names", 
        " ", "like", " ", "v1"}], ",", " ", "v2", ",", " ", "etc"}], " ", 
      "*)"}], "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"caution", ":", " ", 
       RowBox[{
       "this", " ", "clears", " ", "any", " ", "global", " ", "definitions", 
        " ", "to", " ", "ensure", " ", "these", " ", "names", " ", "are", " ", 
        RowBox[{"fresh", "!"}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"PEND", ":", " ", 
        RowBox[{"Use", " ", "___", " ", "or", " ", 
         RowBox[{"__", "?", " ", "Before"}], " ", "and", " ", 
         RowBox[{"after", "?", " ", "In"}], " ", 
         RowBox[{"between", "?", " ", "Think"}], " ", "about", " ", 
         "this"}]}], ",", " ", 
       RowBox[{
        RowBox[{"and", " ", "the", " ", "phase"}], "-", 
        RowBox[{"emptiness", " ", 
         RowBox[{"issue", "."}]}]}]}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"numWildcards", "=", 
      RowBox[{
       RowBox[{"Length", "[", "stablePatterns", "]"}], "+", "1"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"wildcardNames", "=", 
      RowBox[{"Table", "[", 
       RowBox[{
        RowBox[{"\"\<v\>\"", "<>", 
         RowBox[{"ToString", "[", "i", "]"}]}], ",", 
        RowBox[{"{", 
         RowBox[{"i", ",", "numWildcards"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Apply", "[", 
      RowBox[{"ClearAll", ",", "wildcardNames"}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"wildcardNames", "=", 
      RowBox[{"Symbol", "/@", "wildcardNames"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"namedWildcardPatterns", "=", 
      RowBox[{"Map", "[", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
         RowBox[{
          RowBox[{"Pattern", "[", 
           RowBox[{"#", ",", "___Integer"}], "]"}], "&"}], ","}], " ", "*)"}],
        " ", 
       RowBox[{"(*", " ", 
        RowBox[{
        "testing", " ", "to", " ", "see", " ", "if", " ", "we", " ", "can", 
         " ", "use", " ", "real", " ", "numbers"}], " ", "*)"}], 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"Pattern", "[", 
          RowBox[{"#", ",", "___"}], "]"}], "&"}], ",", "\[IndentingNewLine]",
         "wildcardNames"}], "\[IndentingNewLine]", "]"}]}], ";", 
     "\[IndentingNewLine]", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"riffle", " ", "variable", " ", "and", " ", "stable"}], "-", 
       RowBox[{"phase", " ", "patterns"}]}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"fullPattern", "=", 
      RowBox[{"Riffle", "[", 
       RowBox[{"namedWildcardPatterns", ",", "namedStablePatterns"}], "]"}]}],
      ";", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "fullPattern", "]"}], ";"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.722288214425631*^9, 3.722288274235724*^9}, {
   3.722288313054079*^9, 3.722288344491501*^9}, {3.722288696596786*^9, 
   3.722288698191577*^9}, {3.722288930269987*^9, 3.722289058595607*^9}, {
   3.722289520474779*^9, 3.722289538363996*^9}, {3.722311847604905*^9, 
   3.7223118516768227`*^9}, {3.722311904846323*^9, 3.722312044005698*^9}, {
   3.7223589554363537`*^9, 3.7223590460757437`*^9}, {3.722359229858244*^9, 
   3.722359240393898*^9}, {3.722359809528756*^9, 3.722359901719274*^9}, {
   3.722362031431831*^9, 3.7223620320239162`*^9}, {3.722364512985908*^9, 
   3.722364647051618*^9}, {3.722364697852909*^9, 3.7223649751651154`*^9}, {
   3.7223651229657297`*^9, 3.722365130824257*^9}, {3.7223651772856092`*^9, 
   3.722365216645774*^9}, {3.722365286698723*^9, 3.7223654063302593`*^9}, {
   3.722365505857863*^9, 3.722365539930703*^9}, {3.722365612821604*^9, 
   3.7223656148128443`*^9}, {3.7223660130323267`*^9, 3.7223661086542664`*^9}, 
   3.722366140073403*^9, {3.722534144308159*^9, 3.722534164815061*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"MsaPatternToSplittingFunction", "[", "fullPattern_", "]"}], ":=", 
  RowBox[{"Block", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"partNames", ",", "outputTemplate", ",", "splittingFun"}], "}"}],
     ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"partNames", "=", 
      RowBox[{"Map", "[", 
       RowBox[{"First", ",", "fullPattern"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"outputTemplate", "=", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"ToString", "[", "#", "]"}], "\[Rule]", 
           RowBox[{"{", "#", "}"}]}], ")"}], "&"}], ",", "partNames"}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"splittingFun", "=", 
      RowBox[{"ReplaceAll", "[", 
       RowBox[{"fullPattern", "\[Rule]", "outputTemplate"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "splittingFun", "]"}], ";"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.722366113084158*^9, 3.722366147576017*^9}, {
  3.722366270754921*^9, 3.722366287046138*^9}, {3.722366320892952*^9, 
  3.722366431199541*^9}, {3.7223664860501328`*^9, 3.7223665171904783`*^9}, {
  3.722366711150277*^9, 3.722366711951133*^9}, {3.7223667666914682`*^9, 
  3.722366784346326*^9}, {3.722366833040863*^9, 3.722366927526862*^9}}],

Cell["\<\
Show a bunch of sequences on a fixed scale based on the longest one.\
\>", "Text",
 CellChangeTimes->{{3.722403123935071*^9, 3.722403149124651*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ShowSeqsMaxScale", "[", "seqs_", "]"}], ":=", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"maxlen", "=", 
      RowBox[{"Max", "[", 
       RowBox[{"Length", "/@", "seqs"}], "]"}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"Manipulate", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"ListPlot", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"sdsSizes", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "[", 
         RowBox[{"[", "j", "]"}], "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"Filling", "\[Rule]", "Axis"}], ",", 
        RowBox[{"Joined", "\[Rule]", "True"}], ",", 
        RowBox[{"PlotRange", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "maxlen"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1500"}], ",", "1500"}], "}"}]}], "}"}]}], ",", 
        RowBox[{"ImageSize", "\[Rule]", "Large"}]}], "\[IndentingNewLine]", 
       "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"j", ",", "1", ",", 
        RowBox[{"Length", "[", 
         RowBox[{"sdsSizes", "[", 
          RowBox[{"[", "1", "]"}], "]"}], "]"}], ",", "1"}], "}"}]}], 
     "\[IndentingNewLine]", "]"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",\

 InitializationCell->True,
 CellChangeTimes->{{3.72239708517631*^9, 3.7223971592612123`*^9}, {
  3.722399378363762*^9, 3.722399387101898*^9}, {3.722399417747601*^9, 
  3.722399431709256*^9}, {3.722399533126845*^9, 3.72239956515178*^9}, {
  3.722401983403955*^9, 3.722402013942609*^9}, {3.722402348254613*^9, 
  3.722402364082131*^9}, {3.72240244030334*^9, 3.722402443814824*^9}, {
  3.722403066427898*^9, 3.722403104634454*^9}, {3.722403213068262*^9, 
  3.722403217738298*^9}}],

Cell["\<\
Given a ragged-right list-of-lists, return a rectangular one by padding right \
with the given element.\
\>", "Text",
 CellChangeTimes->{{3.7224565734978037`*^9, 3.7224565944177427`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"PadRightAll", "[", 
   RowBox[{"lists_", ",", 
    RowBox[{"elem_:", "Null"}]}], "]"}], ":=", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"maxLength", "=", 
      RowBox[{"Max", "[", 
       RowBox[{"Length", "/@", "lists"}], "]"}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"PadRight", "[", 
        RowBox[{"#", ",", "maxLength", ",", "elem"}], "]"}], "&"}], ",", 
      "lists"}], "]"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.72245659712444*^9, 3.722456678963182*^9}, {
  3.7224575213665657`*^9, 3.722457521675796*^9}, {3.7224576152902803`*^9, 
  3.722457619228621*^9}}],

Cell["\<\
Show side-by-side. (Why does one sometimes seem a bit taller?)\
\>", "Text",
 CellChangeTimes->{{3.7224052345646057`*^9, 3.722405252199301*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ShowSeqsMsa", "[", 
   RowBox[{"seqs_", ",", "msa_", ",", "howManyLines_Integer"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
     "seqsLines", ",", "longestSeqsLine", ",", 
      "seqsLinesPaddedRightWithNulls", ",", "msaLines", ",", 
      "colorFunction"}], "\[IndentingNewLine]", "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"msaLines", "=", 
      RowBox[{"msa", "[", 
       RowBox[{"[", 
        RowBox[{"1", ";;", "howManyLines"}], "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"seqsLines", "=", 
      RowBox[{"seqs", "[", 
       RowBox[{"[", 
        RowBox[{"1", ";;", "howManyLines"}], "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"longestSeqsLine", "=", 
      RowBox[{"Max", "[", 
       RowBox[{"Length", "/@", "seqsLines"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"seqsLinesPaddedRightWithNulls", "=", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"PadRight", "[", 
          RowBox[{"#", ",", "longestSeqsLine", ",", "Null"}], "]"}], "&"}], 
        ",", "seqsLines"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"colorFunction", "=", "\"\<Rainbow\>\""}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"GraphicsRow", "[", 
      RowBox[{
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"ArrayPlot", "[", 
          RowBox[{
           RowBox[{"seqsLinesPaddedRightWithNulls", "/.", 
            RowBox[{"Null", "\[Rule]", "None"}]}], ",", 
           RowBox[{"ColorFunction", "\[Rule]", "colorFunction"}], ",", 
           RowBox[{"ImageSize", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"Automatic", ",", "Small"}], "}"}]}], ",", 
           RowBox[{"Background", "\[Rule]", "White"}]}], "]"}], ",", 
         "\[IndentingNewLine]", 
         RowBox[{"ArrayPlot", "[", 
          RowBox[{
           RowBox[{"msaLines", "/.", 
            RowBox[{"Null", "\[Rule]", "None"}]}], ",", 
           RowBox[{"ColorFunction", "\[Rule]", "colorFunction"}], ",", 
           RowBox[{"ImageSize", "\[Rule]", 
            RowBox[{"{", 
             RowBox[{"Automatic", ",", "Small"}], "}"}]}], ",", 
           RowBox[{"Background", "\[Rule]", "White"}]}], "]"}]}], 
        "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
       RowBox[{"Spacings", "\[Rule]", 
        RowBox[{"Scaled", "[", "0.1", "]"}]}]}], "\[IndentingNewLine]", 
      "]"}]}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.722404801067588*^9, 3.7224048572393513`*^9}, {
   3.722404901598074*^9, 3.722404901941784*^9}, {3.722404934244501*^9, 
   3.7224049857168303`*^9}, {3.722405921464121*^9, 3.722405932604353*^9}, {
   3.722449017423086*^9, 3.7224490433592787`*^9}, {3.722449138395732*^9, 
   3.722449213666493*^9}, {3.722449249603615*^9, 3.722449456009561*^9}, {
   3.722449628979456*^9, 3.7224496385737267`*^9}, {3.722449671687756*^9, 
   3.722449724847083*^9}, {3.7224497804520197`*^9, 3.722449796249888*^9}, {
   3.722449872768404*^9, 3.722449903495902*^9}, {3.7224499428627367`*^9, 
   3.722449957057691*^9}, {3.722449993630781*^9, 3.7224500056044893`*^9}, {
   3.722450053063735*^9, 3.7224500897566566`*^9}, {3.722450162391321*^9, 
   3.722450190712226*^9}, {3.7224503299104757`*^9, 3.7224503430438223`*^9}, {
   3.722450447711987*^9, 3.722450460418406*^9}, {3.7224505888920937`*^9, 
   3.722450602162569*^9}, 3.722450693508628*^9, {3.722450757826303*^9, 
   3.7224509039627733`*^9}, {3.72245769279946*^9, 3.7224577356372147`*^9}, {
   3.7224577725238934`*^9, 3.722457787352284*^9}, {3.722458024054596*^9, 
   3.722458034409719*^9}}],

Cell["The Pommade!", "Text",
 CellChangeTimes->{{3.722405258169013*^9, 3.722405259685956*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"IndicesOfElemsThatDontMatch", "[", 
   RowBox[{"patt_", ",", "list_"}], "]"}], ":=", "\[IndentingNewLine]", 
  RowBox[{"Map", "[", "\[IndentingNewLine]", 
   RowBox[{"First", ",", "\[IndentingNewLine]", 
    RowBox[{"Cases", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Transpose", "[", 
       RowBox[{"{", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Range", "[", 
          RowBox[{"Length", "@", "list"}], "]"}], ",", "\[IndentingNewLine]", 
         
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{"MatchQ", "[", "patt", "]"}], ",", "list"}], "]"}]}], 
        "\[IndentingNewLine]", "}"}], "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"{", 
       RowBox[{"_", ",", "False"}], "}"}]}], "\[IndentingNewLine]", "]"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.72256443022646*^9, 3.722564433808448*^9}, {
  3.722564501506073*^9, 3.722564532301239*^9}, {3.722564650320816*^9, 
  3.7225647760413933`*^9}}],

Cell["\<\
Which seqs do not match? (It would be good to amortize this time by returning \
both the matches and the non-matching indices.)\
\>", "Text",
 CellChangeTimes->{{3.722567089774169*^9, 3.722567133376523*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"MsaTryToSplitSeqsIntoPhases", "[", 
   RowBox[{
   "msa_", ",", "seqs_", ",", "maxSpread_Real", ",", "minLength_Integer"}], 
   "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{"patt", ",", "indicesOfSeqsThatDontMatch"}], 
     "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"patt", "=", 
      RowBox[{"MsaToPattern", "[", 
       RowBox[{"msa", ",", "maxSpread", ",", "minLength"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"Print", "[", "patt", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Print", "[", 
      RowBox[{"\"\<Running MatchQ on \>\"", "<>", 
       RowBox[{"ToString", "[", 
        RowBox[{"Length", "@", "seqs"}], "]"}], "<>", "\"\< seqs ...\>\""}], 
      "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"indicesOfSeqsThatDontMatch", "=", 
      RowBox[{"IndicesOfElemsThatDontMatch", "[", 
       RowBox[{"patt", ",", "seqs"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Print", "[", 
      RowBox[{
       RowBox[{"ToString", "[", 
        RowBox[{"Length", "[", "indicesOfSeqsThatDontMatch", "]"}], "]"}], 
       "<>", "\"\< of \>\"", "<>", 
       RowBox[{"ToString", "[", 
        RowBox[{"Length", "[", "seqs", "]"}], "]"}], "<>", 
       "\"\< seqs don't match.\>\""}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "indicesOfSeqsThatDontMatch", "]"}], ";"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.722404588598933*^9, 3.722404656771048*^9}, {
  3.722404693802882*^9, 3.722404787768785*^9}, {3.722405263653029*^9, 
  3.722405278171481*^9}, {3.7224054847837467`*^9, 3.722405549096623*^9}, {
  3.722479030645138*^9, 3.722479043985034*^9}, {3.722479110408445*^9, 
  3.7224791139528522`*^9}, {3.7224800441171722`*^9, 3.722480044205967*^9}, {
  3.7224801654160433`*^9, 3.722480165470772*^9}, {3.7225639337652597`*^9, 
  3.722563958582807*^9}, {3.722563990967223*^9, 3.7225640582281237`*^9}, {
  3.722566864998913*^9, 3.722566916936005*^9}, {3.722566949709632*^9, 
  3.7225669876611853`*^9}, {3.7225670641384697`*^9, 3.722567084333233*^9}}],

Cell["\<\
PEND: This fails if any seqs do not match (improve, merge with above).\
\>", "Text",
 CellChangeTimes->{{3.722567144192233*^9, 3.7225671614485493`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"MsaSplitSeqsIntoPhasesRequireAllToMatch", "[", 
   RowBox[{
   "msa_", ",", "seqs_", ",", "maxSpread_Real", ",", "minLength_Integer"}], 
   "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
     "patt", ",", "splittingFun", ",", "ruleLists", ",", 
      "listOfListsOfSubseqs"}], "\[IndentingNewLine]", "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"patt", "=", 
      RowBox[{"MsaToPattern", "[", 
       RowBox[{"msa", ",", "maxSpread", ",", "minLength"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"splittingFun", "=", 
      RowBox[{"MsaPatternToSplittingFunction", "[", "patt", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"ruleLists", "=", 
      RowBox[{"Map", "[", 
       RowBox[{"splittingFun", ",", "seqs"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", "hmm", " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"listOfListsOfSubseqs", "=", 
      RowBox[{"Map", "[", 
       RowBox[{"Last", ",", "ruleLists", ",", 
        RowBox[{"{", "2", "}"}]}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "listOfListsOfSubseqs", "]"}], ";"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.722404588598933*^9, 3.722404656771048*^9}, {
  3.722404693802882*^9, 3.722404787768785*^9}, {3.722405263653029*^9, 
  3.722405278171481*^9}, {3.7224054847837467`*^9, 3.722405549096623*^9}, {
  3.722479030645138*^9, 3.722479043985034*^9}, {3.722479110408445*^9, 
  3.7224791139528522`*^9}, {3.7224800441171722`*^9, 3.722480044205967*^9}, {
  3.7224801654160433`*^9, 3.722480165470772*^9}, {3.729203636253243*^9, 
  3.7292036387686443`*^9}}],

Cell["\<\
This returns a list of indices of the seqs that matched, and a list of lists \
of subseqs only for those seqs that matched.\
\>", "Text",
 CellChangeTimes->{{3.72919864011579*^9, 3.729198651383998*^9}, {
  3.729204055988132*^9, 3.7292041204832487`*^9}, {3.729206475729001*^9, 
  3.7292064759508123`*^9}, {3.729208675472062*^9, 3.7292087027337*^9}}],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"MsaSplitSeqsIntoPhases", "[", 
    RowBox[{
    "msa_", ",", "seqs_", ",", "maxSpread_Real", ",", "minLength_Integer"}], 
    "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
      "patt", ",", "splittingFun", ",", "splittingFunResults", ",", 
       "listOfPairsOfIndexAndListOfListsOfSubseqs", ",", 
       "listOfIndicesThatMatched", ",", "listOfListsOfSubseqs"}], 
      "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"patt", "=", 
       RowBox[{"MsaToPattern", "[", 
        RowBox[{"msa", ",", "maxSpread", ",", "minLength"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"splittingFun", "=", 
       RowBox[{"MsaPatternToSplittingFunction", "[", "patt", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "These", " ", "are", " ", "either", " ", "rule", " ", "lists", " ", 
        RowBox[{"(", 
         RowBox[{"if", " ", "success"}], ")"}], " ", "or", " ", "integer", 
        " ", "lists", " ", 
        RowBox[{"(", 
         RowBox[{"if", " ", "failure"}], ")"}]}], " ", "*)"}], 
      "\[IndentingNewLine]", 
      RowBox[{"splittingFunResults", "=", 
       RowBox[{"Map", "[", 
        RowBox[{"splittingFun", ",", "seqs"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"listOfPairsOfIndexAndListOfListsOfSubseqs", "=", 
       RowBox[{"MapIndexed", "[", 
        RowBox[{
        "ProcessSplitFunnedLineAndIndex", ",", "splittingFunResults"}], 
        "]"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "Remove", " ", "the", " ", "ones", " ", "that", " ", "did", " ", "not",
         " ", "match"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{"listOfPairsOfIndexAndListOfListsOfSubseqs", "=", 
       RowBox[{"DeleteCases", "[", 
        RowBox[{"listOfPairsOfIndexAndListOfListsOfSubseqs", ",", 
         RowBox[{"{", 
          RowBox[{"__", ",", "None"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{"Transpose", " ", "and", " ", "return"}], " ", "*)"}], 
      "\[IndentingNewLine]", " ", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"listOfIndicesThatMatched", ",", "listOfListsOfSubseqs"}], 
        "}"}], "=", 
       RowBox[{
       "Transpose", "[", "listOfPairsOfIndexAndListOfListsOfSubseqs", "]"}]}],
       ";", "\[IndentingNewLine]", 
      RowBox[{"Return", "[", " ", 
       RowBox[{"{", 
        RowBox[{"listOfIndicesThatMatched", ",", "listOfListsOfSubseqs"}], 
        "}"}], "]"}], ";"}]}], "\[IndentingNewLine]", "]"}]}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"IsFirstElemRuleQ", "[", "x_List", "]"}], ":=", 
   RowBox[{
    RowBox[{"Head", "[", 
     RowBox[{"First", "[", "x", "]"}], "]"}], "===", "Rule"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"DidSplittingFunSucceed", "[", "x_List", "]"}], ":=", 
    RowBox[{"IsFirstElemRuleQ", "[", "x", "]"}]}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{
    RowBox[{
    "Given", " ", "a", " ", "result", " ", "of", " ", "splittingFun", " ", 
     "and", " ", "the", " ", "partspec", " ", "of", " ", "the", " ", 
     "splitfunned", " ", "elem"}], ",", " ", 
    RowBox[{"return", " ", "a", " ", "tuple", " ", 
     RowBox[{"{", 
      RowBox[{"i", ",", "result"}], "}"}], " ", "where", 
     "\[IndentingNewLine]", "  ", "i", " ", "is", " ", "the", " ", "index", 
     " ", "and", "\[IndentingNewLine]", "  ", "result", " ", "is", " ", 
     "either", " ", 
     RowBox[{"Map", "[", "Last", "]"}], " ", "onto", " ", "the", " ", 
     "result", " ", "of", " ", "splittingFun"}], ",", " ", 
    RowBox[{"if", " ", "splittingFun", " ", "was", " ", "successful"}], ",", 
    " ", 
    RowBox[{"or", " ", "None", " ", "if", " ", "it", " ", 
     RowBox[{"wasn", "'"}], 
     RowBox[{"t", "."}]}]}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ProcessSplitFunnedLineAndIndex", "[", 
   RowBox[{"splittingFunResult_List", ",", "indexPartSpec_"}], "]"}], ":=", 
  RowBox[{"{", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"First", "[", "indexPartSpec", "]"}], ",", "\[IndentingNewLine]", 
    
    RowBox[{"If", "[", 
     RowBox[{
      RowBox[{"DidSplittingFunSucceed", "[", "splittingFunResult", "]"}], ",", 
      RowBox[{"Map", "[", 
       RowBox[{"Last", ",", "splittingFunResult"}], "]"}], ",", "None"}], 
     "]"}]}], "\[IndentingNewLine]", "}"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.722404588598933*^9, 3.722404656771048*^9}, {
   3.722404693802882*^9, 3.722404787768785*^9}, {3.722405263653029*^9, 
   3.722405278171481*^9}, {3.7224054847837467`*^9, 3.722405549096623*^9}, {
   3.722479030645138*^9, 3.722479043985034*^9}, {3.722479110408445*^9, 
   3.7224791139528522`*^9}, {3.7224800441171722`*^9, 3.722480044205967*^9}, {
   3.7224801654160433`*^9, 3.722480165470772*^9}, {3.729203636253243*^9, 
   3.7292036387686443`*^9}, {3.729204398783638*^9, 3.7292044055405397`*^9}, {
   3.7292044872536373`*^9, 3.7292044919393463`*^9}, 3.729206419916554*^9, {
   3.729206584807609*^9, 3.7292066297746887`*^9}, {3.72920677979195*^9, 
   3.7292069346249857`*^9}, {3.729206971573134*^9, 3.7292070236383038`*^9}, {
   3.7292072328510237`*^9, 3.729207428736562*^9}, {3.729207479597924*^9, 
   3.729207526577264*^9}, {3.729207607387053*^9, 3.729207729498856*^9}, {
   3.72920783395721*^9, 3.729207922844076*^9}, {3.729207959890645*^9, 
   3.729207978564288*^9}, {3.72920806306231*^9, 3.729208106492304*^9}, {
   3.729208137867182*^9, 3.729208139442959*^9}, {3.729208507415744*^9, 
   3.729208619117651*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ShowPhasesOld", "[", "listOfListsOfSubseqs_", "]"}], ":=", 
  RowBox[{"With", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{"howMany", "=", 
      RowBox[{"Length", "[", 
       RowBox[{"First", "[", "listOfListsOfSubseqs", "]"}], "]"}]}], 
     "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{"GraphicsRow", "[", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"Table", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"ArrayPlot", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"listOfListsOfSubseqs", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", "i"}], "]"}], "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"ImageSize", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"Automatic", ",", "300"}], "}"}]}]}], 
         "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"i", ",", "1", ",", "howMany"}], "}"}]}], 
       "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
      RowBox[{"ImageSize", "\[Rule]", "Large"}], ",", "\[IndentingNewLine]", 
      RowBox[{"Alignment", "\[Rule]", "Bottom"}]}], "\[IndentingNewLine]", 
     "]"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.722405438762992*^9, 3.722405446508356*^9}, {
  3.722405481218378*^9, 3.722405482211314*^9}, {3.722405551737412*^9, 
  3.722405642130636*^9}, {3.722405908163566*^9, 3.722405915189412*^9}, {
  3.722406065328417*^9, 3.722406103271598*^9}, {3.722406146664053*^9, 
  3.722406188279079*^9}, {3.722456481933496*^9, 3.722456544210513*^9}, {
  3.722460679998612*^9, 3.7224606822602253`*^9}, {3.729258506797989*^9, 
  3.729258507055726*^9}}],

Cell["Show phases", "Text",
 CellChangeTimes->{{3.729260632519897*^9, 3.729260634240782*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ShowPhases", "[", 
   RowBox[{"listOfListsOfSubseqs_", ",", 
    RowBox[{"upTohowManyLines_Integer:", "100"}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
     "howManyCols", ",", "howManyLines", ",", "uniqueValues", ",", 
      "colorFunction"}], "\[IndentingNewLine]", "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"howManyCols", "=", 
      RowBox[{"Length", "[", 
       RowBox[{"First", "[", "listOfListsOfSubseqs", "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"howManyLines", "=", 
      RowBox[{"Min", "[", 
       RowBox[{"{", 
        RowBox[{"upTohowManyLines", ",", 
         RowBox[{"Length", "[", "listOfListsOfSubseqs", "]"}]}], "}"}], 
       "]"}]}], ";", 
     RowBox[{"uniqueValues", "=", 
      RowBox[{"DeleteDuplicates", "@", 
       RowBox[{"Flatten", "[", "listOfListsOfSubseqs", "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"colorFunction", "=", 
      RowBox[{"ValuesToColors", "[", "uniqueValues", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"GraphicsRow", "[", "\[IndentingNewLine]", 
      RowBox[{"Table", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"ArrayPlot", "[", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Map", "[", 
           RowBox[{"colorFunction", ",", "\[IndentingNewLine]", 
            RowBox[{"listOfListsOfSubseqs", "[", 
             RowBox[{"[", 
              RowBox[{
               RowBox[{"1", ";;", "howManyLines"}], ",", "i"}], "]"}], "]"}], 
            ",", "\[IndentingNewLine]", 
            RowBox[{"{", "2", "}"}]}], "\[IndentingNewLine]", "]"}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"Mesh", "\[Rule]", "All"}], ",", "\[IndentingNewLine]", 
          RowBox[{"ImageSize", "\[Rule]", 
           RowBox[{"{", 
            RowBox[{"Automatic", ",", "500"}], "}"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{"ImagePadding", "\[Rule]", "None"}]}], 
         "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"i", ",", "1", ",", "howManyCols"}], "}"}]}], 
       "\[IndentingNewLine]", "]"}], "\[IndentingNewLine]", "]"}]}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.722405438762992*^9, 3.722405446508356*^9}, {
  3.722405481218378*^9, 3.722405482211314*^9}, {3.722405551737412*^9, 
  3.722405642130636*^9}, {3.722405908163566*^9, 3.722405915189412*^9}, {
  3.722406065328417*^9, 3.722406103271598*^9}, {3.722406146664053*^9, 
  3.722406188279079*^9}, {3.722456481933496*^9, 3.722456544210513*^9}, {
  3.722460679998612*^9, 3.7224606822602253`*^9}, {3.7292585129235764`*^9, 
  3.729258527530044*^9}, {3.7292585711220493`*^9, 3.72925859805807*^9}, {
  3.729260592957899*^9, 3.729260605617868*^9}, {3.729260654763155*^9, 
  3.7292606591833076`*^9}, {3.729260718387927*^9, 3.7292607528945847`*^9}, {
  3.729260865976384*^9, 3.729260900948133*^9}, {3.729260964361807*^9, 
  3.729260987111587*^9}, {3.729272409990137*^9, 3.72927243999804*^9}, {
  3.729284359063895*^9, 3.729284361519195*^9}, {3.729284392014338*^9, 
  3.72928439606985*^9}}],

Cell["\<\
This version \[OpenCurlyDoubleQuote]glues\[CloseCurlyDoubleQuote] them \
together with black dividers to avoid scaling issues\
\>", "Text",
 CellChangeTimes->{{3.7292701625787582`*^9, 3.729270184539987*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ShowPhasesBlock", "[", 
   RowBox[{"listOfListsOfSubseqs_", ",", 
    RowBox[{"upToHowManyLines_Integer:", "100"}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
     "howManyCols", ",", "howManyLines", ",", "uniqueValues", ",", 
      "colorFunction", ",", "colorArrays", ",", "h", ",", 
      "sidewaysSeparatorArray", ",", "sidewaysColorArrays", ",", 
      "finalColorArray"}], "\[IndentingNewLine]", "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"howManyCols", "=", 
      RowBox[{"Length", "[", 
       RowBox[{"First", "[", "listOfListsOfSubseqs", "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"howManyLines", "=", 
      RowBox[{"Min", "[", 
       RowBox[{"{", 
        RowBox[{"upToHowManyLines", ",", 
         RowBox[{"Length", "[", "listOfListsOfSubseqs", "]"}]}], "}"}], 
       "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"uniqueValues", "=", 
      RowBox[{"DeleteDuplicates", "@", 
       RowBox[{"Flatten", "[", "listOfListsOfSubseqs", "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"colorFunction", "=", 
      RowBox[{"ValuesToColors", "[", "uniqueValues", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"colorArrays", "=", 
      RowBox[{"Table", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Map", "[", 
         RowBox[{"colorFunction", ",", "\[IndentingNewLine]", 
          RowBox[{"listOfListsOfSubseqs", "[", 
           RowBox[{"[", 
            RowBox[{
             RowBox[{"1", ";;", "howManyLines"}], ",", "i"}], "]"}], "]"}], 
          ",", "\[IndentingNewLine]", 
          RowBox[{"{", "2", "}"}]}], "\[IndentingNewLine]", "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"i", ",", "1", ",", "howManyCols"}], "}"}]}], 
       "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
      "now", " ", "join", " ", "the", " ", "color", " ", "arrays", " ", 
       "into", " ", "one"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"h", "=", 
      RowBox[{"Length", "[", 
       RowBox[{"First", "[", "colorArrays", "]"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"sidewaysSeparatorArray", "=", 
      RowBox[{"ConstantArray", "[", 
       RowBox[{"White", ",", 
        RowBox[{"{", 
         RowBox[{"5", ",", "h"}], "}"}]}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"sidewaysColorArrays", "=", 
      RowBox[{"Map", "[", 
       RowBox[{"Transpose", ",", "colorArrays"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{"need", " ", "to", " ", 
       RowBox[{"hold", "/", "release"}], " ", "to", " ", "avoid", " ", "the", 
       " ", "wrong", " ", "version", " ", "of", " ", "Riffle", " ", 
       RowBox[{"applying", "!"}], " ", "because", " ", "2", "nd", " ", "arg", 
       " ", "is", " ", "a", " ", "list"}], " ", "*)"}], "\[IndentingNewLine]", 
     RowBox[{"finalColorArray", "=", 
      RowBox[{"Transpose", "[", "\[IndentingNewLine]", 
       RowBox[{"Join", "@@", 
        RowBox[{"ReleaseHold", "[", 
         RowBox[{"Riffle", "[", 
          RowBox[{"sidewaysColorArrays", ",", 
           RowBox[{"Hold", "[", "sidewaysSeparatorArray", "]"}]}], "]"}], 
         "]"}]}], "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     
     RowBox[{"Return", "[", 
      RowBox[{"ArrayPlot", "[", 
       RowBox[{"finalColorArray", ",", 
        RowBox[{"ImageSize", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{"Automatic", ",", "800"}], "}"}]}], ",", 
        RowBox[{"Frame", "\[Rule]", "None"}]}], "]"}], "]"}], ";"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.722405438762992*^9, 3.722405446508356*^9}, {
   3.722405481218378*^9, 3.722405482211314*^9}, {3.722405551737412*^9, 
   3.722405642130636*^9}, {3.722405908163566*^9, 3.722405915189412*^9}, {
   3.722406065328417*^9, 3.722406103271598*^9}, {3.722406146664053*^9, 
   3.722406188279079*^9}, {3.722456481933496*^9, 3.722456544210513*^9}, {
   3.722460679998612*^9, 3.7224606822602253`*^9}, {3.7292585129235764`*^9, 
   3.729258527530044*^9}, {3.7292585711220493`*^9, 3.72925859805807*^9}, {
   3.729260592957899*^9, 3.729260605617868*^9}, {3.729260654763155*^9, 
   3.7292606591833076`*^9}, {3.729260718387927*^9, 3.7292607528945847`*^9}, {
   3.729260865976384*^9, 3.729260900948133*^9}, {3.729260964361807*^9, 
   3.729260987111587*^9}, {3.729270188399123*^9, 3.7292703016214113`*^9}, 
   3.7292706088924913`*^9, {3.729270666310006*^9, 3.729270675769603*^9}, {
   3.7292707527425547`*^9, 3.72927080490932*^9}, {3.729270837444509*^9, 
   3.7292710449716597`*^9}, {3.7292714236814938`*^9, 3.729271439119845*^9}, {
   3.729271474582852*^9, 3.7292714748080883`*^9}, {3.7292715212513037`*^9, 
   3.729271536200982*^9}, {3.729271711891448*^9, 3.7292717532555523`*^9}, {
   3.7292721417907124`*^9, 3.7292721678447733`*^9}, {3.729272374855858*^9, 
   3.729272399248076*^9}, {3.7292724457163353`*^9, 3.7292724541327343`*^9}}],

Cell["\<\
Given a list of lists of values, return a list of {from, to} index ranges \
such that extracting each range from the concatenation of the list of lists \
would yield that list of lists. For example, {{50, 70}, {90, 40, 10, 22}, \
{44}} yields {{1, 2}, {3, 6}, {7, 7}}.

Whenever one of the lists is empty, it yields a {-1,1} range.\
\>", "Text",
 CellChangeTimes->{{3.7224637927931747`*^9, 3.7224639145354977`*^9}, {
  3.722464683345326*^9, 3.7224647133124866`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"OnePartitionToFromToRanges", "[", "listOfLists_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"lengths", "=", 
       RowBox[{"Length", "/@", "listOfLists"}]}], ",", "pairs"}], 
     "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"pairs", "=", 
      RowBox[{"Transpose", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Drop", "[", 
          RowBox[{
           RowBox[{"Accumulate", "[", 
            RowBox[{"Join", "[", 
             RowBox[{
              RowBox[{"{", "1", "}"}], ",", "lengths"}], "]"}], "]"}], ",", 
           RowBox[{"-", "1"}]}], "]"}], ",", 
         RowBox[{"Accumulate", "[", "lengths", "]"}]}], "}"}], "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"(*", " ", 
      RowBox[{
       RowBox[{"replace", " ", "any", " ", 
        RowBox[{"{", 
         RowBox[{"a", ",", "b"}], "}"}], " ", "pairs", " ", "where", " ", 
        "b"}], ">", 
       RowBox[{"a", " ", "with", " ", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "1"}], ",", "1"}], "}"}]}]}], " ", "*)"}], 
     "\[IndentingNewLine]", 
     RowBox[{"Return", "[", 
      RowBox[{"Map", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"#", "[", 
             RowBox[{"[", "1", "]"}], "]"}], "\[LessEqual]", 
            RowBox[{"#", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}], ",", "#", ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "]"}], "&"}], ",", 
        "\[IndentingNewLine]", "pairs"}], "\[IndentingNewLine]", "]"}], "]"}],
      ";"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.72246391911932*^9, 3.7224639436998367`*^9}, {
  3.7224639822042093`*^9, 3.722464002332456*^9}, {3.722464559393298*^9, 
  3.722464584042869*^9}, {3.722464731854292*^9, 3.722464855307439*^9}, {
  3.722571694217443*^9, 3.72257169449561*^9}}],

Cell["\<\
Given a list of lists of subseqs (i.e., a list of seqs, each of which is \
split into chunks), return a list of lists of {from, to} ranges.\
\>", "Text",
 CellChangeTimes->{{3.722463698118534*^9, 3.722463726809202*^9}, {
  3.722571680157525*^9, 3.722571686139598*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"PhasesToListsOfFromToRanges", "[", "phases_", "]"}], ":=", 
  RowBox[{"Map", "[", 
   RowBox[{"OnePartitionToFromToRanges", ",", "phases"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7225717011282787`*^9, 3.722571734964942*^9}}],

Cell["\<\
Given a list of lists of subseqs, remove any \[OpenCurlyDoubleQuote]column\
\[CloseCurlyDoubleQuote] subseq such that the whole column consists of empty \
subseqs. Note that when doing this, the information may be lost about which \
phases are variable and which are constant, so we better keep note of that \
elsewhere.
NOTE: To check whether all members of a list are an empty list we\
\[CloseCurlyQuote]re using DeleteDuplicates, which has no short-circuit and \
is thus inefficient for the other (non-empty) lists.\
\>", "Text",
 CellChangeTimes->{{3.72920969148484*^9, 3.72920969396355*^9}, {
  3.729256428306767*^9, 3.729256505581509*^9}, {3.729256625082221*^9, 
  3.729256673921035*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"DeleteEmptyPhases", "[", "listOfListsOfSubseqs_", "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"Table", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"column", "=", 
          RowBox[{"listOfListsOfSubseqs", "[", 
           RowBox[{"[", 
            RowBox[{"All", ",", "i"}], "]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"DeleteDuplicates", "[", "column", "]"}], "===", 
            RowBox[{"{", 
             RowBox[{"{", "}"}], "}"}]}], ",", "\[IndentingNewLine]", "None", 
           ",", "\[IndentingNewLine]", "column"}], "\[IndentingNewLine]", 
          "]"}]}], ",", "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"i", ",", "1", ",", 
          RowBox[{"Length", "@", 
           RowBox[{"First", "@", "listOfListsOfSubseqs"}]}]}], "}"}]}], 
       "\[IndentingNewLine]", "]"}], "//", 
      RowBox[{"DeleteCases", "[", "None", "]"}]}], "\[IndentingNewLine]", "//",
      "Transpose"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.729209627661635*^9, 3.7292096559999447`*^9}, {
  3.729256520321814*^9, 3.729256606863102*^9}, {3.729256684781445*^9, 
  3.729256794962236*^9}, {3.729256853259611*^9, 3.7292568548775787`*^9}, {
  3.729261830531208*^9, 3.7292618339017057`*^9}}],

Cell["\<\
Given a list of indices of the original seqs or ias, and a list of lists of \
subseqs (i.e., the two things returned by MsaSplitSeqsIntoPhases), remove any \
empty phases and show the first N lines of each phase.\
\>", "Text",
 CellChangeTimes->{{3.7292095786569433`*^9, 3.72920962454659*^9}, {
  3.7292096604579277`*^9, 3.729209685397161*^9}, {3.72925641823879*^9, 
  3.729256419111497*^9}, {3.729257119945525*^9, 3.729257149459148*^9}, {
  3.7292583560895443`*^9, 3.7292583594250183`*^9}, {3.729258447700611*^9, 
  3.7292584481683073`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Catrulis", "[", 
   RowBox[{"listOfIndices_", ",", "listOfListsOfSubseqs_", ",", 
    RowBox[{"showHowManyLines_Integer:", "100"}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "}"}], ",", "\[IndentingNewLine]", "1"}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.729209627661635*^9, 3.7292096559999447`*^9}, {
   3.729258362884777*^9, 3.729258440398962*^9}, 3.72926564128096*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Chop by given chopping points", "Section",
 CellChangeTimes->{{3.728917018166161*^9, 3.728917027151602*^9}}],

Cell["\<\
Given a list of seqs, their msa, and a list of n {from, to} pairs, return n \
lists of subseqs, one per phase\
\>", "Text",
 CellChangeTimes->{{3.728916963775333*^9, 3.7289170135619717`*^9}, {
  3.7289172426128387`*^9, 3.72891724570453*^9}, {3.7289173500275183`*^9, 
  3.728917351054473*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"SeqsMsaFromTosToListOfSeqLists", "[", 
   RowBox[{"seqs_", ",", "msa_", ",", "fromTos_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"paps", ",", "listOfListsOfSubseqs"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"paps", "=", 
      RowBox[{"MsaRangesToPreAlignmentPositions", "[", 
       RowBox[{"msa", ",", "fromTos"}], "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"listOfListsOfSubseqs", "=", 
      RowBox[{"Table", "[", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{"seqs", "[", 
          RowBox[{"[", "i", "]"}], "]"}], "[", 
         RowBox[{"[", 
          RowBox[{
           RowBox[{"paps", "[", 
            RowBox[{"[", "i", "]"}], "]"}], "[", 
           RowBox[{"[", "j", "]"}], "]"}], "]"}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"j", ",", "1", ",", 
          RowBox[{"Length", "[", "fromTos", "]"}]}], "}"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"{", 
         RowBox[{"i", ",", "1", ",", 
          RowBox[{"Length", "[", "seqs", "]"}]}], "}"}]}], 
       "\[IndentingNewLine]", "]"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Return", "[", "listOfListsOfSubseqs", "]"}], ";"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7289170335370703`*^9, 3.7289170927934427`*^9}, {
  3.7289172277147923`*^9, 3.728917321798439*^9}, {3.7289173553138647`*^9, 
  3.728917374010653*^9}, {3.728918541575554*^9, 3.7289185477208557`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Other aux funcs", "Section",
 CellChangeTimes->{{3.729269857237814*^9, 3.729269870330144*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"Shuffle", "[", "elems_List", "]"}], ":=", 
  RowBox[{"RandomSample", "[", 
   RowBox[{"elems", ",", 
    RowBox[{"Length", "[", "elems", "]"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.729269828137093*^9, 3.7292698461938877`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"genaf", "=", "\"\<--genafpair --maxiterate 1000 --thread 2\>\""}], 
  ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.729271963386671*^9, 3.729271967584304*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"GoAll", "[", 
   RowBox[{
   "subsetSize_", ",", "mafftOP_", ",", "mafftEP_", ",", "mafftOtherArgs_", 
    ",", "maxSpreadStable_", ",", "minColsStable_"}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", "tssPathnames", "}"}], ",", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"Print", "[", 
      RowBox[{"Style", "[", 
       RowBox[{
        RowBox[{"DateString", "[", "]"}], ",", "20"}], "]"}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"tssPathnames", "=", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{"(*", "\[IndentingNewLine]", 
        RowBox[{
        "\"\<~/phab/toolbox/bbp/data/benchmark/numberofcities-e4q38-airplan_2-\
500x005-004-016-000-SkipGetProps-WithDelete.tss\>\"", ",", 
         "\"\<~/phab/toolbox/bbp/data/benchmark/numberofcities-e4q16-airplan_\
3-500x005-004-016-000-SkipGetProps-WithDelete.tss\>\"", ",", 
         "\"\<~/phab/toolbox/bbp/data/benchmark/numberofcities-e4q05-airplan_\
5-500x005-004-016-000-SkipGetProps-WithDelete.tss\>\""}], 
        "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"(*", "\[IndentingNewLine]", 
        RowBox[{
        "\"\<~/phab/toolbox/bbp/data/benchmark/strongconnectedness-e4q02-\
airplan_3-500x005-004-016-000-WithGetMatrix-WithDelete.tss\>\"", ",", 
         "\"\<~/phab/toolbox/bbp/data/benchmark/strongconnectedness-e4q55-\
airplan_4-500x005-004-016-000-WithGetMatrix-WithDelete.tss\>\""}], 
        "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
       RowBox[{"(*", "\[IndentingNewLine]", 
        RowBox[{
        "\"\<~/phab/toolbox/bbp/data/benchmark/numberofcities-e4q38-airplan_2-\
500x005-004-016-000-SkipGetProps-WithDelete-ND.tss\>\"", ",", 
         "\"\<~/phab/toolbox/bbp/data/benchmark/numberofcities-e4q16-airplan_\
3-500x005-004-016-000-SkipGetProps-WithDelete-ND.tss\>\"", ",", 
         "\"\<~/phab/toolbox/bbp/data/benchmark/numberofcities-e4q05-airplan_\
5-500x005-004-016-000-SkipGetProps-WithDelete-ND.tss\>\""}], 
        "\[IndentingNewLine]", "*)"}], "\[IndentingNewLine]", 
       RowBox[{
       "\"\<~/phab/toolbox/bbp/data/benchmark/numberofonesinprivkey-e2q04-\
gabfeed_5-012x005x001x005-1024-1024.tss\>\"", ",", 
        "\"\<~/phab/toolbox/bbp/data/benchmark/numberofonesinprivkey-e2q10-\
gabfeed_1-012x005x001x005-1024-1024.tss\>\"", ",", 
        "\"\<~/phab/toolbox/bbp/data/benchmark/numberofonesinprivkey-e2q32-\
gabfeed_2-012x005x001x005-1024-1024.tss\>\""}], "\[IndentingNewLine]", 
       RowBox[{"(*", "\[IndentingNewLine]", 
        RowBox[{
        "\"\<~/phab/toolbox/bbp/data/benchmark/numberofcities-e4q38-airplan_2-\
200x005-004-016-000-SkipGetProps-WithDelete.tss\>\"", ",", 
         "\"\<~/phab/toolbox/bbp/data/benchmark/numberofcities-e4q16-airplan_\
3-200x005-004-016-000-SkipGetProps-WithDelete.tss\>\"", ",", 
         "\"\<~/phab/toolbox/bbp/data/benchmark/numberofcities-e4q05-airplan_\
5-200x005-004-016-000-SkipGetProps-WithDelete.tss\>\"", ",", 
         "\[IndentingNewLine]", 
         "\"\<~/phab/toolbox/bbp/data/benchmark/strongconnectedness-e4q02-\
airplan_3-200x005-004-016-000-WithGetMatrix-WithDelete.tss\>\"", ",", 
         "\"\<~/phab/toolbox/bbp/data/benchmark/strongconnectedness-e4q55-\
airplan_4-200x005-004-016-000-WithGetMatrix-WithDelete.tss\>\"", ",", 
         "\[IndentingNewLine]", 
         "\"\<~/phab/toolbox/bbp/data/benchmark/\
changelocationrebootingevery10times-e2q31-snapbuddy_1-294x010.tss\>\"", ",", 
         "\"\<~/phab/toolbox/bbp/data/benchmark/fivecities-e4q45+e4q11-tour_\
planner-250x020.tss\>\"", ",", 
         "\"\<~/phab/toolbox/bbp/data/benchmark/item_bidding-e4q57-bidpal_2-\
049x004.tss\>\"", ",", "\[IndentingNewLine]", 
         "\"\<~/phab/toolbox/bbp/data/benchmark/numberofonesinprivkey-e2q04-\
gabfeed_5-005x005x005x005-256-1024.tss\>\"", ",", 
         "\"\<~/phab/toolbox/bbp/data/benchmark/numberofonesinprivkey-e2q10-\
gabfeed_1-005x005x005x005-256-1024.tss\>\"", ",", 
         "\"\<~/phab/toolbox/bbp/data/benchmark/numberofonesinprivkey-e2q32-\
gabfeed_2-005x005x005x005-256-1024.tss\>\"", ",", 
         "\"\<~/phab/toolbox/bbp/data/benchmark/power_bidding-e4q06-\
powerbroker_4-049x004.tss\>\"", ",", 
         "\"\<~/phab/toolbox/bbp/data/benchmark/power_bidding-e4q15-\
powerbroker_2-049x004.tss\>\"", ",", 
         "\"\<~/phab/toolbox/bbp/data/benchmark/power_bidding-e4q40-\
powerbroker_1-049x004.tss\>\""}], "\[IndentingNewLine]", "*)"}], 
       "\[IndentingNewLine]", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"chopplots", "=", 
      RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Do", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"Go", "[", 
         RowBox[{
         "tssPathname", ",", "subsetSize", ",", "mafftOP", ",", "mafftEP", 
          ",", "mafftOtherArgs", ",", "maxSpreadStable", ",", 
          "minColsStable"}], "]"}], ";", "\[IndentingNewLine]", 
        RowBox[{"AppendTo", "[", 
         RowBox[{"chopplots", ",", 
          RowBox[{"ShowPhases", "[", 
           RowBox[{
            RowBox[{"Shuffle", "@", "phases"}], ",", "100"}], "]"}]}], "]"}], 
        ";"}], "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"tssPathname", ",", "tssPathnames"}], "}"}]}], 
      "\[IndentingNewLine]", "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Print", "[", 
      RowBox[{"Style", "[", 
       RowBox[{
        RowBox[{"DateString", "[", "]"}], ",", "20"}], "]"}], "]"}], ";"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.729284497038356*^9, 3.7292845177381563`*^9}, {
   3.72928456377662*^9, 3.729284614690112*^9}, 3.729284956454707*^9, {
   3.7292855757073917`*^9, 3.729285605990075*^9}, {3.729285637056201*^9, 
   3.7292857434288177`*^9}, {3.7292857771386757`*^9, 3.72928580171601*^9}, {
   3.729285860519949*^9, 3.72928588154506*^9}, {3.729285919913438*^9, 
   3.729285969383038*^9}, {3.729288498559928*^9, 3.7292885013500843`*^9}, {
   3.729291434821021*^9, 3.7292914468866987`*^9}, {3.7293739645095987`*^9, 
   3.729373974383596*^9}, {3.729432464502734*^9, 3.7294324945595627`*^9}, {
   3.729455521531951*^9, 3.729455528572846*^9}, {3.729455569844572*^9, 
   3.729455581318018*^9}, {3.729455635864944*^9, 3.729455636580023*^9}, {
   3.729479424661125*^9, 3.72947946747801*^9}}],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{"GoAll", "[", 
   RowBox[{
   "500", ",", "1.5", ",", "0.0", ",", "genaf", ",", ".25", ",", "3"}], "]"}],
   " ", "*)"}]], "Input",
 CellChangeTimes->{{3.7292884904547653`*^9, 3.729288492392797*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "maas", ",", "manl", ",", "snap", ",", "tour", ",", "bidp", ",", 
     "\[IndentingNewLine]", "a2nc", ",", "a3nc", ",", "a5nc", ",", 
     "\[IndentingNewLine]", "a3sc", ",", "a4sc", ",", "\[IndentingNewLine]", 
     "g5no", ",", "g1no", ",", "g2no", ",", "\[IndentingNewLine]", "pow4", 
     ",", "pow2", ",", "pow1"}], "}"}], "=", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
    "\"\<~/phab/toolbox/bbp/data/benchmark/artactualsize_givenset-e5q09-\
medpedia-SkipListAll-00400-025-1516706251.tss\>\"", ",", 
     "\"\<~/phab/toolbox/bbp/data/benchmark/artnamelength-e5q09-medpedia-\
SkipListAll-00050-020.tss\>\"", ",", 
     "\"\<~/phab/toolbox/bbp/data/benchmark/\
changelocationrebootingevery10times-e2q31-snapbuddy_1-294x010.tss\>\"", ",", 
     "\"\<~/phab/toolbox/bbp/data/benchmark/fivecities-e4q45+e4q11-tour_\
planner-250x020.tss\>\"", ",", 
     "\"\<~/phab/toolbox/bbp/data/benchmark/item_bidding-e4q57-bidpal_2-\
049x004.tss\>\"", ",", "\[IndentingNewLine]", 
     "\"\<~/phab/toolbox/bbp/data/benchmark/numberofcities-e4q38-airplan_2-\
200x005-004-016-000-SkipGetProps-WithDelete.tss\>\"", ",", 
     "\"\<~/phab/toolbox/bbp/data/benchmark/numberofcities-e4q16-airplan_3-\
200x005-004-016-000-SkipGetProps-WithDelete.tss\>\"", ",", 
     "\"\<~/phab/toolbox/bbp/data/benchmark/numberofcities-e4q05-airplan_5-\
200x005-004-016-000-SkipGetProps-WithDelete.tss\>\"", ",", 
     "\"\<~/phab/toolbox/bbp/data/benchmark/strongconnectedness-e4q02-airplan_\
3-200x005-004-016-000-WithGetMatrix-WithDelete.tss\>\"", ",", 
     "\"\<~/phab/toolbox/bbp/data/benchmark/strongconnectedness-e4q55-airplan_\
4-200x005-004-016-000-WithGetMatrix-WithDelete.tss\>\"", ",", 
     "\[IndentingNewLine]", 
     "\"\<~/phab/toolbox/bbp/data/benchmark/numberofonesinprivkey-e2q04-\
gabfeed_5-005x005x005x005-256-1024.tss\>\"", ",", 
     "\"\<~/phab/toolbox/bbp/data/benchmark/numberofonesinprivkey-e2q10-\
gabfeed_1-005x005x005x005-256-1024.tss\>\"", ",", 
     "\"\<~/phab/toolbox/bbp/data/benchmark/numberofonesinprivkey-e2q32-\
gabfeed_2-005x005x005x005-256-1024.tss\>\"", ",", 
     "\"\<~/phab/toolbox/bbp/data/benchmark/power_bidding-e4q06-powerbroker_4-\
049x004.tss\>\"", ",", 
     "\"\<~/phab/toolbox/bbp/data/benchmark/power_bidding-e4q15-powerbroker_2-\
049x004.tss\>\"", ",", 
     "\"\<~/phab/toolbox/bbp/data/benchmark/power_bidding-e4q40-powerbroker_1-\
049x004.tss\>\""}], "\[IndentingNewLine]", "}"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.729291359751121*^9, 3.729291408872776*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Split interactions by ports", "Section",
 CellChangeTimes->{{3.741698166608026*^9, 3.7416981713361607`*^9}}],

Cell["\<\
Select only packets that either come from or go to a certain given port. \
Return new ia.\
\>", "Text",
 CellChangeTimes->{{3.741698180350135*^9, 3.7416982096716547`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"SelectOnlyWithPortIA", "[", 
   RowBox[{"ia_", ",", "port_"}], "]"}], ":=", 
  RowBox[{"ia", "[", 
   RowBox[{"Select", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"#sport", "\[Equal]", "port"}], "||", 
      RowBox[{"#dport", "\[Equal]", "port"}]}], "&"}], "]"}], 
   "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.741696506226707*^9, 3.74169650943775*^9}, {
  3.741696872052164*^9, 3.741696885670466*^9}}],

Cell["Operator version of the above.", "Text",
 CellChangeTimes->{{3.741698212065442*^9, 3.7416982255179167`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"SelectOnlyWithPortIA", "[", "port_", "]"}], ":=", 
  RowBox[{"Select", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"#sport", "\[Equal]", "port"}], "||", 
     RowBox[{"#dport", "\[Equal]", "port"}]}], "&"}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.7416968875719643`*^9, 3.741696894526485*^9}}],

Cell["Given one ia and a list of N ports, return a list of N ias.", "Text",
 CellChangeTimes->{{3.7416982326933813`*^9, 3.741698261732654*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"SplitByPortsIA", "[", 
   RowBox[{"ia_", ",", "ports_"}], "]"}], ":=", 
  RowBox[{"Map", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"ia", "[", "#", "]"}], "&"}], ",", 
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"SelectOnlyWithPortIA", "[", "#", "]"}], "&"}], ",", "ports"}],
      "]"}]}], "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.741697771998725*^9, 3.741697811703012*^9}, {
  3.741697842465293*^9, 3.741697851793764*^9}}],

Cell["\<\
Given a list of ias and a list of N ports, return N lists of ias.\
\>", "Text",
 CellChangeTimes->{{3.741698250655377*^9, 3.741698269102911*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"SplitByPortsIAs", "[", 
   RowBox[{"ias_", ",", "ports_"}], "]"}], ":=", 
  RowBox[{
   RowBox[{"Map", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"SplitByPortsIA", "[", 
       RowBox[{"#", ",", "ports"}], "]"}], "&"}], ",", "ias"}], "]"}], "//", 
   "Transpose"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.741696456970133*^9, 3.7416964760782433`*^9}, {
  3.741696526197818*^9, 3.7416965400367813`*^9}, {3.7416975029876966`*^9, 
  3.741697567938037*^9}, {3.7416976316598063`*^9, 3.741697667406205*^9}, {
  3.741697701836619*^9, 3.741697745798864*^9}, {3.74169786696145*^9, 
  3.741697911622579*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Show sequences of sizes", "Section",
 CellChangeTimes->{{3.741706459245041*^9, 3.741706462481151*^9}}],

Cell["\<\
Version of ShowSeqs with non-1500 scale (PEND: Remove the one above, or use \
different names.)\
\>", "Text",
 CellChangeTimes->{{3.7417005421737823`*^9, 3.741700554474522*^9}, {
  3.741706493361751*^9, 3.741706506287479*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"ShowSeqs", "[", "seqs_", "]"}], ":=", 
  RowBox[{"Manipulate", "[", 
   RowBox[{
    RowBox[{"With", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"maxLen", "=", 
         RowBox[{"Max", "[", 
          RowBox[{"Length", "/@", "seqs"}], "]"}]}], ",", " ", 
        RowBox[{"maxVal", "=", 
         RowBox[{"Max", "[", 
          RowBox[{"Flatten", "@", "seqs"}], "]"}]}], ",", " ", 
        RowBox[{"minVal", "=", 
         RowBox[{"Min", "[", 
          RowBox[{"Flatten", "@", "seqs"}], "]"}]}]}], "}"}], ",", 
      "\[IndentingNewLine]", 
      RowBox[{"ListPlot", "[", 
       RowBox[{
        RowBox[{"seqs", "[", 
         RowBox[{"[", "i", "]"}], "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"PlotRange", "\[Rule]", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", 
             RowBox[{"maxLen", "+", 
              RowBox[{"0.05", "maxLen"}]}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"minVal", "-", 
              RowBox[{"0.05", 
               RowBox[{"Abs", "[", 
                RowBox[{"maxVal", "-", "minVal"}], "]"}]}]}], ",", 
             RowBox[{"maxVal", "+", 
              RowBox[{"0.05", 
               RowBox[{"Abs", "[", 
                RowBox[{"maxVal", "-", "minVal"}], "]"}]}]}]}], "}"}]}], 
          "}"}]}], ",", " ", 
        RowBox[{"(*", " ", 
         RowBox[{"generalize", " ", "this"}], " ", "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{"ImageSize", "\[Rule]", "Large"}], ",", "\[IndentingNewLine]", 
        RowBox[{"Filling", "\[Rule]", "Axis"}]}], "\[IndentingNewLine]", 
       "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{"i", ",", "1", ",", 
      RowBox[{"Length", "[", "seqs", "]"}], ",", "1"}], "}"}]}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.741626480415928*^9, 3.741626503377376*^9}, {
  3.741700515288519*^9, 3.741700527909017*^9}, {3.741700587236301*^9, 
  3.741700625064507*^9}, {3.74170646733389*^9, 3.741706488926948*^9}}]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1280, 873},
WindowMargins->{{28, Automatic}, {Automatic, 32}},
SpellingDictionaries->{"CorrectWords"->{
 "packetradius", "src", "dst", "ias"}},
FrontEndVersion->"11.0 for Mac OS X x86 (32-bit, 64-bit Kernel) (July 28, \
2016)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 227, 3, 92, "Title"],
Cell[CellGroupData[{
Cell[832, 29, 143, 2, 65, "Chapter"],
Cell[978, 33, 361, 8, 68, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1376, 46, 154, 3, 65, "Chapter",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[1555, 53, 102, 1, 44, "Subsection"],
Cell[1660, 56, 480, 10, 30, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2177, 71, 103, 1, 64, "Section"],
Cell[2283, 74, 664, 11, 30, "Text",
 InitializationCell->True],
Cell[2950, 87, 1801, 40, 217, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[4776, 131, 156, 2, 35, "Subsubsection"],
Cell[4935, 135, 347, 8, 49, "Text"],
Cell[5285, 145, 3227, 74, 301, "Input",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[8549, 224, 121, 1, 35, "Subsubsection"],
Cell[8673, 227, 608, 11, 68, "Text",
 InitializationCell->True],
Cell[9284, 240, 2173, 51, 196, "Input",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[11494, 296, 131, 1, 35, "Subsubsection"],
Cell[11628, 299, 977, 21, 175, "Input",
 InitializationCell->True]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[12654, 326, 97, 1, 64, "Section"],
Cell[12754, 329, 702, 18, 70, "Input",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[13493, 352, 121, 1, 64, "Section"],
Cell[13617, 355, 253, 5, 30, "Text"],
Cell[13873, 362, 674, 19, 112, "Input",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[14584, 386, 295, 4, 64, "Section",
 InitializationCell->True],
Cell[14882, 392, 289, 6, 30, "Text",
 InitializationCell->True],
Cell[15174, 400, 728, 19, 48, "Input",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[15939, 424, 269, 5, 64, "Section"],
Cell[16211, 431, 526, 15, 70, "Input",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[16774, 451, 167, 2, 64, "Section"],
Cell[16944, 455, 459, 9, 49, "Text"],
Cell[17406, 466, 2675, 66, 385, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[20106, 536, 492, 10, 32, "Input"],
Cell[20601, 548, 289, 6, 32, "Output"]
}, Open  ]],
Cell[20905, 557, 769, 15, 106, "Text"],
Cell[21677, 574, 6203, 131, 784, "Input",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[27917, 710, 170, 2, 64, "Section"],
Cell[28090, 714, 131, 1, 30, "Text"],
Cell[28224, 717, 585, 15, 70, "Input",
 InitializationCell->True],
Cell[28812, 734, 165, 2, 30, "Text"],
Cell[28980, 738, 250, 6, 48, "Input",
 InitializationCell->True],
Cell[29233, 746, 186, 2, 30, "Text"],
Cell[29422, 750, 384, 8, 48, "Input",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[29843, 763, 370, 9, 64, "Section",
 InitializationCell->True],
Cell[30216, 774, 155, 3, 30, "Text"],
Cell[30374, 779, 490, 13, 48, "Input",
 InitializationCell->True],
Cell[30867, 794, 216, 4, 30, "Text"],
Cell[31086, 800, 1061, 28, 154, "Input",
 InitializationCell->True],
Cell[32150, 830, 472, 9, 68, "Text"],
Cell[CellGroupData[{
Cell[32647, 843, 172, 2, 44, "Subsection"],
Cell[32822, 847, 402, 8, 49, "Text"],
Cell[33227, 857, 2596, 62, 406, "Input",
 InitializationCell->True],
Cell[35826, 921, 142, 1, 30, "Text"],
Cell[35971, 924, 2308, 58, 406, "Input",
 InitializationCell->True],
Cell[38282, 984, 1272, 31, 133, "Input",
 InitializationCell->True]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[39603, 1021, 104, 1, 64, "Section"],
Cell[39710, 1024, 336, 8, 68, "Text"],
Cell[40049, 1034, 3478, 71, 322, "Input",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[43564, 1110, 157, 2, 64, "Section"],
Cell[43724, 1114, 191, 2, 30, "Text"],
Cell[43918, 1118, 1921, 47, 175, "Input",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[45876, 1170, 304, 4, 64, "Section",
 InitializationCell->True],
Cell[46183, 1176, 141, 1, 30, "Text"],
Cell[46327, 1179, 1527, 45, 133, "Input",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[47891, 1229, 230, 9, 64, "Section"],
Cell[48124, 1240, 131, 1, 30, "Text"],
Cell[48258, 1243, 830, 24, 70, "Input",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[49125, 1272, 212, 3, 64, "Section",
 InitializationCell->True],
Cell[49340, 1277, 414, 10, 68, "Text"],
Cell[49757, 1289, 1855, 38, 280, "Input",
 InitializationCell->True],
Cell[51615, 1329, 2082, 44, 301, "Input",
 InitializationCell->True],
Cell[53700, 1375, 163, 2, 30, "Text"],
Cell[53866, 1379, 2350, 53, 385, "Input",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[56253, 1437, 213, 3, 64, "Section",
 InitializationCell->True],
Cell[56469, 1442, 261, 7, 68, "Text"],
Cell[56733, 1451, 1587, 35, 322, "Input",
 InitializationCell->True],
Cell[58323, 1488, 2199, 47, 343, "Input",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[60559, 1540, 263, 5, 64, "Section"],
Cell[60825, 1547, 291, 8, 106, "Text"],
Cell[61119, 1557, 162, 3, 30, "Text"],
Cell[61284, 1562, 1629, 38, 285, "Input",
 InitializationCell->True],
Cell[62916, 1602, 415, 10, 48, "Input",
 InitializationCell->True],
Cell[63334, 1614, 237, 5, 49, "Text"],
Cell[63574, 1621, 907, 20, 238, "Input",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[64518, 1646, 265, 5, 64, "Section"],
Cell[64786, 1653, 438, 9, 68, "Text"],
Cell[CellGroupData[{
Cell[65249, 1666, 210, 4, 44, "Subsection"],
Cell[65462, 1672, 905, 17, 49, "Text"],
Cell[66370, 1691, 2431, 54, 154, "Input",
 InitializationCell->True],
Cell[68804, 1747, 174, 2, 30, "Text"],
Cell[68981, 1751, 500, 13, 48, "Input",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[69518, 1769, 210, 4, 44, "Subsection"],
Cell[69731, 1775, 442, 11, 49, "Text"],
Cell[70176, 1788, 3171, 68, 175, "Input",
 InitializationCell->True],
Cell[73350, 1858, 174, 2, 30, "Text"],
Cell[73527, 1862, 503, 13, 48, "Input",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[74067, 1880, 168, 2, 44, "Subsection"],
Cell[74238, 1884, 290, 7, 70, "Input",
 InitializationCell->True],
Cell[74531, 1893, 310, 7, 68, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[74890, 1906, 133, 1, 64, "Section"],
Cell[75026, 1909, 176, 2, 30, "Text"],
Cell[75205, 1913, 354, 12, 48, "Input",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[75596, 1930, 122, 1, 64, "Section"],
Cell[75721, 1933, 309, 8, 68, "Text"],
Cell[76033, 1943, 442, 10, 48, "Input",
 InitializationCell->True],
Cell[76478, 1955, 445, 10, 48, "Input",
 InitializationCell->True],
Cell[76926, 1967, 463, 11, 48, "Input",
 InitializationCell->True],
Cell[77392, 1980, 1245, 28, 133, "Input",
 InitializationCell->True],
Cell[78640, 2010, 182, 2, 30, "Text"],
Cell[78825, 2014, 1273, 31, 217, "Input",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[80135, 2050, 153, 2, 64, "Section",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[80313, 2056, 100, 1, 44, "Subsection"],
Cell[80416, 2059, 343, 7, 30, "Text",
 InitializationCell->True],
Cell[80762, 2068, 1848, 47, 280, "Input",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[82647, 2120, 111, 1, 44, "Subsection"],
Cell[82761, 2123, 445, 8, 49, "Text",
 InitializationCell->True],
Cell[83209, 2133, 1210, 25, 154, "Input",
 InitializationCell->True]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[84468, 2164, 412, 6, 64, "Section",
 InitializationCell->True],
Cell[84883, 2172, 953, 22, 87, "Text",
 InitializationCell->True],
Cell[85839, 2196, 2410, 54, 280, "Input",
 InitializationCell->True],
Cell[88252, 2252, 168, 3, 30, "Text"],
Cell[88423, 2257, 1784, 46, 238, "Input",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[90244, 2308, 315, 5, 64, "Section"],
Cell[90562, 2315, 1482, 42, 133, "Input",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[92081, 2362, 259, 4, 64, "Section",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[92365, 2370, 208, 3, 44, "Subsection"],
Cell[92576, 2375, 873, 21, 70, "Input",
 InitializationCell->True],
Cell[93452, 2398, 247, 7, 48, "Input",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[93736, 2410, 124, 1, 44, "Subsection"],
Cell[93863, 2413, 579, 14, 48, "Input",
 InitializationCell->True],
Cell[94445, 2429, 1264, 32, 133, "Input",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[95746, 2466, 182, 2, 44, "Subsection"],
Cell[95931, 2470, 261, 5, 30, "Text"],
Cell[96195, 2477, 989, 22, 196, "Input",
 InitializationCell->True],
Cell[97187, 2501, 942, 22, 196, "Input",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[98166, 2528, 147, 1, 44, "Subsection"],
Cell[98316, 2531, 318, 6, 30, "Text"],
Cell[98637, 2539, 3643, 81, 348, "Input",
 InitializationCell->True],
Cell[102283, 2622, 302, 6, 30, "Text"],
Cell[102588, 2630, 3109, 76, 348, "Input",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[105734, 2711, 168, 3, 44, "Subsection"],
Cell[105905, 2716, 2116, 52, 259, "Input",
 InitializationCell->True],
Cell[108024, 2770, 140, 1, 30, "Text"],
Cell[108167, 2773, 3529, 79, 301, "Input",
 InitializationCell->True],
Cell[111699, 2854, 2529, 55, 259, "Input",
 InitializationCell->True],
Cell[114231, 2911, 157, 3, 30, "Text"],
Cell[114391, 2916, 1425, 35, 196, "Input",
 InitializationCell->True],
Cell[115819, 2953, 123, 1, 30, "Text"],
Cell[115945, 2956, 1309, 32, 196, "Input",
 InitializationCell->True]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[117303, 2994, 233, 3, 64, "Section"],
Cell[117539, 2999, 276, 5, 30, "Text"],
Cell[117818, 3006, 128, 1, 30, "Text"],
Cell[117949, 3009, 4519, 114, 427, "Input",
 InitializationCell->True],
Cell[122471, 3125, 133, 1, 30, "Text"],
Cell[122607, 3128, 1361, 37, 154, "Input",
 InitializationCell->True],
Cell[123971, 3167, 543, 13, 49, "Text"],
Cell[124517, 3182, 1712, 43, 196, "Input",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[126266, 3230, 177, 2, 64, "Section"],
Cell[126446, 3234, 194, 4, 30, "Text"],
Cell[126643, 3240, 616, 15, 48, "Input",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[127296, 3260, 114, 1, 64, "Section"],
Cell[127413, 3263, 388, 9, 49, "Text"],
Cell[127804, 3274, 2309, 58, 217, "Input",
 InitializationCell->True],
Cell[130116, 3334, 674, 17, 70, "Input",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[130827, 3356, 92, 1, 64, "Section"],
Cell[130922, 3359, 243, 6, 30, "Text"],
Cell[131168, 3367, 155, 3, 30, "Text"],
Cell[131326, 3372, 485, 10, 48, "Input",
 InitializationCell->True],
Cell[131814, 3384, 792, 20, 112, "Input",
 InitializationCell->True],
Cell[132609, 3406, 329, 6, 49, "Text"],
Cell[132941, 3414, 2293, 53, 348, "Input",
 InitializationCell->True],
Cell[135237, 3469, 562, 13, 70, "Input",
 InitializationCell->True],
Cell[135802, 3484, 817, 19, 133, "Input",
 InitializationCell->True],
Cell[136622, 3505, 238, 5, 30, "Text"],
Cell[136863, 3512, 753, 18, 48, "Input",
 InitializationCell->True],
Cell[137619, 3532, 174, 2, 30, "Text"],
Cell[137796, 3536, 326, 8, 48, "Input",
 InitializationCell->True],
Cell[138125, 3546, 320, 6, 30, "Text"],
Cell[138448, 3554, 498, 11, 48, "Input",
 InitializationCell->True],
Cell[138949, 3567, 551, 12, 154, "Input",
 InitializationCell->True],
Cell[139503, 3581, 389, 7, 30, "Text"],
Cell[139895, 3590, 2067, 52, 175, "Input",
 InitializationCell->True],
Cell[141965, 3644, 252, 5, 30, "Text"],
Cell[142220, 3651, 1331, 32, 133, "Input",
 InitializationCell->True],
Cell[143554, 3685, 172, 4, 30, "Text"],
Cell[143729, 3691, 1124, 25, 133, "Input",
 InitializationCell->True],
Cell[144856, 3718, 442, 8, 30, "Text"],
Cell[145301, 3728, 3016, 63, 490, "Input",
 InitializationCell->True],
Cell[148320, 3793, 635, 10, 68, "Text"],
Cell[148958, 3805, 1122, 28, 196, "Input",
 InitializationCell->True],
Cell[150083, 3835, 974, 18, 163, "Text"],
Cell[151060, 3855, 1577, 32, 259, "Input",
 InitializationCell->True],
Cell[152640, 3889, 1269, 21, 182, "Text"],
Cell[153912, 3912, 2654, 56, 448, "Input",
 InitializationCell->True],
Cell[156569, 3970, 279, 5, 30, "Text"],
Cell[156851, 3977, 372, 9, 48, "Input",
 InitializationCell->True],
Cell[CellGroupData[{
Cell[157248, 3990, 126, 2, 32, "Input"],
Cell[157377, 3994, 1135, 22, 96, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[158549, 4021, 126, 2, 32, "Input"],
Cell[158678, 4025, 336, 7, 32, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[159051, 4037, 125, 2, 32, "Input"],
Cell[159179, 4041, 336, 7, 32, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[159552, 4053, 218, 5, 32, "Input"],
Cell[159773, 4060, 1340, 23, 96, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[161150, 4088, 439, 13, 32, "Input"],
Cell[161592, 4103, 1132, 22, 100, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[162761, 4130, 131, 2, 32, "Input"],
Cell[162895, 4134, 1640, 39, 477, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[164572, 4178, 92, 1, 32, "Input"],
Cell[164667, 4181, 1081, 21, 75, "Output"]
}, Open  ]],
Cell[165763, 4205, 401, 13, 48, "Input",
 InitializationCell->True],
Cell[166167, 4220, 209, 4, 30, "Text"],
Cell[166379, 4226, 1149, 28, 217, "Input",
 InitializationCell->True],
Cell[167531, 4256, 3640, 96, 322, "Input",
 InitializationCell->True],
Cell[171174, 4354, 2911, 62, 364, "Input",
 InitializationCell->True],
Cell[174088, 4418, 3124, 86, 280, "Input",
 InitializationCell->True],
Cell[177215, 4506, 3473, 92, 322, "Input",
 InitializationCell->True],
Cell[180691, 4600, 1917, 42, 322, "Input",
 InitializationCell->True],
Cell[182611, 4644, 1273, 31, 217, "Input",
 InitializationCell->True],
Cell[183887, 4677, 362, 6, 30, "Text"],
Cell[184252, 4685, 3015, 67, 490, "Input",
 InitializationCell->True],
Cell[187270, 4754, 1034, 26, 133, "Input",
 InitializationCell->True],
Cell[188307, 4782, 1270, 31, 133, "Input",
 InitializationCell->True],
Cell[189580, 4815, 1510, 38, 175, "Input",
 InitializationCell->True],
Cell[191093, 4855, 1107, 29, 154, "Input",
 InitializationCell->True],
Cell[192203, 4886, 1168, 30, 154, "Input",
 InitializationCell->True],
Cell[193374, 4918, 4284, 105, 385, "Input",
 InitializationCell->True],
Cell[197661, 5025, 1493, 37, 175, "Input",
 InitializationCell->True],
Cell[199157, 5064, 949, 25, 159, "Input"],
Cell[200109, 5091, 1538, 40, 217, "Input",
 InitializationCell->True],
Cell[201650, 5133, 138, 1, 30, "Text"],
Cell[201791, 5136, 4669, 120, 427, "Input",
 InitializationCell->True],
Cell[206463, 5258, 1242, 32, 175, "Input",
 InitializationCell->True],
Cell[207708, 5292, 1320, 33, 175, "Input",
 InitializationCell->True],
Cell[209031, 5327, 1632, 39, 159, "Input"],
Cell[210666, 5368, 1802, 45, 175, "Input",
 InitializationCell->True],
Cell[212471, 5415, 1028, 27, 208, "Input",
 InitializationCell->True],
Cell[213502, 5444, 1077, 25, 154, "Input",
 InitializationCell->True],
Cell[214582, 5471, 1422, 34, 133, "Input",
 InitializationCell->True],
Cell[216007, 5507, 334, 6, 49, "Text"],
Cell[216344, 5515, 817, 21, 70, "Input",
 InitializationCell->True],
Cell[217164, 5538, 443, 12, 48, "Input",
 InitializationCell->True],
Cell[217610, 5552, 867, 19, 217, "Input",
 InitializationCell->True],
Cell[218480, 5573, 125, 1, 30, "Text"],
Cell[218608, 5576, 1101, 30, 154, "Input",
 InitializationCell->True],
Cell[219712, 5608, 1201, 31, 175, "Input",
 InitializationCell->True],
Cell[220916, 5641, 858, 16, 106, "Text"],
Cell[221777, 5659, 2360, 56, 217, "Input",
 InitializationCell->True],
Cell[224140, 5717, 1755, 38, 133, "Input",
 InitializationCell->True],
Cell[225898, 5757, 1548, 39, 175, "Input",
 InitializationCell->True],
Cell[227449, 5798, 203, 4, 30, "Text"],
Cell[227655, 5804, 4067, 93, 616, "Input",
 InitializationCell->True],
Cell[231725, 5899, 482, 8, 49, "Text"],
Cell[232210, 5909, 2046, 46, 385, "Input",
 InitializationCell->True],
Cell[234259, 5957, 279, 5, 30, "Text"],
Cell[234541, 5964, 657, 19, 48, "Input",
 InitializationCell->True],
Cell[235201, 5985, 555, 10, 49, "Text"],
Cell[235759, 5997, 1700, 44, 259, "Input",
 InitializationCell->True],
Cell[237462, 6043, 474, 10, 49, "Text"],
Cell[237939, 6055, 898, 23, 112, "Input",
 InitializationCell->True],
Cell[238840, 6080, 277, 5, 30, "Text"],
Cell[239120, 6087, 2778, 55, 427, "Input",
 InitializationCell->True],
Cell[241901, 6144, 195, 4, 30, "Text"],
Cell[242099, 6150, 2022, 48, 301, "Input",
 InitializationCell->True],
Cell[244124, 6200, 156, 3, 30, "Text"],
Cell[244283, 6205, 1143, 26, 217, "Input",
 InitializationCell->True],
Cell[245429, 6233, 460, 8, 49, "Text"],
Cell[245892, 6243, 2175, 47, 322, "Input",
 InitializationCell->True],
Cell[248070, 6292, 199, 4, 49, "Text"],
Cell[248272, 6298, 3767, 77, 574, "Input",
 InitializationCell->True],
Cell[252042, 6377, 246, 5, 49, "Text"],
Cell[252291, 6384, 1731, 39, 238, "Input",
 InitializationCell->True],
Cell[254025, 6425, 138, 1, 30, "Text"],
Cell[254166, 6428, 568, 14, 48, "Input",
 InitializationCell->True],
Cell[254737, 6444, 138, 1, 30, "Text"],
Cell[254878, 6447, 302, 8, 48, "Input",
 InitializationCell->True],
Cell[255183, 6457, 111, 1, 30, "Text"],
Cell[255297, 6460, 281, 6, 48, "Input",
 InitializationCell->True],
Cell[255581, 6468, 158, 3, 30, "Text"],
Cell[255742, 6473, 975, 24, 112, "Input",
 InitializationCell->True],
Cell[256720, 6499, 173, 4, 30, "Text"],
Cell[256896, 6505, 1583, 39, 217, "Input",
 InitializationCell->True],
Cell[258482, 6546, 538, 9, 49, "Text"],
Cell[259023, 6557, 1363, 33, 133, "Input",
 InitializationCell->True],
Cell[260389, 6592, 674, 15, 48, "Input",
 InitializationCell->True],
Cell[261066, 6609, 2528, 53, 343, "Input",
 InitializationCell->True],
Cell[263597, 6664, 2640, 58, 448, "Input",
 InitializationCell->True],
Cell[266240, 6724, 1980, 49, 343, "Input",
 InitializationCell->True],
Cell[268223, 6775, 5013, 114, 658, "Input",
 InitializationCell->True],
Cell[273239, 6891, 5616, 120, 658, "Input",
 InitializationCell->True],
Cell[278858, 7013, 2215, 62, 217, "Input",
 InitializationCell->True],
Cell[281076, 7077, 2564, 65, 364, "Input",
 InitializationCell->True],
Cell[283643, 7144, 3206, 69, 532, "Input",
 InitializationCell->True],
Cell[286852, 7215, 1700, 44, 196, "Input",
 InitializationCell->True],
Cell[288555, 7261, 3880, 92, 427, "Input",
 InitializationCell->True],
Cell[292438, 7355, 6777, 143, 784, "Input",
 InitializationCell->True],
Cell[299218, 7500, 5539, 119, 574, "Input",
 InitializationCell->True],
Cell[304760, 7621, 783, 19, 154, "Input",
 InitializationCell->True],
Cell[305546, 7642, 4385, 104, 546, "Input",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[309968, 7751, 99, 1, 64, "Section"],
Cell[310070, 7754, 3536, 69, 448, "Input",
 InitializationCell->True],
Cell[313609, 7825, 468, 10, 48, "Input",
 InitializationCell->True],
Cell[314080, 7837, 692, 17, 112, "Input",
 InitializationCell->True],
Cell[314775, 7856, 593, 11, 48, "Input",
 InitializationCell->True],
Cell[315371, 7869, 1040, 20, 133, "Input",
 InitializationCell->True],
Cell[316414, 7891, 721, 17, 112, "Input",
 InitializationCell->True],
Cell[317138, 7910, 712, 17, 112, "Input",
 InitializationCell->True],
Cell[317853, 7929, 997, 22, 112, "Input",
 InitializationCell->True],
Cell[318853, 7953, 859, 19, 112, "Input",
 InitializationCell->True],
Cell[319715, 7974, 1032, 22, 112, "Input",
 InitializationCell->True],
Cell[320750, 7998, 1136, 20, 238, "Input",
 InitializationCell->True],
Cell[321889, 8020, 3122, 58, 595, "Input",
 InitializationCell->True],
Cell[325014, 8080, 6182, 145, 952, "Input",
 InitializationCell->True],
Cell[331199, 8227, 156, 3, 30, "Text"],
Cell[331358, 8232, 2572, 58, 280, "Input",
 InitializationCell->True],
Cell[333933, 8292, 2057, 45, 217, "Input",
 InitializationCell->True],
Cell[335993, 8339, 1755, 37, 196, "Input",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[337785, 8381, 143, 1, 64, "Section"],
Cell[337931, 8384, 418, 8, 68, "Text"],
Cell[338352, 8394, 563, 9, 49, "Text"],
Cell[338918, 8405, 5037, 109, 645, "Input",
 InitializationCell->True],
Cell[343958, 8516, 296, 6, 30, "Text"],
Cell[344257, 8524, 2717, 70, 364, "Input",
 InitializationCell->True],
Cell[346977, 8596, 411, 7, 30, "Text"],
Cell[347391, 8605, 1303, 28, 244, "Input",
 InitializationCell->True],
Cell[348697, 8635, 368, 6, 30, "Text"],
Cell[349068, 8643, 879, 19, 154, "Input",
 InitializationCell->True],
Cell[349950, 8664, 347, 6, 30, "Text"],
Cell[350300, 8672, 974, 22, 175, "Input",
 InitializationCell->True],
Cell[351277, 8696, 1076, 28, 175, "Input",
 InitializationCell->True],
Cell[352356, 8726, 215, 3, 30, "Text"],
Cell[352574, 8731, 1040, 27, 112, "Input",
 InitializationCell->True],
Cell[353617, 8760, 1120, 25, 196, "Input",
 InitializationCell->True],
Cell[354740, 8787, 317, 7, 68, "Text"],
Cell[355060, 8796, 2383, 55, 301, "Input",
 InitializationCell->True],
Cell[357446, 8853, 7107, 134, 700, "Input",
 InitializationCell->True],
Cell[364556, 8989, 137, 1, 30, "Text"],
Cell[364696, 8992, 497, 13, 48, "Input",
 InitializationCell->True],
Cell[365196, 9007, 400, 9, 68, "Text"],
Cell[365599, 9018, 2887, 65, 477, "Input",
 InitializationCell->True],
Cell[368489, 9085, 1194, 20, 201, "Text"],
Cell[369686, 9107, 2363, 59, 364, "Input",
 InitializationCell->True],
Cell[372052, 9168, 473, 9, 68, "Text"],
Cell[372528, 9179, 2199, 53, 322, "Input",
 InitializationCell->True],
Cell[374730, 9234, 257, 5, 30, "Text"],
Cell[374990, 9241, 2876, 69, 561, "Input",
 InitializationCell->True],
Cell[377869, 9312, 302, 8, 68, "Text"],
Cell[378174, 9322, 9758, 205, 1477, "Input",
 InitializationCell->True],
Cell[387935, 9529, 16412, 343, 2150, "Input",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[404384, 9877, 102, 1, 64, "Section"],
Cell[404489, 9880, 384, 7, 68, "Text"],
Cell[404876, 9889, 11701, 218, 1792, "Input",
 InitializationCell->True],
Cell[416580, 10109, 139, 1, 30, "Text"],
Cell[416722, 10112, 1944, 47, 196, "Input",
 InitializationCell->True],
Cell[418669, 10161, 355, 6, 49, "Text"],
Cell[419027, 10169, 1361, 33, 154, "Input",
 InitializationCell->True],
Cell[420391, 10204, 686, 12, 106, "Text"],
Cell[421080, 10218, 1740, 45, 133, "Input",
 InitializationCell->True],
Cell[422823, 10265, 272, 5, 30, "Text"],
Cell[423098, 10272, 892, 24, 70, "Input",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[424027, 10301, 140, 1, 64, "Section"],
Cell[424170, 10304, 372, 7, 49, "Text"],
Cell[424545, 10313, 5091, 120, 595, "Input",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[429673, 10438, 336, 4, 64, "Section"],
Cell[430012, 10444, 379, 7, 30, "Text"],
Cell[430394, 10453, 1806, 41, 259, "Input",
 InitializationCell->True],
Cell[432203, 10496, 520, 12, 30, "Text"],
Cell[432726, 10510, 939, 20, 48, "Input",
 InitializationCell->True],
Cell[433668, 10532, 237, 5, 30, "Text"],
Cell[433908, 10539, 816, 19, 48, "Input",
 InitializationCell->True],
Cell[434727, 10560, 595, 13, 144, "Text"],
Cell[435325, 10575, 2373, 53, 280, "Input",
 InitializationCell->True],
Cell[437701, 10630, 176, 2, 30, "Text"],
Cell[437880, 10634, 615, 15, 70, "Input",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[438532, 10654, 116, 1, 64, "Section"],
Cell[438651, 10657, 258, 5, 30, "Text"],
Cell[438912, 10664, 6215, 132, 742, "Input",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[445164, 10801, 157, 2, 64, "Section"],
Cell[445324, 10805, 5586, 127, 532, "Input",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[450947, 10937, 112, 1, 64, "Section"],
Cell[451062, 10940, 500, 8, 49, "Text"],
Cell[451565, 10950, 2753, 67, 301, "Input",
 InitializationCell->True],
Cell[454321, 11019, 385, 6, 49, "Text"],
Cell[454709, 11027, 1420, 35, 196, "Input",
 InitializationCell->True],
Cell[456132, 11064, 109, 1, 30, "Text"],
Cell[456244, 11067, 2162, 50, 280, "Input",
 InitializationCell->True],
Cell[458409, 11119, 1382, 22, 163, "Text"],
Cell[459794, 11143, 7144, 160, 868, "Input",
 InitializationCell->True],
Cell[466941, 11305, 1415, 33, 154, "Input",
 InitializationCell->True],
Cell[468359, 11340, 158, 3, 30, "Text"],
Cell[468520, 11345, 1833, 44, 196, "Input",
 InitializationCell->True],
Cell[470356, 11391, 197, 4, 30, "Text"],
Cell[470556, 11397, 757, 21, 91, "Input",
 InitializationCell->True],
Cell[471316, 11420, 154, 3, 30, "Text"],
Cell[471473, 11425, 3746, 79, 343, "Input",
 InitializationCell->True],
Cell[475222, 11506, 94, 1, 30, "Text"],
Cell[475319, 11509, 1049, 24, 259, "Input",
 InitializationCell->True],
Cell[476371, 11535, 217, 4, 30, "Text"],
Cell[476591, 11541, 2198, 44, 238, "Input",
 InitializationCell->True],
Cell[478792, 11587, 162, 3, 30, "Text"],
Cell[478957, 11592, 1764, 39, 238, "Input",
 InitializationCell->True],
Cell[480724, 11633, 358, 6, 30, "Text"],
Cell[481085, 11641, 5767, 127, 532, "Input",
 InitializationCell->True],
Cell[486855, 11770, 1779, 37, 343, "Input",
 InitializationCell->True],
Cell[488637, 11809, 93, 1, 30, "Text"],
Cell[488733, 11812, 3233, 68, 490, "Input",
 InitializationCell->True],
Cell[491969, 11882, 217, 4, 30, "Text"],
Cell[492189, 11888, 5131, 106, 532, "Input",
 InitializationCell->True],
Cell[497323, 11996, 476, 9, 87, "Text"],
Cell[497802, 12007, 2128, 55, 238, "Input",
 InitializationCell->True],
Cell[499933, 12064, 278, 5, 30, "Text"],
Cell[500214, 12071, 289, 6, 48, "Input",
 InitializationCell->True],
Cell[500506, 12079, 704, 12, 68, "Text"],
Cell[501213, 12093, 1515, 35, 259, "Input",
 InitializationCell->True],
Cell[502731, 12130, 552, 9, 49, "Text"],
Cell[503286, 12141, 491, 11, 91, "Input",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[503814, 12157, 114, 1, 64, "Section"],
Cell[503931, 12160, 302, 6, 30, "Text"],
Cell[504236, 12168, 1596, 38, 217, "Input",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[505869, 12211, 100, 1, 64, "Section"],
Cell[505972, 12214, 294, 7, 48, "Input",
 InitializationCell->True],
Cell[506269, 12223, 214, 5, 48, "Input",
 InitializationCell->True],
Cell[506486, 12230, 6378, 117, 994, "Input",
 InitializationCell->True],
Cell[512867, 12349, 244, 6, 32, "Input"],
Cell[513114, 12357, 2575, 45, 474, "Input"]
}, Open  ]],
Cell[CellGroupData[{
Cell[515726, 12407, 114, 1, 64, "Section"],
Cell[515843, 12410, 181, 4, 30, "Text"],
Cell[516027, 12416, 466, 13, 48, "Input",
 InitializationCell->True],
Cell[516496, 12431, 114, 1, 30, "Text"],
Cell[516613, 12434, 356, 9, 48, "Input",
 InitializationCell->True],
Cell[516972, 12445, 143, 1, 30, "Text"],
Cell[517118, 12448, 512, 15, 48, "Input",
 InitializationCell->True],
Cell[517633, 12465, 155, 3, 30, "Text"],
Cell[517791, 12470, 658, 16, 48, "Input",
 InitializationCell->True]
}, Open  ]],
Cell[CellGroupData[{
Cell[518486, 12491, 108, 1, 64, "Section"],
Cell[518597, 12494, 236, 5, 30, "Text"],
Cell[518836, 12501, 2137, 54, 196, "Input",
 InitializationCell->True]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

